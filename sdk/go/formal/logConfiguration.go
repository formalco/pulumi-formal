// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Managing Log Configuration with Formal.
type LogConfiguration struct {
	pulumi.CustomResourceState

	// When the log configuration was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the encryption key to use for this log configuration.
	EncryptionKeyId pulumi.StringOutput `pulumi:"encryptionKeyId"`
	// The name of this log configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Request logging configuration.
	Request LogConfigurationRequestOutput `pulumi:"request"`
	// Response logging configuration.
	Response LogConfigurationResponseOutput `pulumi:"response"`
	// The scope configuration for this log configuration.
	Scope LogConfigurationScopeOutput `pulumi:"scope"`
	// Stream logging configuration.
	Stream LogConfigurationStreamPtrOutput `pulumi:"stream"`
	// Last update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewLogConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLogConfiguration(ctx *pulumi.Context,
	name string, args *LogConfigurationArgs, opts ...pulumi.ResourceOption) (*LogConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EncryptionKeyId == nil {
		return nil, errors.New("invalid value for required argument 'EncryptionKeyId'")
	}
	if args.Request == nil {
		return nil, errors.New("invalid value for required argument 'Request'")
	}
	if args.Response == nil {
		return nil, errors.New("invalid value for required argument 'Response'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogConfiguration
	err := ctx.RegisterResource("formal:index/logConfiguration:LogConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogConfiguration gets an existing LogConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogConfigurationState, opts ...pulumi.ResourceOption) (*LogConfiguration, error) {
	var resource LogConfiguration
	err := ctx.ReadResource("formal:index/logConfiguration:LogConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogConfiguration resources.
type logConfigurationState struct {
	// When the log configuration was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the encryption key to use for this log configuration.
	EncryptionKeyId *string `pulumi:"encryptionKeyId"`
	// The name of this log configuration.
	Name *string `pulumi:"name"`
	// Request logging configuration.
	Request *LogConfigurationRequest `pulumi:"request"`
	// Response logging configuration.
	Response *LogConfigurationResponse `pulumi:"response"`
	// The scope configuration for this log configuration.
	Scope *LogConfigurationScope `pulumi:"scope"`
	// Stream logging configuration.
	Stream *LogConfigurationStream `pulumi:"stream"`
	// Last update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type LogConfigurationState struct {
	// When the log configuration was created.
	CreatedAt pulumi.StringPtrInput
	// The ID of the encryption key to use for this log configuration.
	EncryptionKeyId pulumi.StringPtrInput
	// The name of this log configuration.
	Name pulumi.StringPtrInput
	// Request logging configuration.
	Request LogConfigurationRequestPtrInput
	// Response logging configuration.
	Response LogConfigurationResponsePtrInput
	// The scope configuration for this log configuration.
	Scope LogConfigurationScopePtrInput
	// Stream logging configuration.
	Stream LogConfigurationStreamPtrInput
	// Last update time.
	UpdatedAt pulumi.StringPtrInput
}

func (LogConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*logConfigurationState)(nil)).Elem()
}

type logConfigurationArgs struct {
	// The ID of the encryption key to use for this log configuration.
	EncryptionKeyId string `pulumi:"encryptionKeyId"`
	// The name of this log configuration.
	Name *string `pulumi:"name"`
	// Request logging configuration.
	Request LogConfigurationRequest `pulumi:"request"`
	// Response logging configuration.
	Response LogConfigurationResponse `pulumi:"response"`
	// The scope configuration for this log configuration.
	Scope LogConfigurationScope `pulumi:"scope"`
	// Stream logging configuration.
	Stream *LogConfigurationStream `pulumi:"stream"`
}

// The set of arguments for constructing a LogConfiguration resource.
type LogConfigurationArgs struct {
	// The ID of the encryption key to use for this log configuration.
	EncryptionKeyId pulumi.StringInput
	// The name of this log configuration.
	Name pulumi.StringPtrInput
	// Request logging configuration.
	Request LogConfigurationRequestInput
	// Response logging configuration.
	Response LogConfigurationResponseInput
	// The scope configuration for this log configuration.
	Scope LogConfigurationScopeInput
	// Stream logging configuration.
	Stream LogConfigurationStreamPtrInput
}

func (LogConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logConfigurationArgs)(nil)).Elem()
}

type LogConfigurationInput interface {
	pulumi.Input

	ToLogConfigurationOutput() LogConfigurationOutput
	ToLogConfigurationOutputWithContext(ctx context.Context) LogConfigurationOutput
}

func (*LogConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfiguration)(nil)).Elem()
}

func (i *LogConfiguration) ToLogConfigurationOutput() LogConfigurationOutput {
	return i.ToLogConfigurationOutputWithContext(context.Background())
}

func (i *LogConfiguration) ToLogConfigurationOutputWithContext(ctx context.Context) LogConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigurationOutput)
}

// LogConfigurationArrayInput is an input type that accepts LogConfigurationArray and LogConfigurationArrayOutput values.
// You can construct a concrete instance of `LogConfigurationArrayInput` via:
//
//	LogConfigurationArray{ LogConfigurationArgs{...} }
type LogConfigurationArrayInput interface {
	pulumi.Input

	ToLogConfigurationArrayOutput() LogConfigurationArrayOutput
	ToLogConfigurationArrayOutputWithContext(context.Context) LogConfigurationArrayOutput
}

type LogConfigurationArray []LogConfigurationInput

func (LogConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogConfiguration)(nil)).Elem()
}

func (i LogConfigurationArray) ToLogConfigurationArrayOutput() LogConfigurationArrayOutput {
	return i.ToLogConfigurationArrayOutputWithContext(context.Background())
}

func (i LogConfigurationArray) ToLogConfigurationArrayOutputWithContext(ctx context.Context) LogConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigurationArrayOutput)
}

// LogConfigurationMapInput is an input type that accepts LogConfigurationMap and LogConfigurationMapOutput values.
// You can construct a concrete instance of `LogConfigurationMapInput` via:
//
//	LogConfigurationMap{ "key": LogConfigurationArgs{...} }
type LogConfigurationMapInput interface {
	pulumi.Input

	ToLogConfigurationMapOutput() LogConfigurationMapOutput
	ToLogConfigurationMapOutputWithContext(context.Context) LogConfigurationMapOutput
}

type LogConfigurationMap map[string]LogConfigurationInput

func (LogConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogConfiguration)(nil)).Elem()
}

func (i LogConfigurationMap) ToLogConfigurationMapOutput() LogConfigurationMapOutput {
	return i.ToLogConfigurationMapOutputWithContext(context.Background())
}

func (i LogConfigurationMap) ToLogConfigurationMapOutputWithContext(ctx context.Context) LogConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigurationMapOutput)
}

type LogConfigurationOutput struct{ *pulumi.OutputState }

func (LogConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfiguration)(nil)).Elem()
}

func (o LogConfigurationOutput) ToLogConfigurationOutput() LogConfigurationOutput {
	return o
}

func (o LogConfigurationOutput) ToLogConfigurationOutputWithContext(ctx context.Context) LogConfigurationOutput {
	return o
}

// When the log configuration was created.
func (o LogConfigurationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfiguration) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the encryption key to use for this log configuration.
func (o LogConfigurationOutput) EncryptionKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfiguration) pulumi.StringOutput { return v.EncryptionKeyId }).(pulumi.StringOutput)
}

// The name of this log configuration.
func (o LogConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Request logging configuration.
func (o LogConfigurationOutput) Request() LogConfigurationRequestOutput {
	return o.ApplyT(func(v *LogConfiguration) LogConfigurationRequestOutput { return v.Request }).(LogConfigurationRequestOutput)
}

// Response logging configuration.
func (o LogConfigurationOutput) Response() LogConfigurationResponseOutput {
	return o.ApplyT(func(v *LogConfiguration) LogConfigurationResponseOutput { return v.Response }).(LogConfigurationResponseOutput)
}

// The scope configuration for this log configuration.
func (o LogConfigurationOutput) Scope() LogConfigurationScopeOutput {
	return o.ApplyT(func(v *LogConfiguration) LogConfigurationScopeOutput { return v.Scope }).(LogConfigurationScopeOutput)
}

// Stream logging configuration.
func (o LogConfigurationOutput) Stream() LogConfigurationStreamPtrOutput {
	return o.ApplyT(func(v *LogConfiguration) LogConfigurationStreamPtrOutput { return v.Stream }).(LogConfigurationStreamPtrOutput)
}

// Last update time.
func (o LogConfigurationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfiguration) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type LogConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LogConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogConfiguration)(nil)).Elem()
}

func (o LogConfigurationArrayOutput) ToLogConfigurationArrayOutput() LogConfigurationArrayOutput {
	return o
}

func (o LogConfigurationArrayOutput) ToLogConfigurationArrayOutputWithContext(ctx context.Context) LogConfigurationArrayOutput {
	return o
}

func (o LogConfigurationArrayOutput) Index(i pulumi.IntInput) LogConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogConfiguration {
		return vs[0].([]*LogConfiguration)[vs[1].(int)]
	}).(LogConfigurationOutput)
}

type LogConfigurationMapOutput struct{ *pulumi.OutputState }

func (LogConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogConfiguration)(nil)).Elem()
}

func (o LogConfigurationMapOutput) ToLogConfigurationMapOutput() LogConfigurationMapOutput {
	return o
}

func (o LogConfigurationMapOutput) ToLogConfigurationMapOutputWithContext(ctx context.Context) LogConfigurationMapOutput {
	return o
}

func (o LogConfigurationMapOutput) MapIndex(k pulumi.StringInput) LogConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogConfiguration {
		return vs[0].(map[string]*LogConfiguration)[vs[1].(string)]
	}).(LogConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigurationInput)(nil)).Elem(), &LogConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigurationArrayInput)(nil)).Elem(), LogConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigurationMapInput)(nil)).Elem(), LogConfigurationMap{})
	pulumi.RegisterOutputType(LogConfigurationOutput{})
	pulumi.RegisterOutputType(LogConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LogConfigurationMapOutput{})
}
