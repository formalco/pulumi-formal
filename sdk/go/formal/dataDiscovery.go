// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Data Discovery with Formal.
type DataDiscovery struct {
	pulumi.CustomResourceState

	// Creation time of the Data Discovery.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Deletion policy of the Data Discovery. Possible values: `delete`, `markForDeletion`.
	DeletionPolicy pulumi.StringOutput `pulumi:"deletionPolicy"`
	// Native user ID linked to this Data Discovery.
	NativeUserId pulumi.StringOutput `pulumi:"nativeUserId"`
	// Path of the inventory object.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Resource ID linked to this Data Discovery.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
}

// NewDataDiscovery registers a new resource with the given unique name, arguments, and options.
func NewDataDiscovery(ctx *pulumi.Context,
	name string, args *DataDiscoveryArgs, opts ...pulumi.ResourceOption) (*DataDiscovery, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeletionPolicy == nil {
		return nil, errors.New("invalid value for required argument 'DeletionPolicy'")
	}
	if args.NativeUserId == nil {
		return nil, errors.New("invalid value for required argument 'NativeUserId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataDiscovery
	err := ctx.RegisterResource("formal:index/dataDiscovery:DataDiscovery", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataDiscovery gets an existing DataDiscovery resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataDiscovery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataDiscoveryState, opts ...pulumi.ResourceOption) (*DataDiscovery, error) {
	var resource DataDiscovery
	err := ctx.ReadResource("formal:index/dataDiscovery:DataDiscovery", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataDiscovery resources.
type dataDiscoveryState struct {
	// Creation time of the Data Discovery.
	CreatedAt *int `pulumi:"createdAt"`
	// Deletion policy of the Data Discovery. Possible values: `delete`, `markForDeletion`.
	DeletionPolicy *string `pulumi:"deletionPolicy"`
	// Native user ID linked to this Data Discovery.
	NativeUserId *string `pulumi:"nativeUserId"`
	// Path of the inventory object.
	Path *string `pulumi:"path"`
	// Resource ID linked to this Data Discovery.
	ResourceId *string `pulumi:"resourceId"`
	// Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
	Schedule *string `pulumi:"schedule"`
}

type DataDiscoveryState struct {
	// Creation time of the Data Discovery.
	CreatedAt pulumi.IntPtrInput
	// Deletion policy of the Data Discovery. Possible values: `delete`, `markForDeletion`.
	DeletionPolicy pulumi.StringPtrInput
	// Native user ID linked to this Data Discovery.
	NativeUserId pulumi.StringPtrInput
	// Path of the inventory object.
	Path pulumi.StringPtrInput
	// Resource ID linked to this Data Discovery.
	ResourceId pulumi.StringPtrInput
	// Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
	Schedule pulumi.StringPtrInput
}

func (DataDiscoveryState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataDiscoveryState)(nil)).Elem()
}

type dataDiscoveryArgs struct {
	// Deletion policy of the Data Discovery. Possible values: `delete`, `markForDeletion`.
	DeletionPolicy string `pulumi:"deletionPolicy"`
	// Native user ID linked to this Data Discovery.
	NativeUserId string `pulumi:"nativeUserId"`
	// Path of the inventory object.
	Path *string `pulumi:"path"`
	// Resource ID linked to this Data Discovery.
	ResourceId string `pulumi:"resourceId"`
	// Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
	Schedule string `pulumi:"schedule"`
}

// The set of arguments for constructing a DataDiscovery resource.
type DataDiscoveryArgs struct {
	// Deletion policy of the Data Discovery. Possible values: `delete`, `markForDeletion`.
	DeletionPolicy pulumi.StringInput
	// Native user ID linked to this Data Discovery.
	NativeUserId pulumi.StringInput
	// Path of the inventory object.
	Path pulumi.StringPtrInput
	// Resource ID linked to this Data Discovery.
	ResourceId pulumi.StringInput
	// Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
	Schedule pulumi.StringInput
}

func (DataDiscoveryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataDiscoveryArgs)(nil)).Elem()
}

type DataDiscoveryInput interface {
	pulumi.Input

	ToDataDiscoveryOutput() DataDiscoveryOutput
	ToDataDiscoveryOutputWithContext(ctx context.Context) DataDiscoveryOutput
}

func (*DataDiscovery) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDiscovery)(nil)).Elem()
}

func (i *DataDiscovery) ToDataDiscoveryOutput() DataDiscoveryOutput {
	return i.ToDataDiscoveryOutputWithContext(context.Background())
}

func (i *DataDiscovery) ToDataDiscoveryOutputWithContext(ctx context.Context) DataDiscoveryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiscoveryOutput)
}

// DataDiscoveryArrayInput is an input type that accepts DataDiscoveryArray and DataDiscoveryArrayOutput values.
// You can construct a concrete instance of `DataDiscoveryArrayInput` via:
//
//	DataDiscoveryArray{ DataDiscoveryArgs{...} }
type DataDiscoveryArrayInput interface {
	pulumi.Input

	ToDataDiscoveryArrayOutput() DataDiscoveryArrayOutput
	ToDataDiscoveryArrayOutputWithContext(context.Context) DataDiscoveryArrayOutput
}

type DataDiscoveryArray []DataDiscoveryInput

func (DataDiscoveryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataDiscovery)(nil)).Elem()
}

func (i DataDiscoveryArray) ToDataDiscoveryArrayOutput() DataDiscoveryArrayOutput {
	return i.ToDataDiscoveryArrayOutputWithContext(context.Background())
}

func (i DataDiscoveryArray) ToDataDiscoveryArrayOutputWithContext(ctx context.Context) DataDiscoveryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiscoveryArrayOutput)
}

// DataDiscoveryMapInput is an input type that accepts DataDiscoveryMap and DataDiscoveryMapOutput values.
// You can construct a concrete instance of `DataDiscoveryMapInput` via:
//
//	DataDiscoveryMap{ "key": DataDiscoveryArgs{...} }
type DataDiscoveryMapInput interface {
	pulumi.Input

	ToDataDiscoveryMapOutput() DataDiscoveryMapOutput
	ToDataDiscoveryMapOutputWithContext(context.Context) DataDiscoveryMapOutput
}

type DataDiscoveryMap map[string]DataDiscoveryInput

func (DataDiscoveryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataDiscovery)(nil)).Elem()
}

func (i DataDiscoveryMap) ToDataDiscoveryMapOutput() DataDiscoveryMapOutput {
	return i.ToDataDiscoveryMapOutputWithContext(context.Background())
}

func (i DataDiscoveryMap) ToDataDiscoveryMapOutputWithContext(ctx context.Context) DataDiscoveryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDiscoveryMapOutput)
}

type DataDiscoveryOutput struct{ *pulumi.OutputState }

func (DataDiscoveryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDiscovery)(nil)).Elem()
}

func (o DataDiscoveryOutput) ToDataDiscoveryOutput() DataDiscoveryOutput {
	return o
}

func (o DataDiscoveryOutput) ToDataDiscoveryOutputWithContext(ctx context.Context) DataDiscoveryOutput {
	return o
}

// Creation time of the Data Discovery.
func (o DataDiscoveryOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *DataDiscovery) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Deletion policy of the Data Discovery. Possible values: `delete`, `markForDeletion`.
func (o DataDiscoveryOutput) DeletionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDiscovery) pulumi.StringOutput { return v.DeletionPolicy }).(pulumi.StringOutput)
}

// Native user ID linked to this Data Discovery.
func (o DataDiscoveryOutput) NativeUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDiscovery) pulumi.StringOutput { return v.NativeUserId }).(pulumi.StringOutput)
}

// Path of the inventory object.
func (o DataDiscoveryOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataDiscovery) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Resource ID linked to this Data Discovery.
func (o DataDiscoveryOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDiscovery) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Schedule at which the Data Discovery will be executed. Possible values: `6h`, `12h`, `18h`, `24h` or a valid cron expression, for example `0 4,16 * * *` to run daily at 04:00 and 16:00 UTC.
func (o DataDiscoveryOutput) Schedule() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDiscovery) pulumi.StringOutput { return v.Schedule }).(pulumi.StringOutput)
}

type DataDiscoveryArrayOutput struct{ *pulumi.OutputState }

func (DataDiscoveryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataDiscovery)(nil)).Elem()
}

func (o DataDiscoveryArrayOutput) ToDataDiscoveryArrayOutput() DataDiscoveryArrayOutput {
	return o
}

func (o DataDiscoveryArrayOutput) ToDataDiscoveryArrayOutputWithContext(ctx context.Context) DataDiscoveryArrayOutput {
	return o
}

func (o DataDiscoveryArrayOutput) Index(i pulumi.IntInput) DataDiscoveryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataDiscovery {
		return vs[0].([]*DataDiscovery)[vs[1].(int)]
	}).(DataDiscoveryOutput)
}

type DataDiscoveryMapOutput struct{ *pulumi.OutputState }

func (DataDiscoveryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataDiscovery)(nil)).Elem()
}

func (o DataDiscoveryMapOutput) ToDataDiscoveryMapOutput() DataDiscoveryMapOutput {
	return o
}

func (o DataDiscoveryMapOutput) ToDataDiscoveryMapOutputWithContext(ctx context.Context) DataDiscoveryMapOutput {
	return o
}

func (o DataDiscoveryMapOutput) MapIndex(k pulumi.StringInput) DataDiscoveryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataDiscovery {
		return vs[0].(map[string]*DataDiscovery)[vs[1].(string)]
	}).(DataDiscoveryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiscoveryInput)(nil)).Elem(), &DataDiscovery{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiscoveryArrayInput)(nil)).Elem(), DataDiscoveryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDiscoveryMapInput)(nil)).Elem(), DataDiscoveryMap{})
	pulumi.RegisterOutputType(DataDiscoveryOutput{})
	pulumi.RegisterOutputType(DataDiscoveryArrayOutput{})
	pulumi.RegisterOutputType(DataDiscoveryMapOutput{})
}
