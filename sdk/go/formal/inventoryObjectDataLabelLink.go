// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Data Label with Formal.
type InventoryObjectDataLabelLink struct {
	pulumi.CustomResourceState

	// Data label to link to the inventory object.
	DataLabel pulumi.StringOutput `pulumi:"dataLabel"`
	// Whether the inventory object is locked.
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// Path of the inventory object.
	Path pulumi.StringOutput `pulumi:"path"`
	// Resource ID to which the inventory object belongs.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
}

// NewInventoryObjectDataLabelLink registers a new resource with the given unique name, arguments, and options.
func NewInventoryObjectDataLabelLink(ctx *pulumi.Context,
	name string, args *InventoryObjectDataLabelLinkArgs, opts ...pulumi.ResourceOption) (*InventoryObjectDataLabelLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataLabel == nil {
		return nil, errors.New("invalid value for required argument 'DataLabel'")
	}
	if args.Locked == nil {
		return nil, errors.New("invalid value for required argument 'Locked'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InventoryObjectDataLabelLink
	err := ctx.RegisterResource("formal:index/inventoryObjectDataLabelLink:InventoryObjectDataLabelLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInventoryObjectDataLabelLink gets an existing InventoryObjectDataLabelLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInventoryObjectDataLabelLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InventoryObjectDataLabelLinkState, opts ...pulumi.ResourceOption) (*InventoryObjectDataLabelLink, error) {
	var resource InventoryObjectDataLabelLink
	err := ctx.ReadResource("formal:index/inventoryObjectDataLabelLink:InventoryObjectDataLabelLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InventoryObjectDataLabelLink resources.
type inventoryObjectDataLabelLinkState struct {
	// Data label to link to the inventory object.
	DataLabel *string `pulumi:"dataLabel"`
	// Whether the inventory object is locked.
	Locked *bool `pulumi:"locked"`
	// Path of the inventory object.
	Path *string `pulumi:"path"`
	// Resource ID to which the inventory object belongs.
	ResourceId *string `pulumi:"resourceId"`
}

type InventoryObjectDataLabelLinkState struct {
	// Data label to link to the inventory object.
	DataLabel pulumi.StringPtrInput
	// Whether the inventory object is locked.
	Locked pulumi.BoolPtrInput
	// Path of the inventory object.
	Path pulumi.StringPtrInput
	// Resource ID to which the inventory object belongs.
	ResourceId pulumi.StringPtrInput
}

func (InventoryObjectDataLabelLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryObjectDataLabelLinkState)(nil)).Elem()
}

type inventoryObjectDataLabelLinkArgs struct {
	// Data label to link to the inventory object.
	DataLabel string `pulumi:"dataLabel"`
	// Whether the inventory object is locked.
	Locked bool `pulumi:"locked"`
	// Path of the inventory object.
	Path string `pulumi:"path"`
	// Resource ID to which the inventory object belongs.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a InventoryObjectDataLabelLink resource.
type InventoryObjectDataLabelLinkArgs struct {
	// Data label to link to the inventory object.
	DataLabel pulumi.StringInput
	// Whether the inventory object is locked.
	Locked pulumi.BoolInput
	// Path of the inventory object.
	Path pulumi.StringInput
	// Resource ID to which the inventory object belongs.
	ResourceId pulumi.StringInput
}

func (InventoryObjectDataLabelLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*inventoryObjectDataLabelLinkArgs)(nil)).Elem()
}

type InventoryObjectDataLabelLinkInput interface {
	pulumi.Input

	ToInventoryObjectDataLabelLinkOutput() InventoryObjectDataLabelLinkOutput
	ToInventoryObjectDataLabelLinkOutputWithContext(ctx context.Context) InventoryObjectDataLabelLinkOutput
}

func (*InventoryObjectDataLabelLink) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryObjectDataLabelLink)(nil)).Elem()
}

func (i *InventoryObjectDataLabelLink) ToInventoryObjectDataLabelLinkOutput() InventoryObjectDataLabelLinkOutput {
	return i.ToInventoryObjectDataLabelLinkOutputWithContext(context.Background())
}

func (i *InventoryObjectDataLabelLink) ToInventoryObjectDataLabelLinkOutputWithContext(ctx context.Context) InventoryObjectDataLabelLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryObjectDataLabelLinkOutput)
}

// InventoryObjectDataLabelLinkArrayInput is an input type that accepts InventoryObjectDataLabelLinkArray and InventoryObjectDataLabelLinkArrayOutput values.
// You can construct a concrete instance of `InventoryObjectDataLabelLinkArrayInput` via:
//
//	InventoryObjectDataLabelLinkArray{ InventoryObjectDataLabelLinkArgs{...} }
type InventoryObjectDataLabelLinkArrayInput interface {
	pulumi.Input

	ToInventoryObjectDataLabelLinkArrayOutput() InventoryObjectDataLabelLinkArrayOutput
	ToInventoryObjectDataLabelLinkArrayOutputWithContext(context.Context) InventoryObjectDataLabelLinkArrayOutput
}

type InventoryObjectDataLabelLinkArray []InventoryObjectDataLabelLinkInput

func (InventoryObjectDataLabelLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryObjectDataLabelLink)(nil)).Elem()
}

func (i InventoryObjectDataLabelLinkArray) ToInventoryObjectDataLabelLinkArrayOutput() InventoryObjectDataLabelLinkArrayOutput {
	return i.ToInventoryObjectDataLabelLinkArrayOutputWithContext(context.Background())
}

func (i InventoryObjectDataLabelLinkArray) ToInventoryObjectDataLabelLinkArrayOutputWithContext(ctx context.Context) InventoryObjectDataLabelLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryObjectDataLabelLinkArrayOutput)
}

// InventoryObjectDataLabelLinkMapInput is an input type that accepts InventoryObjectDataLabelLinkMap and InventoryObjectDataLabelLinkMapOutput values.
// You can construct a concrete instance of `InventoryObjectDataLabelLinkMapInput` via:
//
//	InventoryObjectDataLabelLinkMap{ "key": InventoryObjectDataLabelLinkArgs{...} }
type InventoryObjectDataLabelLinkMapInput interface {
	pulumi.Input

	ToInventoryObjectDataLabelLinkMapOutput() InventoryObjectDataLabelLinkMapOutput
	ToInventoryObjectDataLabelLinkMapOutputWithContext(context.Context) InventoryObjectDataLabelLinkMapOutput
}

type InventoryObjectDataLabelLinkMap map[string]InventoryObjectDataLabelLinkInput

func (InventoryObjectDataLabelLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryObjectDataLabelLink)(nil)).Elem()
}

func (i InventoryObjectDataLabelLinkMap) ToInventoryObjectDataLabelLinkMapOutput() InventoryObjectDataLabelLinkMapOutput {
	return i.ToInventoryObjectDataLabelLinkMapOutputWithContext(context.Background())
}

func (i InventoryObjectDataLabelLinkMap) ToInventoryObjectDataLabelLinkMapOutputWithContext(ctx context.Context) InventoryObjectDataLabelLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InventoryObjectDataLabelLinkMapOutput)
}

type InventoryObjectDataLabelLinkOutput struct{ *pulumi.OutputState }

func (InventoryObjectDataLabelLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InventoryObjectDataLabelLink)(nil)).Elem()
}

func (o InventoryObjectDataLabelLinkOutput) ToInventoryObjectDataLabelLinkOutput() InventoryObjectDataLabelLinkOutput {
	return o
}

func (o InventoryObjectDataLabelLinkOutput) ToInventoryObjectDataLabelLinkOutputWithContext(ctx context.Context) InventoryObjectDataLabelLinkOutput {
	return o
}

// Data label to link to the inventory object.
func (o InventoryObjectDataLabelLinkOutput) DataLabel() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryObjectDataLabelLink) pulumi.StringOutput { return v.DataLabel }).(pulumi.StringOutput)
}

// Whether the inventory object is locked.
func (o InventoryObjectDataLabelLinkOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *InventoryObjectDataLabelLink) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// Path of the inventory object.
func (o InventoryObjectDataLabelLinkOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryObjectDataLabelLink) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Resource ID to which the inventory object belongs.
func (o InventoryObjectDataLabelLinkOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InventoryObjectDataLabelLink) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

type InventoryObjectDataLabelLinkArrayOutput struct{ *pulumi.OutputState }

func (InventoryObjectDataLabelLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InventoryObjectDataLabelLink)(nil)).Elem()
}

func (o InventoryObjectDataLabelLinkArrayOutput) ToInventoryObjectDataLabelLinkArrayOutput() InventoryObjectDataLabelLinkArrayOutput {
	return o
}

func (o InventoryObjectDataLabelLinkArrayOutput) ToInventoryObjectDataLabelLinkArrayOutputWithContext(ctx context.Context) InventoryObjectDataLabelLinkArrayOutput {
	return o
}

func (o InventoryObjectDataLabelLinkArrayOutput) Index(i pulumi.IntInput) InventoryObjectDataLabelLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InventoryObjectDataLabelLink {
		return vs[0].([]*InventoryObjectDataLabelLink)[vs[1].(int)]
	}).(InventoryObjectDataLabelLinkOutput)
}

type InventoryObjectDataLabelLinkMapOutput struct{ *pulumi.OutputState }

func (InventoryObjectDataLabelLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InventoryObjectDataLabelLink)(nil)).Elem()
}

func (o InventoryObjectDataLabelLinkMapOutput) ToInventoryObjectDataLabelLinkMapOutput() InventoryObjectDataLabelLinkMapOutput {
	return o
}

func (o InventoryObjectDataLabelLinkMapOutput) ToInventoryObjectDataLabelLinkMapOutputWithContext(ctx context.Context) InventoryObjectDataLabelLinkMapOutput {
	return o
}

func (o InventoryObjectDataLabelLinkMapOutput) MapIndex(k pulumi.StringInput) InventoryObjectDataLabelLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InventoryObjectDataLabelLink {
		return vs[0].(map[string]*InventoryObjectDataLabelLink)[vs[1].(string)]
	}).(InventoryObjectDataLabelLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryObjectDataLabelLinkInput)(nil)).Elem(), &InventoryObjectDataLabelLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryObjectDataLabelLinkArrayInput)(nil)).Elem(), InventoryObjectDataLabelLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InventoryObjectDataLabelLinkMapInput)(nil)).Elem(), InventoryObjectDataLabelLinkMap{})
	pulumi.RegisterOutputType(InventoryObjectDataLabelLinkOutput{})
	pulumi.RegisterOutputType(InventoryObjectDataLabelLinkArrayOutput{})
	pulumi.RegisterOutputType(InventoryObjectDataLabelLinkMapOutput{})
}
