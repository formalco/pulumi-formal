// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creating a Policy in Formal.
type Policy struct {
	pulumi.CustomResourceState

	// When the policy was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Policy Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The module describing how the policy works. Create one in the Formal Console.
	Module pulumi.StringOutput `pulumi:"module"`
	// Policy Name
	Name pulumi.StringOutput `pulumi:"name"`
	// Notification settings for this policy.
	Notification pulumi.StringOutput `pulumi:"notification"`
	// Owner of this policy: it can be either a group name or a user email.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
	Status pulumi.StringOutput `pulumi:"status"`
	// If set to true, this Policy cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Last update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Module == nil {
		return nil, errors.New("invalid value for required argument 'Module'")
	}
	if args.Notification == nil {
		return nil, errors.New("invalid value for required argument 'Notification'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("formal:index/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("formal:index/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// When the policy was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Policy Description.
	Description *string `pulumi:"description"`
	// The module describing how the policy works. Create one in the Formal Console.
	Module *string `pulumi:"module"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Notification settings for this policy.
	Notification *string `pulumi:"notification"`
	// Owner of this policy: it can be either a group name or a user email.
	Owner *string `pulumi:"owner"`
	// Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
	Status *string `pulumi:"status"`
	// If set to true, this Policy cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Last update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type PolicyState struct {
	// When the policy was created.
	CreatedAt pulumi.StringPtrInput
	// Policy Description.
	Description pulumi.StringPtrInput
	// The module describing how the policy works. Create one in the Formal Console.
	Module pulumi.StringPtrInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Notification settings for this policy.
	Notification pulumi.StringPtrInput
	// Owner of this policy: it can be either a group name or a user email.
	Owner pulumi.StringPtrInput
	// Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
	Status pulumi.StringPtrInput
	// If set to true, this Policy cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Last update time.
	UpdatedAt pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Policy Description.
	Description string `pulumi:"description"`
	// The module describing how the policy works. Create one in the Formal Console.
	Module string `pulumi:"module"`
	// Policy Name
	Name *string `pulumi:"name"`
	// Notification settings for this policy.
	Notification string `pulumi:"notification"`
	// Owner of this policy: it can be either a group name or a user email.
	Owner string `pulumi:"owner"`
	// Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
	Status string `pulumi:"status"`
	// If set to true, this Policy cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Policy Description.
	Description pulumi.StringInput
	// The module describing how the policy works. Create one in the Formal Console.
	Module pulumi.StringInput
	// Policy Name
	Name pulumi.StringPtrInput
	// Notification settings for this policy.
	Notification pulumi.StringInput
	// Owner of this policy: it can be either a group name or a user email.
	Owner pulumi.StringInput
	// Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
	Status pulumi.StringInput
	// If set to true, this Policy cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// When the policy was created.
func (o PolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Policy Description.
func (o PolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The module describing how the policy works. Create one in the Formal Console.
func (o PolicyOutput) Module() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Module }).(pulumi.StringOutput)
}

// Policy Name
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Notification settings for this policy.
func (o PolicyOutput) Notification() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Notification }).(pulumi.StringOutput)
}

// Owner of this policy: it can be either a group name or a user email.
func (o PolicyOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Defines the current status of the policy. It can be one of the following: 'draft', 'dry-run', or 'active'.
func (o PolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// If set to true, this Policy cannot be deleted.
func (o PolicyOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// Last update time.
func (o PolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
