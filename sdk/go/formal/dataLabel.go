// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Data Label with Formal.
type DataLabel struct {
	pulumi.CustomResourceState

	// Data for the classifier (pattern for regex or label name for prompt).
	ClassifierData pulumi.StringOutput `pulumi:"classifierData"`
	// Type of classifier for the data label (regex or prompt)
	ClassifierType pulumi.StringOutput `pulumi:"classifierType"`
	// Friendly name for this data label.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDataLabel registers a new resource with the given unique name, arguments, and options.
func NewDataLabel(ctx *pulumi.Context,
	name string, args *DataLabelArgs, opts ...pulumi.ResourceOption) (*DataLabel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClassifierData == nil {
		return nil, errors.New("invalid value for required argument 'ClassifierData'")
	}
	if args.ClassifierType == nil {
		return nil, errors.New("invalid value for required argument 'ClassifierType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataLabel
	err := ctx.RegisterResource("formal:index/dataLabel:DataLabel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataLabel gets an existing DataLabel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataLabel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataLabelState, opts ...pulumi.ResourceOption) (*DataLabel, error) {
	var resource DataLabel
	err := ctx.ReadResource("formal:index/dataLabel:DataLabel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataLabel resources.
type dataLabelState struct {
	// Data for the classifier (pattern for regex or label name for prompt).
	ClassifierData *string `pulumi:"classifierData"`
	// Type of classifier for the data label (regex or prompt)
	ClassifierType *string `pulumi:"classifierType"`
	// Friendly name for this data label.
	Name *string `pulumi:"name"`
}

type DataLabelState struct {
	// Data for the classifier (pattern for regex or label name for prompt).
	ClassifierData pulumi.StringPtrInput
	// Type of classifier for the data label (regex or prompt)
	ClassifierType pulumi.StringPtrInput
	// Friendly name for this data label.
	Name pulumi.StringPtrInput
}

func (DataLabelState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLabelState)(nil)).Elem()
}

type dataLabelArgs struct {
	// Data for the classifier (pattern for regex or label name for prompt).
	ClassifierData string `pulumi:"classifierData"`
	// Type of classifier for the data label (regex or prompt)
	ClassifierType string `pulumi:"classifierType"`
	// Friendly name for this data label.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DataLabel resource.
type DataLabelArgs struct {
	// Data for the classifier (pattern for regex or label name for prompt).
	ClassifierData pulumi.StringInput
	// Type of classifier for the data label (regex or prompt)
	ClassifierType pulumi.StringInput
	// Friendly name for this data label.
	Name pulumi.StringPtrInput
}

func (DataLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataLabelArgs)(nil)).Elem()
}

type DataLabelInput interface {
	pulumi.Input

	ToDataLabelOutput() DataLabelOutput
	ToDataLabelOutputWithContext(ctx context.Context) DataLabelOutput
}

func (*DataLabel) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLabel)(nil)).Elem()
}

func (i *DataLabel) ToDataLabelOutput() DataLabelOutput {
	return i.ToDataLabelOutputWithContext(context.Background())
}

func (i *DataLabel) ToDataLabelOutputWithContext(ctx context.Context) DataLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLabelOutput)
}

// DataLabelArrayInput is an input type that accepts DataLabelArray and DataLabelArrayOutput values.
// You can construct a concrete instance of `DataLabelArrayInput` via:
//
//	DataLabelArray{ DataLabelArgs{...} }
type DataLabelArrayInput interface {
	pulumi.Input

	ToDataLabelArrayOutput() DataLabelArrayOutput
	ToDataLabelArrayOutputWithContext(context.Context) DataLabelArrayOutput
}

type DataLabelArray []DataLabelInput

func (DataLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataLabel)(nil)).Elem()
}

func (i DataLabelArray) ToDataLabelArrayOutput() DataLabelArrayOutput {
	return i.ToDataLabelArrayOutputWithContext(context.Background())
}

func (i DataLabelArray) ToDataLabelArrayOutputWithContext(ctx context.Context) DataLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLabelArrayOutput)
}

// DataLabelMapInput is an input type that accepts DataLabelMap and DataLabelMapOutput values.
// You can construct a concrete instance of `DataLabelMapInput` via:
//
//	DataLabelMap{ "key": DataLabelArgs{...} }
type DataLabelMapInput interface {
	pulumi.Input

	ToDataLabelMapOutput() DataLabelMapOutput
	ToDataLabelMapOutputWithContext(context.Context) DataLabelMapOutput
}

type DataLabelMap map[string]DataLabelInput

func (DataLabelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataLabel)(nil)).Elem()
}

func (i DataLabelMap) ToDataLabelMapOutput() DataLabelMapOutput {
	return i.ToDataLabelMapOutputWithContext(context.Background())
}

func (i DataLabelMap) ToDataLabelMapOutputWithContext(ctx context.Context) DataLabelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataLabelMapOutput)
}

type DataLabelOutput struct{ *pulumi.OutputState }

func (DataLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataLabel)(nil)).Elem()
}

func (o DataLabelOutput) ToDataLabelOutput() DataLabelOutput {
	return o
}

func (o DataLabelOutput) ToDataLabelOutputWithContext(ctx context.Context) DataLabelOutput {
	return o
}

// Data for the classifier (pattern for regex or label name for prompt).
func (o DataLabelOutput) ClassifierData() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLabel) pulumi.StringOutput { return v.ClassifierData }).(pulumi.StringOutput)
}

// Type of classifier for the data label (regex or prompt)
func (o DataLabelOutput) ClassifierType() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLabel) pulumi.StringOutput { return v.ClassifierType }).(pulumi.StringOutput)
}

// Friendly name for this data label.
func (o DataLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataLabel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DataLabelArrayOutput struct{ *pulumi.OutputState }

func (DataLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataLabel)(nil)).Elem()
}

func (o DataLabelArrayOutput) ToDataLabelArrayOutput() DataLabelArrayOutput {
	return o
}

func (o DataLabelArrayOutput) ToDataLabelArrayOutputWithContext(ctx context.Context) DataLabelArrayOutput {
	return o
}

func (o DataLabelArrayOutput) Index(i pulumi.IntInput) DataLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataLabel {
		return vs[0].([]*DataLabel)[vs[1].(int)]
	}).(DataLabelOutput)
}

type DataLabelMapOutput struct{ *pulumi.OutputState }

func (DataLabelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataLabel)(nil)).Elem()
}

func (o DataLabelMapOutput) ToDataLabelMapOutput() DataLabelMapOutput {
	return o
}

func (o DataLabelMapOutput) ToDataLabelMapOutputWithContext(ctx context.Context) DataLabelMapOutput {
	return o
}

func (o DataLabelMapOutput) MapIndex(k pulumi.StringInput) DataLabelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataLabel {
		return vs[0].(map[string]*DataLabel)[vs[1].(string)]
	}).(DataLabelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataLabelInput)(nil)).Elem(), &DataLabel{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLabelArrayInput)(nil)).Elem(), DataLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataLabelMapInput)(nil)).Elem(), DataLabelMap{})
	pulumi.RegisterOutputType(DataLabelOutput{})
	pulumi.RegisterOutputType(DataLabelArrayOutput{})
	pulumi.RegisterOutputType(DataLabelMapOutput{})
}
