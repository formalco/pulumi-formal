// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Connector Listener Link with Formal.
type ConnectorListenerLink struct {
	pulumi.CustomResourceState

	// The ID of the Connector Listener you want to link to a connector.
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorListenerId pulumi.StringOutput `pulumi:"connectorListenerId"`
	// If set to true, this connector cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewConnectorListenerLink registers a new resource with the given unique name, arguments, and options.
func NewConnectorListenerLink(ctx *pulumi.Context,
	name string, args *ConnectorListenerLinkArgs, opts ...pulumi.ResourceOption) (*ConnectorListenerLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	if args.ConnectorListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorListenerLink
	err := ctx.RegisterResource("formal:index/connectorListenerLink:ConnectorListenerLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorListenerLink gets an existing ConnectorListenerLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorListenerLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorListenerLinkState, opts ...pulumi.ResourceOption) (*ConnectorListenerLink, error) {
	var resource ConnectorListenerLink
	err := ctx.ReadResource("formal:index/connectorListenerLink:ConnectorListenerLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorListenerLink resources.
type connectorListenerLinkState struct {
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorId *string `pulumi:"connectorId"`
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorListenerId *string `pulumi:"connectorListenerId"`
	// If set to true, this connector cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type ConnectorListenerLinkState struct {
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorId pulumi.StringPtrInput
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorListenerId pulumi.StringPtrInput
	// If set to true, this connector cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ConnectorListenerLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorListenerLinkState)(nil)).Elem()
}

type connectorListenerLinkArgs struct {
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorId string `pulumi:"connectorId"`
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorListenerId string `pulumi:"connectorListenerId"`
	// If set to true, this connector cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a ConnectorListenerLink resource.
type ConnectorListenerLinkArgs struct {
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorId pulumi.StringInput
	// The ID of the Connector Listener you want to link to a connector.
	ConnectorListenerId pulumi.StringInput
	// If set to true, this connector cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ConnectorListenerLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorListenerLinkArgs)(nil)).Elem()
}

type ConnectorListenerLinkInput interface {
	pulumi.Input

	ToConnectorListenerLinkOutput() ConnectorListenerLinkOutput
	ToConnectorListenerLinkOutputWithContext(ctx context.Context) ConnectorListenerLinkOutput
}

func (*ConnectorListenerLink) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorListenerLink)(nil)).Elem()
}

func (i *ConnectorListenerLink) ToConnectorListenerLinkOutput() ConnectorListenerLinkOutput {
	return i.ToConnectorListenerLinkOutputWithContext(context.Background())
}

func (i *ConnectorListenerLink) ToConnectorListenerLinkOutputWithContext(ctx context.Context) ConnectorListenerLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorListenerLinkOutput)
}

// ConnectorListenerLinkArrayInput is an input type that accepts ConnectorListenerLinkArray and ConnectorListenerLinkArrayOutput values.
// You can construct a concrete instance of `ConnectorListenerLinkArrayInput` via:
//
//	ConnectorListenerLinkArray{ ConnectorListenerLinkArgs{...} }
type ConnectorListenerLinkArrayInput interface {
	pulumi.Input

	ToConnectorListenerLinkArrayOutput() ConnectorListenerLinkArrayOutput
	ToConnectorListenerLinkArrayOutputWithContext(context.Context) ConnectorListenerLinkArrayOutput
}

type ConnectorListenerLinkArray []ConnectorListenerLinkInput

func (ConnectorListenerLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorListenerLink)(nil)).Elem()
}

func (i ConnectorListenerLinkArray) ToConnectorListenerLinkArrayOutput() ConnectorListenerLinkArrayOutput {
	return i.ToConnectorListenerLinkArrayOutputWithContext(context.Background())
}

func (i ConnectorListenerLinkArray) ToConnectorListenerLinkArrayOutputWithContext(ctx context.Context) ConnectorListenerLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorListenerLinkArrayOutput)
}

// ConnectorListenerLinkMapInput is an input type that accepts ConnectorListenerLinkMap and ConnectorListenerLinkMapOutput values.
// You can construct a concrete instance of `ConnectorListenerLinkMapInput` via:
//
//	ConnectorListenerLinkMap{ "key": ConnectorListenerLinkArgs{...} }
type ConnectorListenerLinkMapInput interface {
	pulumi.Input

	ToConnectorListenerLinkMapOutput() ConnectorListenerLinkMapOutput
	ToConnectorListenerLinkMapOutputWithContext(context.Context) ConnectorListenerLinkMapOutput
}

type ConnectorListenerLinkMap map[string]ConnectorListenerLinkInput

func (ConnectorListenerLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorListenerLink)(nil)).Elem()
}

func (i ConnectorListenerLinkMap) ToConnectorListenerLinkMapOutput() ConnectorListenerLinkMapOutput {
	return i.ToConnectorListenerLinkMapOutputWithContext(context.Background())
}

func (i ConnectorListenerLinkMap) ToConnectorListenerLinkMapOutputWithContext(ctx context.Context) ConnectorListenerLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorListenerLinkMapOutput)
}

type ConnectorListenerLinkOutput struct{ *pulumi.OutputState }

func (ConnectorListenerLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorListenerLink)(nil)).Elem()
}

func (o ConnectorListenerLinkOutput) ToConnectorListenerLinkOutput() ConnectorListenerLinkOutput {
	return o
}

func (o ConnectorListenerLinkOutput) ToConnectorListenerLinkOutputWithContext(ctx context.Context) ConnectorListenerLinkOutput {
	return o
}

// The ID of the Connector Listener you want to link to a connector.
func (o ConnectorListenerLinkOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorListenerLink) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// The ID of the Connector Listener you want to link to a connector.
func (o ConnectorListenerLinkOutput) ConnectorListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorListenerLink) pulumi.StringOutput { return v.ConnectorListenerId }).(pulumi.StringOutput)
}

// If set to true, this connector cannot be deleted.
func (o ConnectorListenerLinkOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorListenerLink) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type ConnectorListenerLinkArrayOutput struct{ *pulumi.OutputState }

func (ConnectorListenerLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorListenerLink)(nil)).Elem()
}

func (o ConnectorListenerLinkArrayOutput) ToConnectorListenerLinkArrayOutput() ConnectorListenerLinkArrayOutput {
	return o
}

func (o ConnectorListenerLinkArrayOutput) ToConnectorListenerLinkArrayOutputWithContext(ctx context.Context) ConnectorListenerLinkArrayOutput {
	return o
}

func (o ConnectorListenerLinkArrayOutput) Index(i pulumi.IntInput) ConnectorListenerLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorListenerLink {
		return vs[0].([]*ConnectorListenerLink)[vs[1].(int)]
	}).(ConnectorListenerLinkOutput)
}

type ConnectorListenerLinkMapOutput struct{ *pulumi.OutputState }

func (ConnectorListenerLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorListenerLink)(nil)).Elem()
}

func (o ConnectorListenerLinkMapOutput) ToConnectorListenerLinkMapOutput() ConnectorListenerLinkMapOutput {
	return o
}

func (o ConnectorListenerLinkMapOutput) ToConnectorListenerLinkMapOutputWithContext(ctx context.Context) ConnectorListenerLinkMapOutput {
	return o
}

func (o ConnectorListenerLinkMapOutput) MapIndex(k pulumi.StringInput) ConnectorListenerLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorListenerLink {
		return vs[0].(map[string]*ConnectorListenerLink)[vs[1].(string)]
	}).(ConnectorListenerLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorListenerLinkInput)(nil)).Elem(), &ConnectorListenerLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorListenerLinkArrayInput)(nil)).Elem(), ConnectorListenerLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorListenerLinkMapInput)(nil)).Elem(), ConnectorListenerLinkMap{})
	pulumi.RegisterOutputType(ConnectorListenerLinkOutput{})
	pulumi.RegisterOutputType(ConnectorListenerLinkArrayOutput{})
	pulumi.RegisterOutputType(ConnectorListenerLinkMapOutput{})
}
