// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creating a TLS Configuration of a Resource in Formal.
type ResourceTlsConfiguration struct {
	pulumi.CustomResourceState

	// Resource ID for which the TLS configuration is applied to.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
	TlsCaTruststore pulumi.StringPtrOutput `pulumi:"tlsCaTruststore"`
	// Validation mode for the TLS configuration.
	TlsConfig pulumi.StringOutput `pulumi:"tlsConfig"`
	// Minimum TLS version to be used for connections.
	TlsMinVersion pulumi.StringPtrOutput `pulumi:"tlsMinVersion"`
}

// NewResourceTlsConfiguration registers a new resource with the given unique name, arguments, and options.
func NewResourceTlsConfiguration(ctx *pulumi.Context,
	name string, args *ResourceTlsConfigurationArgs, opts ...pulumi.ResourceOption) (*ResourceTlsConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.TlsConfig == nil {
		return nil, errors.New("invalid value for required argument 'TlsConfig'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceTlsConfiguration
	err := ctx.RegisterResource("formal:index/resourceTlsConfiguration:ResourceTlsConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceTlsConfiguration gets an existing ResourceTlsConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceTlsConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceTlsConfigurationState, opts ...pulumi.ResourceOption) (*ResourceTlsConfiguration, error) {
	var resource ResourceTlsConfiguration
	err := ctx.ReadResource("formal:index/resourceTlsConfiguration:ResourceTlsConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceTlsConfiguration resources.
type resourceTlsConfigurationState struct {
	// Resource ID for which the TLS configuration is applied to.
	ResourceId *string `pulumi:"resourceId"`
	// PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
	TlsCaTruststore *string `pulumi:"tlsCaTruststore"`
	// Validation mode for the TLS configuration.
	TlsConfig *string `pulumi:"tlsConfig"`
	// Minimum TLS version to be used for connections.
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
}

type ResourceTlsConfigurationState struct {
	// Resource ID for which the TLS configuration is applied to.
	ResourceId pulumi.StringPtrInput
	// PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
	TlsCaTruststore pulumi.StringPtrInput
	// Validation mode for the TLS configuration.
	TlsConfig pulumi.StringPtrInput
	// Minimum TLS version to be used for connections.
	TlsMinVersion pulumi.StringPtrInput
}

func (ResourceTlsConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceTlsConfigurationState)(nil)).Elem()
}

type resourceTlsConfigurationArgs struct {
	// Resource ID for which the TLS configuration is applied to.
	ResourceId string `pulumi:"resourceId"`
	// PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
	TlsCaTruststore *string `pulumi:"tlsCaTruststore"`
	// Validation mode for the TLS configuration.
	TlsConfig string `pulumi:"tlsConfig"`
	// Minimum TLS version to be used for connections.
	TlsMinVersion *string `pulumi:"tlsMinVersion"`
}

// The set of arguments for constructing a ResourceTlsConfiguration resource.
type ResourceTlsConfigurationArgs struct {
	// Resource ID for which the TLS configuration is applied to.
	ResourceId pulumi.StringInput
	// PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
	TlsCaTruststore pulumi.StringPtrInput
	// Validation mode for the TLS configuration.
	TlsConfig pulumi.StringInput
	// Minimum TLS version to be used for connections.
	TlsMinVersion pulumi.StringPtrInput
}

func (ResourceTlsConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceTlsConfigurationArgs)(nil)).Elem()
}

type ResourceTlsConfigurationInput interface {
	pulumi.Input

	ToResourceTlsConfigurationOutput() ResourceTlsConfigurationOutput
	ToResourceTlsConfigurationOutputWithContext(ctx context.Context) ResourceTlsConfigurationOutput
}

func (*ResourceTlsConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTlsConfiguration)(nil)).Elem()
}

func (i *ResourceTlsConfiguration) ToResourceTlsConfigurationOutput() ResourceTlsConfigurationOutput {
	return i.ToResourceTlsConfigurationOutputWithContext(context.Background())
}

func (i *ResourceTlsConfiguration) ToResourceTlsConfigurationOutputWithContext(ctx context.Context) ResourceTlsConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTlsConfigurationOutput)
}

// ResourceTlsConfigurationArrayInput is an input type that accepts ResourceTlsConfigurationArray and ResourceTlsConfigurationArrayOutput values.
// You can construct a concrete instance of `ResourceTlsConfigurationArrayInput` via:
//
//	ResourceTlsConfigurationArray{ ResourceTlsConfigurationArgs{...} }
type ResourceTlsConfigurationArrayInput interface {
	pulumi.Input

	ToResourceTlsConfigurationArrayOutput() ResourceTlsConfigurationArrayOutput
	ToResourceTlsConfigurationArrayOutputWithContext(context.Context) ResourceTlsConfigurationArrayOutput
}

type ResourceTlsConfigurationArray []ResourceTlsConfigurationInput

func (ResourceTlsConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceTlsConfiguration)(nil)).Elem()
}

func (i ResourceTlsConfigurationArray) ToResourceTlsConfigurationArrayOutput() ResourceTlsConfigurationArrayOutput {
	return i.ToResourceTlsConfigurationArrayOutputWithContext(context.Background())
}

func (i ResourceTlsConfigurationArray) ToResourceTlsConfigurationArrayOutputWithContext(ctx context.Context) ResourceTlsConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTlsConfigurationArrayOutput)
}

// ResourceTlsConfigurationMapInput is an input type that accepts ResourceTlsConfigurationMap and ResourceTlsConfigurationMapOutput values.
// You can construct a concrete instance of `ResourceTlsConfigurationMapInput` via:
//
//	ResourceTlsConfigurationMap{ "key": ResourceTlsConfigurationArgs{...} }
type ResourceTlsConfigurationMapInput interface {
	pulumi.Input

	ToResourceTlsConfigurationMapOutput() ResourceTlsConfigurationMapOutput
	ToResourceTlsConfigurationMapOutputWithContext(context.Context) ResourceTlsConfigurationMapOutput
}

type ResourceTlsConfigurationMap map[string]ResourceTlsConfigurationInput

func (ResourceTlsConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceTlsConfiguration)(nil)).Elem()
}

func (i ResourceTlsConfigurationMap) ToResourceTlsConfigurationMapOutput() ResourceTlsConfigurationMapOutput {
	return i.ToResourceTlsConfigurationMapOutputWithContext(context.Background())
}

func (i ResourceTlsConfigurationMap) ToResourceTlsConfigurationMapOutputWithContext(ctx context.Context) ResourceTlsConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceTlsConfigurationMapOutput)
}

type ResourceTlsConfigurationOutput struct{ *pulumi.OutputState }

func (ResourceTlsConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceTlsConfiguration)(nil)).Elem()
}

func (o ResourceTlsConfigurationOutput) ToResourceTlsConfigurationOutput() ResourceTlsConfigurationOutput {
	return o
}

func (o ResourceTlsConfigurationOutput) ToResourceTlsConfigurationOutputWithContext(ctx context.Context) ResourceTlsConfigurationOutput {
	return o
}

// Resource ID for which the TLS configuration is applied to.
func (o ResourceTlsConfigurationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceTlsConfiguration) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
func (o ResourceTlsConfigurationOutput) TlsCaTruststore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTlsConfiguration) pulumi.StringPtrOutput { return v.TlsCaTruststore }).(pulumi.StringPtrOutput)
}

// Validation mode for the TLS configuration.
func (o ResourceTlsConfigurationOutput) TlsConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceTlsConfiguration) pulumi.StringOutput { return v.TlsConfig }).(pulumi.StringOutput)
}

// Minimum TLS version to be used for connections.
func (o ResourceTlsConfigurationOutput) TlsMinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceTlsConfiguration) pulumi.StringPtrOutput { return v.TlsMinVersion }).(pulumi.StringPtrOutput)
}

type ResourceTlsConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ResourceTlsConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceTlsConfiguration)(nil)).Elem()
}

func (o ResourceTlsConfigurationArrayOutput) ToResourceTlsConfigurationArrayOutput() ResourceTlsConfigurationArrayOutput {
	return o
}

func (o ResourceTlsConfigurationArrayOutput) ToResourceTlsConfigurationArrayOutputWithContext(ctx context.Context) ResourceTlsConfigurationArrayOutput {
	return o
}

func (o ResourceTlsConfigurationArrayOutput) Index(i pulumi.IntInput) ResourceTlsConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceTlsConfiguration {
		return vs[0].([]*ResourceTlsConfiguration)[vs[1].(int)]
	}).(ResourceTlsConfigurationOutput)
}

type ResourceTlsConfigurationMapOutput struct{ *pulumi.OutputState }

func (ResourceTlsConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceTlsConfiguration)(nil)).Elem()
}

func (o ResourceTlsConfigurationMapOutput) ToResourceTlsConfigurationMapOutput() ResourceTlsConfigurationMapOutput {
	return o
}

func (o ResourceTlsConfigurationMapOutput) ToResourceTlsConfigurationMapOutputWithContext(ctx context.Context) ResourceTlsConfigurationMapOutput {
	return o
}

func (o ResourceTlsConfigurationMapOutput) MapIndex(k pulumi.StringInput) ResourceTlsConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceTlsConfiguration {
		return vs[0].(map[string]*ResourceTlsConfiguration)[vs[1].(string)]
	}).(ResourceTlsConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTlsConfigurationInput)(nil)).Elem(), &ResourceTlsConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTlsConfigurationArrayInput)(nil)).Elem(), ResourceTlsConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceTlsConfigurationMapInput)(nil)).Elem(), ResourceTlsConfigurationMap{})
	pulumi.RegisterOutputType(ResourceTlsConfigurationOutput{})
	pulumi.RegisterOutputType(ResourceTlsConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ResourceTlsConfigurationMapOutput{})
}
