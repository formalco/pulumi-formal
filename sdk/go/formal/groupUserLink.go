// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Linking a User to a Group in Formal.
type GroupUserLink struct {
	pulumi.CustomResourceState

	// The Formal ID for the group to be linked.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// If set to true, this Link cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// The Formal ID of the user to be linked.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewGroupUserLink registers a new resource with the given unique name, arguments, and options.
func NewGroupUserLink(ctx *pulumi.Context,
	name string, args *GroupUserLinkArgs, opts ...pulumi.ResourceOption) (*GroupUserLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupUserLink
	err := ctx.RegisterResource("formal:index/groupUserLink:GroupUserLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupUserLink gets an existing GroupUserLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupUserLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupUserLinkState, opts ...pulumi.ResourceOption) (*GroupUserLink, error) {
	var resource GroupUserLink
	err := ctx.ReadResource("formal:index/groupUserLink:GroupUserLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupUserLink resources.
type groupUserLinkState struct {
	// The Formal ID for the group to be linked.
	GroupId *string `pulumi:"groupId"`
	// If set to true, this Link cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// The Formal ID of the user to be linked.
	UserId *string `pulumi:"userId"`
}

type GroupUserLinkState struct {
	// The Formal ID for the group to be linked.
	GroupId pulumi.StringPtrInput
	// If set to true, this Link cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// The Formal ID of the user to be linked.
	UserId pulumi.StringPtrInput
}

func (GroupUserLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupUserLinkState)(nil)).Elem()
}

type groupUserLinkArgs struct {
	// The Formal ID for the group to be linked.
	GroupId string `pulumi:"groupId"`
	// If set to true, this Link cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// The Formal ID of the user to be linked.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a GroupUserLink resource.
type GroupUserLinkArgs struct {
	// The Formal ID for the group to be linked.
	GroupId pulumi.StringInput
	// If set to true, this Link cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// The Formal ID of the user to be linked.
	UserId pulumi.StringInput
}

func (GroupUserLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupUserLinkArgs)(nil)).Elem()
}

type GroupUserLinkInput interface {
	pulumi.Input

	ToGroupUserLinkOutput() GroupUserLinkOutput
	ToGroupUserLinkOutputWithContext(ctx context.Context) GroupUserLinkOutput
}

func (*GroupUserLink) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupUserLink)(nil)).Elem()
}

func (i *GroupUserLink) ToGroupUserLinkOutput() GroupUserLinkOutput {
	return i.ToGroupUserLinkOutputWithContext(context.Background())
}

func (i *GroupUserLink) ToGroupUserLinkOutputWithContext(ctx context.Context) GroupUserLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUserLinkOutput)
}

// GroupUserLinkArrayInput is an input type that accepts GroupUserLinkArray and GroupUserLinkArrayOutput values.
// You can construct a concrete instance of `GroupUserLinkArrayInput` via:
//
//	GroupUserLinkArray{ GroupUserLinkArgs{...} }
type GroupUserLinkArrayInput interface {
	pulumi.Input

	ToGroupUserLinkArrayOutput() GroupUserLinkArrayOutput
	ToGroupUserLinkArrayOutputWithContext(context.Context) GroupUserLinkArrayOutput
}

type GroupUserLinkArray []GroupUserLinkInput

func (GroupUserLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupUserLink)(nil)).Elem()
}

func (i GroupUserLinkArray) ToGroupUserLinkArrayOutput() GroupUserLinkArrayOutput {
	return i.ToGroupUserLinkArrayOutputWithContext(context.Background())
}

func (i GroupUserLinkArray) ToGroupUserLinkArrayOutputWithContext(ctx context.Context) GroupUserLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUserLinkArrayOutput)
}

// GroupUserLinkMapInput is an input type that accepts GroupUserLinkMap and GroupUserLinkMapOutput values.
// You can construct a concrete instance of `GroupUserLinkMapInput` via:
//
//	GroupUserLinkMap{ "key": GroupUserLinkArgs{...} }
type GroupUserLinkMapInput interface {
	pulumi.Input

	ToGroupUserLinkMapOutput() GroupUserLinkMapOutput
	ToGroupUserLinkMapOutputWithContext(context.Context) GroupUserLinkMapOutput
}

type GroupUserLinkMap map[string]GroupUserLinkInput

func (GroupUserLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupUserLink)(nil)).Elem()
}

func (i GroupUserLinkMap) ToGroupUserLinkMapOutput() GroupUserLinkMapOutput {
	return i.ToGroupUserLinkMapOutputWithContext(context.Background())
}

func (i GroupUserLinkMap) ToGroupUserLinkMapOutputWithContext(ctx context.Context) GroupUserLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUserLinkMapOutput)
}

type GroupUserLinkOutput struct{ *pulumi.OutputState }

func (GroupUserLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupUserLink)(nil)).Elem()
}

func (o GroupUserLinkOutput) ToGroupUserLinkOutput() GroupUserLinkOutput {
	return o
}

func (o GroupUserLinkOutput) ToGroupUserLinkOutputWithContext(ctx context.Context) GroupUserLinkOutput {
	return o
}

// The Formal ID for the group to be linked.
func (o GroupUserLinkOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupUserLink) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// If set to true, this Link cannot be deleted.
func (o GroupUserLinkOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GroupUserLink) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// The Formal ID of the user to be linked.
func (o GroupUserLinkOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupUserLink) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type GroupUserLinkArrayOutput struct{ *pulumi.OutputState }

func (GroupUserLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupUserLink)(nil)).Elem()
}

func (o GroupUserLinkArrayOutput) ToGroupUserLinkArrayOutput() GroupUserLinkArrayOutput {
	return o
}

func (o GroupUserLinkArrayOutput) ToGroupUserLinkArrayOutputWithContext(ctx context.Context) GroupUserLinkArrayOutput {
	return o
}

func (o GroupUserLinkArrayOutput) Index(i pulumi.IntInput) GroupUserLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupUserLink {
		return vs[0].([]*GroupUserLink)[vs[1].(int)]
	}).(GroupUserLinkOutput)
}

type GroupUserLinkMapOutput struct{ *pulumi.OutputState }

func (GroupUserLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupUserLink)(nil)).Elem()
}

func (o GroupUserLinkMapOutput) ToGroupUserLinkMapOutput() GroupUserLinkMapOutput {
	return o
}

func (o GroupUserLinkMapOutput) ToGroupUserLinkMapOutputWithContext(ctx context.Context) GroupUserLinkMapOutput {
	return o
}

func (o GroupUserLinkMapOutput) MapIndex(k pulumi.StringInput) GroupUserLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupUserLink {
		return vs[0].(map[string]*GroupUserLink)[vs[1].(string)]
	}).(GroupUserLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupUserLinkInput)(nil)).Elem(), &GroupUserLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupUserLinkArrayInput)(nil)).Elem(), GroupUserLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupUserLinkMapInput)(nil)).Elem(), GroupUserLinkMap{})
	pulumi.RegisterOutputType(GroupUserLinkOutput{})
	pulumi.RegisterOutputType(GroupUserLinkArrayOutput{})
	pulumi.RegisterOutputType(GroupUserLinkMapOutput{})
}
