// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a BI App.
type IntegrationBi struct {
	pulumi.CustomResourceState

	// Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
	Metabase IntegrationBiMetabasePtrOutput `pulumi:"metabase"`
	// Friendly name for the App.
	Name pulumi.StringOutput `pulumi:"name"`
	// Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
	Sync pulumi.BoolOutput `pulumi:"sync"`
}

// NewIntegrationBi registers a new resource with the given unique name, arguments, and options.
func NewIntegrationBi(ctx *pulumi.Context,
	name string, args *IntegrationBiArgs, opts ...pulumi.ResourceOption) (*IntegrationBi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sync == nil {
		return nil, errors.New("invalid value for required argument 'Sync'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationBi
	err := ctx.RegisterResource("formal:index/integrationBi:IntegrationBi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationBi gets an existing IntegrationBi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationBi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationBiState, opts ...pulumi.ResourceOption) (*IntegrationBi, error) {
	var resource IntegrationBi
	err := ctx.ReadResource("formal:index/integrationBi:IntegrationBi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationBi resources.
type integrationBiState struct {
	// Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
	Metabase *IntegrationBiMetabase `pulumi:"metabase"`
	// Friendly name for the App.
	Name *string `pulumi:"name"`
	// Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
	Sync *bool `pulumi:"sync"`
}

type IntegrationBiState struct {
	// Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
	Metabase IntegrationBiMetabasePtrInput
	// Friendly name for the App.
	Name pulumi.StringPtrInput
	// Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
	Sync pulumi.BoolPtrInput
}

func (IntegrationBiState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationBiState)(nil)).Elem()
}

type integrationBiArgs struct {
	// Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
	Metabase *IntegrationBiMetabase `pulumi:"metabase"`
	// Friendly name for the App.
	Name *string `pulumi:"name"`
	// Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
	Sync bool `pulumi:"sync"`
}

// The set of arguments for constructing a IntegrationBi resource.
type IntegrationBiArgs struct {
	// Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
	Metabase IntegrationBiMetabasePtrInput
	// Friendly name for the App.
	Name pulumi.StringPtrInput
	// Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
	Sync pulumi.BoolInput
}

func (IntegrationBiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationBiArgs)(nil)).Elem()
}

type IntegrationBiInput interface {
	pulumi.Input

	ToIntegrationBiOutput() IntegrationBiOutput
	ToIntegrationBiOutputWithContext(ctx context.Context) IntegrationBiOutput
}

func (*IntegrationBi) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationBi)(nil)).Elem()
}

func (i *IntegrationBi) ToIntegrationBiOutput() IntegrationBiOutput {
	return i.ToIntegrationBiOutputWithContext(context.Background())
}

func (i *IntegrationBi) ToIntegrationBiOutputWithContext(ctx context.Context) IntegrationBiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationBiOutput)
}

// IntegrationBiArrayInput is an input type that accepts IntegrationBiArray and IntegrationBiArrayOutput values.
// You can construct a concrete instance of `IntegrationBiArrayInput` via:
//
//	IntegrationBiArray{ IntegrationBiArgs{...} }
type IntegrationBiArrayInput interface {
	pulumi.Input

	ToIntegrationBiArrayOutput() IntegrationBiArrayOutput
	ToIntegrationBiArrayOutputWithContext(context.Context) IntegrationBiArrayOutput
}

type IntegrationBiArray []IntegrationBiInput

func (IntegrationBiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationBi)(nil)).Elem()
}

func (i IntegrationBiArray) ToIntegrationBiArrayOutput() IntegrationBiArrayOutput {
	return i.ToIntegrationBiArrayOutputWithContext(context.Background())
}

func (i IntegrationBiArray) ToIntegrationBiArrayOutputWithContext(ctx context.Context) IntegrationBiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationBiArrayOutput)
}

// IntegrationBiMapInput is an input type that accepts IntegrationBiMap and IntegrationBiMapOutput values.
// You can construct a concrete instance of `IntegrationBiMapInput` via:
//
//	IntegrationBiMap{ "key": IntegrationBiArgs{...} }
type IntegrationBiMapInput interface {
	pulumi.Input

	ToIntegrationBiMapOutput() IntegrationBiMapOutput
	ToIntegrationBiMapOutputWithContext(context.Context) IntegrationBiMapOutput
}

type IntegrationBiMap map[string]IntegrationBiInput

func (IntegrationBiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationBi)(nil)).Elem()
}

func (i IntegrationBiMap) ToIntegrationBiMapOutput() IntegrationBiMapOutput {
	return i.ToIntegrationBiMapOutputWithContext(context.Background())
}

func (i IntegrationBiMap) ToIntegrationBiMapOutputWithContext(ctx context.Context) IntegrationBiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationBiMapOutput)
}

type IntegrationBiOutput struct{ *pulumi.OutputState }

func (IntegrationBiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationBi)(nil)).Elem()
}

func (o IntegrationBiOutput) ToIntegrationBiOutput() IntegrationBiOutput {
	return o
}

func (o IntegrationBiOutput) ToIntegrationBiOutputWithContext(ctx context.Context) IntegrationBiOutput {
	return o
}

// Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
func (o IntegrationBiOutput) Metabase() IntegrationBiMetabasePtrOutput {
	return o.ApplyT(func(v *IntegrationBi) IntegrationBiMetabasePtrOutput { return v.Metabase }).(IntegrationBiMetabasePtrOutput)
}

// Friendly name for the App.
func (o IntegrationBiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationBi) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
func (o IntegrationBiOutput) Sync() pulumi.BoolOutput {
	return o.ApplyT(func(v *IntegrationBi) pulumi.BoolOutput { return v.Sync }).(pulumi.BoolOutput)
}

type IntegrationBiArrayOutput struct{ *pulumi.OutputState }

func (IntegrationBiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationBi)(nil)).Elem()
}

func (o IntegrationBiArrayOutput) ToIntegrationBiArrayOutput() IntegrationBiArrayOutput {
	return o
}

func (o IntegrationBiArrayOutput) ToIntegrationBiArrayOutputWithContext(ctx context.Context) IntegrationBiArrayOutput {
	return o
}

func (o IntegrationBiArrayOutput) Index(i pulumi.IntInput) IntegrationBiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationBi {
		return vs[0].([]*IntegrationBi)[vs[1].(int)]
	}).(IntegrationBiOutput)
}

type IntegrationBiMapOutput struct{ *pulumi.OutputState }

func (IntegrationBiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationBi)(nil)).Elem()
}

func (o IntegrationBiMapOutput) ToIntegrationBiMapOutput() IntegrationBiMapOutput {
	return o
}

func (o IntegrationBiMapOutput) ToIntegrationBiMapOutputWithContext(ctx context.Context) IntegrationBiMapOutput {
	return o
}

func (o IntegrationBiMapOutput) MapIndex(k pulumi.StringInput) IntegrationBiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationBi {
		return vs[0].(map[string]*IntegrationBi)[vs[1].(string)]
	}).(IntegrationBiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationBiInput)(nil)).Elem(), &IntegrationBi{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationBiArrayInput)(nil)).Elem(), IntegrationBiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationBiMapInput)(nil)).Elem(), IntegrationBiMap{})
	pulumi.RegisterOutputType(IntegrationBiOutput{})
	pulumi.RegisterOutputType(IntegrationBiArrayOutput{})
	pulumi.RegisterOutputType(IntegrationBiMapOutput{})
}
