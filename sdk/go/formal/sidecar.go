// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Sidecar with Formal.
type Sidecar struct {
	pulumi.CustomResourceState

	// Api key for the deployed Sidecar.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// Creation time of the sidecar.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// If deploymentType is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
	FormalControlPlaneTlsCertificate pulumi.StringOutput `pulumi:"formalControlPlaneTlsCertificate"`
	// The hostname of the created sidecar.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Friendly name for this Sidecar.
	Name pulumi.StringOutput `pulumi:"name"`
	// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
	Technology pulumi.StringOutput `pulumi:"technology"`
	// If set to true, this Sidecar cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Version of the Sidecar to deploy for `managed`.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewSidecar registers a new resource with the given unique name, arguments, and options.
func NewSidecar(ctx *pulumi.Context,
	name string, args *SidecarArgs, opts ...pulumi.ResourceOption) (*Sidecar, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Technology == nil {
		return nil, errors.New("invalid value for required argument 'Technology'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"formalControlPlaneTlsCertificate",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Sidecar
	err := ctx.RegisterResource("formal:index/sidecar:Sidecar", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSidecar gets an existing Sidecar resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSidecar(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SidecarState, opts ...pulumi.ResourceOption) (*Sidecar, error) {
	var resource Sidecar
	err := ctx.ReadResource("formal:index/sidecar:Sidecar", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Sidecar resources.
type sidecarState struct {
	// Api key for the deployed Sidecar.
	ApiKey *string `pulumi:"apiKey"`
	// Creation time of the sidecar.
	CreatedAt *int `pulumi:"createdAt"`
	// If deploymentType is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
	FormalControlPlaneTlsCertificate *string `pulumi:"formalControlPlaneTlsCertificate"`
	// The hostname of the created sidecar.
	Hostname *string `pulumi:"hostname"`
	// Friendly name for this Sidecar.
	Name *string `pulumi:"name"`
	// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
	Technology *string `pulumi:"technology"`
	// If set to true, this Sidecar cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Version of the Sidecar to deploy for `managed`.
	Version *string `pulumi:"version"`
}

type SidecarState struct {
	// Api key for the deployed Sidecar.
	ApiKey pulumi.StringPtrInput
	// Creation time of the sidecar.
	CreatedAt pulumi.IntPtrInput
	// If deploymentType is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
	FormalControlPlaneTlsCertificate pulumi.StringPtrInput
	// The hostname of the created sidecar.
	Hostname pulumi.StringPtrInput
	// Friendly name for this Sidecar.
	Name pulumi.StringPtrInput
	// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
	Technology pulumi.StringPtrInput
	// If set to true, this Sidecar cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Version of the Sidecar to deploy for `managed`.
	Version pulumi.StringPtrInput
}

func (SidecarState) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarState)(nil)).Elem()
}

type sidecarArgs struct {
	// The hostname of the created sidecar.
	Hostname string `pulumi:"hostname"`
	// Friendly name for this Sidecar.
	Name *string `pulumi:"name"`
	// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
	Technology string `pulumi:"technology"`
	// If set to true, this Sidecar cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Version of the Sidecar to deploy for `managed`.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a Sidecar resource.
type SidecarArgs struct {
	// The hostname of the created sidecar.
	Hostname pulumi.StringInput
	// Friendly name for this Sidecar.
	Name pulumi.StringPtrInput
	// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
	Technology pulumi.StringInput
	// If set to true, this Sidecar cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Version of the Sidecar to deploy for `managed`.
	Version pulumi.StringPtrInput
}

func (SidecarArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarArgs)(nil)).Elem()
}

type SidecarInput interface {
	pulumi.Input

	ToSidecarOutput() SidecarOutput
	ToSidecarOutputWithContext(ctx context.Context) SidecarOutput
}

func (*Sidecar) ElementType() reflect.Type {
	return reflect.TypeOf((**Sidecar)(nil)).Elem()
}

func (i *Sidecar) ToSidecarOutput() SidecarOutput {
	return i.ToSidecarOutputWithContext(context.Background())
}

func (i *Sidecar) ToSidecarOutputWithContext(ctx context.Context) SidecarOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarOutput)
}

// SidecarArrayInput is an input type that accepts SidecarArray and SidecarArrayOutput values.
// You can construct a concrete instance of `SidecarArrayInput` via:
//
//	SidecarArray{ SidecarArgs{...} }
type SidecarArrayInput interface {
	pulumi.Input

	ToSidecarArrayOutput() SidecarArrayOutput
	ToSidecarArrayOutputWithContext(context.Context) SidecarArrayOutput
}

type SidecarArray []SidecarInput

func (SidecarArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sidecar)(nil)).Elem()
}

func (i SidecarArray) ToSidecarArrayOutput() SidecarArrayOutput {
	return i.ToSidecarArrayOutputWithContext(context.Background())
}

func (i SidecarArray) ToSidecarArrayOutputWithContext(ctx context.Context) SidecarArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarArrayOutput)
}

// SidecarMapInput is an input type that accepts SidecarMap and SidecarMapOutput values.
// You can construct a concrete instance of `SidecarMapInput` via:
//
//	SidecarMap{ "key": SidecarArgs{...} }
type SidecarMapInput interface {
	pulumi.Input

	ToSidecarMapOutput() SidecarMapOutput
	ToSidecarMapOutputWithContext(context.Context) SidecarMapOutput
}

type SidecarMap map[string]SidecarInput

func (SidecarMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sidecar)(nil)).Elem()
}

func (i SidecarMap) ToSidecarMapOutput() SidecarMapOutput {
	return i.ToSidecarMapOutputWithContext(context.Background())
}

func (i SidecarMap) ToSidecarMapOutputWithContext(ctx context.Context) SidecarMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarMapOutput)
}

type SidecarOutput struct{ *pulumi.OutputState }

func (SidecarOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Sidecar)(nil)).Elem()
}

func (o SidecarOutput) ToSidecarOutput() SidecarOutput {
	return o
}

func (o SidecarOutput) ToSidecarOutputWithContext(ctx context.Context) SidecarOutput {
	return o
}

// Api key for the deployed Sidecar.
func (o SidecarOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// Creation time of the sidecar.
func (o SidecarOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// If deploymentType is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
func (o SidecarOutput) FormalControlPlaneTlsCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringOutput { return v.FormalControlPlaneTlsCertificate }).(pulumi.StringOutput)
}

// The hostname of the created sidecar.
func (o SidecarOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Friendly name for this Sidecar.
func (o SidecarOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
func (o SidecarOutput) Technology() pulumi.StringOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringOutput { return v.Technology }).(pulumi.StringOutput)
}

// If set to true, this Sidecar cannot be deleted.
func (o SidecarOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// Version of the Sidecar to deploy for `managed`.
func (o SidecarOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Sidecar) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type SidecarArrayOutput struct{ *pulumi.OutputState }

func (SidecarArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Sidecar)(nil)).Elem()
}

func (o SidecarArrayOutput) ToSidecarArrayOutput() SidecarArrayOutput {
	return o
}

func (o SidecarArrayOutput) ToSidecarArrayOutputWithContext(ctx context.Context) SidecarArrayOutput {
	return o
}

func (o SidecarArrayOutput) Index(i pulumi.IntInput) SidecarOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Sidecar {
		return vs[0].([]*Sidecar)[vs[1].(int)]
	}).(SidecarOutput)
}

type SidecarMapOutput struct{ *pulumi.OutputState }

func (SidecarMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Sidecar)(nil)).Elem()
}

func (o SidecarMapOutput) ToSidecarMapOutput() SidecarMapOutput {
	return o
}

func (o SidecarMapOutput) ToSidecarMapOutputWithContext(ctx context.Context) SidecarMapOutput {
	return o
}

func (o SidecarMapOutput) MapIndex(k pulumi.StringInput) SidecarOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Sidecar {
		return vs[0].(map[string]*Sidecar)[vs[1].(string)]
	}).(SidecarOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarInput)(nil)).Elem(), &Sidecar{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarArrayInput)(nil)).Elem(), SidecarArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarMapInput)(nil)).Elem(), SidecarMap{})
	pulumi.RegisterOutputType(SidecarOutput{})
	pulumi.RegisterOutputType(SidecarArrayOutput{})
	pulumi.RegisterOutputType(SidecarMapOutput{})
}
