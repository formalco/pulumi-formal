// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Satellite
type Satellite struct {
	pulumi.CustomResourceState

	// Api key of the Satellite.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// Friendly name for the Satellite.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Space to create the Satellite in.
	SpaceId pulumi.StringPtrOutput `pulumi:"spaceId"`
	// If set to true, this Satellite cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// TLS certificate of the Satellite.
	TlsCert pulumi.StringOutput `pulumi:"tlsCert"`
}

// NewSatellite registers a new resource with the given unique name, arguments, and options.
func NewSatellite(ctx *pulumi.Context,
	name string, args *SatelliteArgs, opts ...pulumi.ResourceOption) (*Satellite, error) {
	if args == nil {
		args = &SatelliteArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Satellite
	err := ctx.RegisterResource("formal:index/satellite:Satellite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSatellite gets an existing Satellite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSatellite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SatelliteState, opts ...pulumi.ResourceOption) (*Satellite, error) {
	var resource Satellite
	err := ctx.ReadResource("formal:index/satellite:Satellite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Satellite resources.
type satelliteState struct {
	// Api key of the Satellite.
	ApiKey *string `pulumi:"apiKey"`
	// Friendly name for the Satellite.
	Name *string `pulumi:"name"`
	// The ID of the Space to create the Satellite in.
	SpaceId *string `pulumi:"spaceId"`
	// If set to true, this Satellite cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// TLS certificate of the Satellite.
	TlsCert *string `pulumi:"tlsCert"`
}

type SatelliteState struct {
	// Api key of the Satellite.
	ApiKey pulumi.StringPtrInput
	// Friendly name for the Satellite.
	Name pulumi.StringPtrInput
	// The ID of the Space to create the Satellite in.
	SpaceId pulumi.StringPtrInput
	// If set to true, this Satellite cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// TLS certificate of the Satellite.
	TlsCert pulumi.StringPtrInput
}

func (SatelliteState) ElementType() reflect.Type {
	return reflect.TypeOf((*satelliteState)(nil)).Elem()
}

type satelliteArgs struct {
	// Friendly name for the Satellite.
	Name *string `pulumi:"name"`
	// The ID of the Space to create the Satellite in.
	SpaceId *string `pulumi:"spaceId"`
	// If set to true, this Satellite cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Satellite resource.
type SatelliteArgs struct {
	// Friendly name for the Satellite.
	Name pulumi.StringPtrInput
	// The ID of the Space to create the Satellite in.
	SpaceId pulumi.StringPtrInput
	// If set to true, this Satellite cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (SatelliteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*satelliteArgs)(nil)).Elem()
}

type SatelliteInput interface {
	pulumi.Input

	ToSatelliteOutput() SatelliteOutput
	ToSatelliteOutputWithContext(ctx context.Context) SatelliteOutput
}

func (*Satellite) ElementType() reflect.Type {
	return reflect.TypeOf((**Satellite)(nil)).Elem()
}

func (i *Satellite) ToSatelliteOutput() SatelliteOutput {
	return i.ToSatelliteOutputWithContext(context.Background())
}

func (i *Satellite) ToSatelliteOutputWithContext(ctx context.Context) SatelliteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SatelliteOutput)
}

// SatelliteArrayInput is an input type that accepts SatelliteArray and SatelliteArrayOutput values.
// You can construct a concrete instance of `SatelliteArrayInput` via:
//
//	SatelliteArray{ SatelliteArgs{...} }
type SatelliteArrayInput interface {
	pulumi.Input

	ToSatelliteArrayOutput() SatelliteArrayOutput
	ToSatelliteArrayOutputWithContext(context.Context) SatelliteArrayOutput
}

type SatelliteArray []SatelliteInput

func (SatelliteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Satellite)(nil)).Elem()
}

func (i SatelliteArray) ToSatelliteArrayOutput() SatelliteArrayOutput {
	return i.ToSatelliteArrayOutputWithContext(context.Background())
}

func (i SatelliteArray) ToSatelliteArrayOutputWithContext(ctx context.Context) SatelliteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SatelliteArrayOutput)
}

// SatelliteMapInput is an input type that accepts SatelliteMap and SatelliteMapOutput values.
// You can construct a concrete instance of `SatelliteMapInput` via:
//
//	SatelliteMap{ "key": SatelliteArgs{...} }
type SatelliteMapInput interface {
	pulumi.Input

	ToSatelliteMapOutput() SatelliteMapOutput
	ToSatelliteMapOutputWithContext(context.Context) SatelliteMapOutput
}

type SatelliteMap map[string]SatelliteInput

func (SatelliteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Satellite)(nil)).Elem()
}

func (i SatelliteMap) ToSatelliteMapOutput() SatelliteMapOutput {
	return i.ToSatelliteMapOutputWithContext(context.Background())
}

func (i SatelliteMap) ToSatelliteMapOutputWithContext(ctx context.Context) SatelliteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SatelliteMapOutput)
}

type SatelliteOutput struct{ *pulumi.OutputState }

func (SatelliteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Satellite)(nil)).Elem()
}

func (o SatelliteOutput) ToSatelliteOutput() SatelliteOutput {
	return o
}

func (o SatelliteOutput) ToSatelliteOutputWithContext(ctx context.Context) SatelliteOutput {
	return o
}

// Api key of the Satellite.
func (o SatelliteOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Satellite) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// Friendly name for the Satellite.
func (o SatelliteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Satellite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Space to create the Satellite in.
func (o SatelliteOutput) SpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Satellite) pulumi.StringPtrOutput { return v.SpaceId }).(pulumi.StringPtrOutput)
}

// If set to true, this Satellite cannot be deleted.
func (o SatelliteOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Satellite) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// TLS certificate of the Satellite.
func (o SatelliteOutput) TlsCert() pulumi.StringOutput {
	return o.ApplyT(func(v *Satellite) pulumi.StringOutput { return v.TlsCert }).(pulumi.StringOutput)
}

type SatelliteArrayOutput struct{ *pulumi.OutputState }

func (SatelliteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Satellite)(nil)).Elem()
}

func (o SatelliteArrayOutput) ToSatelliteArrayOutput() SatelliteArrayOutput {
	return o
}

func (o SatelliteArrayOutput) ToSatelliteArrayOutputWithContext(ctx context.Context) SatelliteArrayOutput {
	return o
}

func (o SatelliteArrayOutput) Index(i pulumi.IntInput) SatelliteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Satellite {
		return vs[0].([]*Satellite)[vs[1].(int)]
	}).(SatelliteOutput)
}

type SatelliteMapOutput struct{ *pulumi.OutputState }

func (SatelliteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Satellite)(nil)).Elem()
}

func (o SatelliteMapOutput) ToSatelliteMapOutput() SatelliteMapOutput {
	return o
}

func (o SatelliteMapOutput) ToSatelliteMapOutputWithContext(ctx context.Context) SatelliteMapOutput {
	return o
}

func (o SatelliteMapOutput) MapIndex(k pulumi.StringInput) SatelliteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Satellite {
		return vs[0].(map[string]*Satellite)[vs[1].(string)]
	}).(SatelliteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SatelliteInput)(nil)).Elem(), &Satellite{})
	pulumi.RegisterInputType(reflect.TypeOf((*SatelliteArrayInput)(nil)).Elem(), SatelliteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SatelliteMapInput)(nil)).Elem(), SatelliteMap{})
	pulumi.RegisterOutputType(SatelliteOutput{})
	pulumi.RegisterOutputType(SatelliteArrayOutput{})
	pulumi.RegisterOutputType(SatelliteMapOutput{})
}
