// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Integration MDM app.
type IntegrationMdm struct {
	pulumi.CustomResourceState

	// Configuration block for Kandji integration.
	Kandji IntegrationMdmKandjiPtrOutput `pulumi:"kandji"`
	// Friendly name for the Integration app.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIntegrationMdm registers a new resource with the given unique name, arguments, and options.
func NewIntegrationMdm(ctx *pulumi.Context,
	name string, args *IntegrationMdmArgs, opts ...pulumi.ResourceOption) (*IntegrationMdm, error) {
	if args == nil {
		args = &IntegrationMdmArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationMdm
	err := ctx.RegisterResource("formal:index/integrationMdm:IntegrationMdm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationMdm gets an existing IntegrationMdm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationMdm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationMdmState, opts ...pulumi.ResourceOption) (*IntegrationMdm, error) {
	var resource IntegrationMdm
	err := ctx.ReadResource("formal:index/integrationMdm:IntegrationMdm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationMdm resources.
type integrationMdmState struct {
	// Configuration block for Kandji integration.
	Kandji *IntegrationMdmKandji `pulumi:"kandji"`
	// Friendly name for the Integration app.
	Name *string `pulumi:"name"`
}

type IntegrationMdmState struct {
	// Configuration block for Kandji integration.
	Kandji IntegrationMdmKandjiPtrInput
	// Friendly name for the Integration app.
	Name pulumi.StringPtrInput
}

func (IntegrationMdmState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationMdmState)(nil)).Elem()
}

type integrationMdmArgs struct {
	// Configuration block for Kandji integration.
	Kandji *IntegrationMdmKandji `pulumi:"kandji"`
	// Friendly name for the Integration app.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IntegrationMdm resource.
type IntegrationMdmArgs struct {
	// Configuration block for Kandji integration.
	Kandji IntegrationMdmKandjiPtrInput
	// Friendly name for the Integration app.
	Name pulumi.StringPtrInput
}

func (IntegrationMdmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationMdmArgs)(nil)).Elem()
}

type IntegrationMdmInput interface {
	pulumi.Input

	ToIntegrationMdmOutput() IntegrationMdmOutput
	ToIntegrationMdmOutputWithContext(ctx context.Context) IntegrationMdmOutput
}

func (*IntegrationMdm) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationMdm)(nil)).Elem()
}

func (i *IntegrationMdm) ToIntegrationMdmOutput() IntegrationMdmOutput {
	return i.ToIntegrationMdmOutputWithContext(context.Background())
}

func (i *IntegrationMdm) ToIntegrationMdmOutputWithContext(ctx context.Context) IntegrationMdmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMdmOutput)
}

// IntegrationMdmArrayInput is an input type that accepts IntegrationMdmArray and IntegrationMdmArrayOutput values.
// You can construct a concrete instance of `IntegrationMdmArrayInput` via:
//
//	IntegrationMdmArray{ IntegrationMdmArgs{...} }
type IntegrationMdmArrayInput interface {
	pulumi.Input

	ToIntegrationMdmArrayOutput() IntegrationMdmArrayOutput
	ToIntegrationMdmArrayOutputWithContext(context.Context) IntegrationMdmArrayOutput
}

type IntegrationMdmArray []IntegrationMdmInput

func (IntegrationMdmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationMdm)(nil)).Elem()
}

func (i IntegrationMdmArray) ToIntegrationMdmArrayOutput() IntegrationMdmArrayOutput {
	return i.ToIntegrationMdmArrayOutputWithContext(context.Background())
}

func (i IntegrationMdmArray) ToIntegrationMdmArrayOutputWithContext(ctx context.Context) IntegrationMdmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMdmArrayOutput)
}

// IntegrationMdmMapInput is an input type that accepts IntegrationMdmMap and IntegrationMdmMapOutput values.
// You can construct a concrete instance of `IntegrationMdmMapInput` via:
//
//	IntegrationMdmMap{ "key": IntegrationMdmArgs{...} }
type IntegrationMdmMapInput interface {
	pulumi.Input

	ToIntegrationMdmMapOutput() IntegrationMdmMapOutput
	ToIntegrationMdmMapOutputWithContext(context.Context) IntegrationMdmMapOutput
}

type IntegrationMdmMap map[string]IntegrationMdmInput

func (IntegrationMdmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationMdm)(nil)).Elem()
}

func (i IntegrationMdmMap) ToIntegrationMdmMapOutput() IntegrationMdmMapOutput {
	return i.ToIntegrationMdmMapOutputWithContext(context.Background())
}

func (i IntegrationMdmMap) ToIntegrationMdmMapOutputWithContext(ctx context.Context) IntegrationMdmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMdmMapOutput)
}

type IntegrationMdmOutput struct{ *pulumi.OutputState }

func (IntegrationMdmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationMdm)(nil)).Elem()
}

func (o IntegrationMdmOutput) ToIntegrationMdmOutput() IntegrationMdmOutput {
	return o
}

func (o IntegrationMdmOutput) ToIntegrationMdmOutputWithContext(ctx context.Context) IntegrationMdmOutput {
	return o
}

// Configuration block for Kandji integration.
func (o IntegrationMdmOutput) Kandji() IntegrationMdmKandjiPtrOutput {
	return o.ApplyT(func(v *IntegrationMdm) IntegrationMdmKandjiPtrOutput { return v.Kandji }).(IntegrationMdmKandjiPtrOutput)
}

// Friendly name for the Integration app.
func (o IntegrationMdmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationMdm) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IntegrationMdmArrayOutput struct{ *pulumi.OutputState }

func (IntegrationMdmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationMdm)(nil)).Elem()
}

func (o IntegrationMdmArrayOutput) ToIntegrationMdmArrayOutput() IntegrationMdmArrayOutput {
	return o
}

func (o IntegrationMdmArrayOutput) ToIntegrationMdmArrayOutputWithContext(ctx context.Context) IntegrationMdmArrayOutput {
	return o
}

func (o IntegrationMdmArrayOutput) Index(i pulumi.IntInput) IntegrationMdmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationMdm {
		return vs[0].([]*IntegrationMdm)[vs[1].(int)]
	}).(IntegrationMdmOutput)
}

type IntegrationMdmMapOutput struct{ *pulumi.OutputState }

func (IntegrationMdmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationMdm)(nil)).Elem()
}

func (o IntegrationMdmMapOutput) ToIntegrationMdmMapOutput() IntegrationMdmMapOutput {
	return o
}

func (o IntegrationMdmMapOutput) ToIntegrationMdmMapOutputWithContext(ctx context.Context) IntegrationMdmMapOutput {
	return o
}

func (o IntegrationMdmMapOutput) MapIndex(k pulumi.StringInput) IntegrationMdmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationMdm {
		return vs[0].(map[string]*IntegrationMdm)[vs[1].(string)]
	}).(IntegrationMdmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMdmInput)(nil)).Elem(), &IntegrationMdm{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMdmArrayInput)(nil)).Elem(), IntegrationMdmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMdmMapInput)(nil)).Elem(), IntegrationMdmMap{})
	pulumi.RegisterOutputType(IntegrationMdmOutput{})
	pulumi.RegisterOutputType(IntegrationMdmArrayOutput{})
	pulumi.RegisterOutputType(IntegrationMdmMapOutput{})
}
