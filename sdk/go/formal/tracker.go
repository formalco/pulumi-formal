// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creating a Tracker in Formal.
type Tracker struct {
	pulumi.CustomResourceState

	// If set to true, this Tracker allow clear text value.
	AllowClearTextValue pulumi.BoolPtrOutput `pulumi:"allowClearTextValue"`
	// When the policy was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Path associated with this tracker.
	Path pulumi.StringOutput `pulumi:"path"`
	// Tracker linked to the following resource id.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// If set to true, this Tracker cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Last update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTracker registers a new resource with the given unique name, arguments, and options.
func NewTracker(ctx *pulumi.Context,
	name string, args *TrackerArgs, opts ...pulumi.ResourceOption) (*Tracker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tracker
	err := ctx.RegisterResource("formal:index/tracker:Tracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTracker gets an existing Tracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrackerState, opts ...pulumi.ResourceOption) (*Tracker, error) {
	var resource Tracker
	err := ctx.ReadResource("formal:index/tracker:Tracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tracker resources.
type trackerState struct {
	// If set to true, this Tracker allow clear text value.
	AllowClearTextValue *bool `pulumi:"allowClearTextValue"`
	// When the policy was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Path associated with this tracker.
	Path *string `pulumi:"path"`
	// Tracker linked to the following resource id.
	ResourceId *string `pulumi:"resourceId"`
	// If set to true, this Tracker cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Last update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TrackerState struct {
	// If set to true, this Tracker allow clear text value.
	AllowClearTextValue pulumi.BoolPtrInput
	// When the policy was created.
	CreatedAt pulumi.StringPtrInput
	// Path associated with this tracker.
	Path pulumi.StringPtrInput
	// Tracker linked to the following resource id.
	ResourceId pulumi.StringPtrInput
	// If set to true, this Tracker cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Last update time.
	UpdatedAt pulumi.StringPtrInput
}

func (TrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerState)(nil)).Elem()
}

type trackerArgs struct {
	// If set to true, this Tracker allow clear text value.
	AllowClearTextValue *bool `pulumi:"allowClearTextValue"`
	// Path associated with this tracker.
	Path string `pulumi:"path"`
	// Tracker linked to the following resource id.
	ResourceId string `pulumi:"resourceId"`
	// If set to true, this Tracker cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Tracker resource.
type TrackerArgs struct {
	// If set to true, this Tracker allow clear text value.
	AllowClearTextValue pulumi.BoolPtrInput
	// Path associated with this tracker.
	Path pulumi.StringInput
	// Tracker linked to the following resource id.
	ResourceId pulumi.StringInput
	// If set to true, this Tracker cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (TrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerArgs)(nil)).Elem()
}

type TrackerInput interface {
	pulumi.Input

	ToTrackerOutput() TrackerOutput
	ToTrackerOutputWithContext(ctx context.Context) TrackerOutput
}

func (*Tracker) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (i *Tracker) ToTrackerOutput() TrackerOutput {
	return i.ToTrackerOutputWithContext(context.Background())
}

func (i *Tracker) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerOutput)
}

// TrackerArrayInput is an input type that accepts TrackerArray and TrackerArrayOutput values.
// You can construct a concrete instance of `TrackerArrayInput` via:
//
//	TrackerArray{ TrackerArgs{...} }
type TrackerArrayInput interface {
	pulumi.Input

	ToTrackerArrayOutput() TrackerArrayOutput
	ToTrackerArrayOutputWithContext(context.Context) TrackerArrayOutput
}

type TrackerArray []TrackerInput

func (TrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (i TrackerArray) ToTrackerArrayOutput() TrackerArrayOutput {
	return i.ToTrackerArrayOutputWithContext(context.Background())
}

func (i TrackerArray) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerArrayOutput)
}

// TrackerMapInput is an input type that accepts TrackerMap and TrackerMapOutput values.
// You can construct a concrete instance of `TrackerMapInput` via:
//
//	TrackerMap{ "key": TrackerArgs{...} }
type TrackerMapInput interface {
	pulumi.Input

	ToTrackerMapOutput() TrackerMapOutput
	ToTrackerMapOutputWithContext(context.Context) TrackerMapOutput
}

type TrackerMap map[string]TrackerInput

func (TrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (i TrackerMap) ToTrackerMapOutput() TrackerMapOutput {
	return i.ToTrackerMapOutputWithContext(context.Background())
}

func (i TrackerMap) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerMapOutput)
}

type TrackerOutput struct{ *pulumi.OutputState }

func (TrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (o TrackerOutput) ToTrackerOutput() TrackerOutput {
	return o
}

func (o TrackerOutput) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return o
}

// If set to true, this Tracker allow clear text value.
func (o TrackerOutput) AllowClearTextValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.AllowClearTextValue }).(pulumi.BoolPtrOutput)
}

// When the policy was created.
func (o TrackerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Path associated with this tracker.
func (o TrackerOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Tracker linked to the following resource id.
func (o TrackerOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// If set to true, this Tracker cannot be deleted.
func (o TrackerOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// Last update time.
func (o TrackerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TrackerArrayOutput struct{ *pulumi.OutputState }

func (TrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (o TrackerArrayOutput) ToTrackerArrayOutput() TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) Index(i pulumi.IntInput) TrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].([]*Tracker)[vs[1].(int)]
	}).(TrackerOutput)
}

type TrackerMapOutput struct{ *pulumi.OutputState }

func (TrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (o TrackerMapOutput) ToTrackerMapOutput() TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) MapIndex(k pulumi.StringInput) TrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].(map[string]*Tracker)[vs[1].(string)]
	}).(TrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerInput)(nil)).Elem(), &Tracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerArrayInput)(nil)).Elem(), TrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerMapInput)(nil)).Elem(), TrackerMap{})
	pulumi.RegisterOutputType(TrackerOutput{})
	pulumi.RegisterOutputType(TrackerArrayOutput{})
	pulumi.RegisterOutputType(TrackerMapOutput{})
}
