// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Connector Listener with Formal.
type ConnectorListener struct {
	pulumi.CustomResourceState

	// The name of the connector listener.
	Name pulumi.StringOutput `pulumi:"name"`
	// The listening port for this connector listener.
	Port pulumi.IntOutput `pulumi:"port"`
	// If set to true, this connector listener cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewConnectorListener registers a new resource with the given unique name, arguments, and options.
func NewConnectorListener(ctx *pulumi.Context,
	name string, args *ConnectorListenerArgs, opts ...pulumi.ResourceOption) (*ConnectorListener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorListener
	err := ctx.RegisterResource("formal:index/connectorListener:ConnectorListener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorListener gets an existing ConnectorListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorListenerState, opts ...pulumi.ResourceOption) (*ConnectorListener, error) {
	var resource ConnectorListener
	err := ctx.ReadResource("formal:index/connectorListener:ConnectorListener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorListener resources.
type connectorListenerState struct {
	// The name of the connector listener.
	Name *string `pulumi:"name"`
	// The listening port for this connector listener.
	Port *int `pulumi:"port"`
	// If set to true, this connector listener cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type ConnectorListenerState struct {
	// The name of the connector listener.
	Name pulumi.StringPtrInput
	// The listening port for this connector listener.
	Port pulumi.IntPtrInput
	// If set to true, this connector listener cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ConnectorListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorListenerState)(nil)).Elem()
}

type connectorListenerArgs struct {
	// The name of the connector listener.
	Name *string `pulumi:"name"`
	// The listening port for this connector listener.
	Port int `pulumi:"port"`
	// If set to true, this connector listener cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a ConnectorListener resource.
type ConnectorListenerArgs struct {
	// The name of the connector listener.
	Name pulumi.StringPtrInput
	// The listening port for this connector listener.
	Port pulumi.IntInput
	// If set to true, this connector listener cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ConnectorListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorListenerArgs)(nil)).Elem()
}

type ConnectorListenerInput interface {
	pulumi.Input

	ToConnectorListenerOutput() ConnectorListenerOutput
	ToConnectorListenerOutputWithContext(ctx context.Context) ConnectorListenerOutput
}

func (*ConnectorListener) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorListener)(nil)).Elem()
}

func (i *ConnectorListener) ToConnectorListenerOutput() ConnectorListenerOutput {
	return i.ToConnectorListenerOutputWithContext(context.Background())
}

func (i *ConnectorListener) ToConnectorListenerOutputWithContext(ctx context.Context) ConnectorListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorListenerOutput)
}

// ConnectorListenerArrayInput is an input type that accepts ConnectorListenerArray and ConnectorListenerArrayOutput values.
// You can construct a concrete instance of `ConnectorListenerArrayInput` via:
//
//	ConnectorListenerArray{ ConnectorListenerArgs{...} }
type ConnectorListenerArrayInput interface {
	pulumi.Input

	ToConnectorListenerArrayOutput() ConnectorListenerArrayOutput
	ToConnectorListenerArrayOutputWithContext(context.Context) ConnectorListenerArrayOutput
}

type ConnectorListenerArray []ConnectorListenerInput

func (ConnectorListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorListener)(nil)).Elem()
}

func (i ConnectorListenerArray) ToConnectorListenerArrayOutput() ConnectorListenerArrayOutput {
	return i.ToConnectorListenerArrayOutputWithContext(context.Background())
}

func (i ConnectorListenerArray) ToConnectorListenerArrayOutputWithContext(ctx context.Context) ConnectorListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorListenerArrayOutput)
}

// ConnectorListenerMapInput is an input type that accepts ConnectorListenerMap and ConnectorListenerMapOutput values.
// You can construct a concrete instance of `ConnectorListenerMapInput` via:
//
//	ConnectorListenerMap{ "key": ConnectorListenerArgs{...} }
type ConnectorListenerMapInput interface {
	pulumi.Input

	ToConnectorListenerMapOutput() ConnectorListenerMapOutput
	ToConnectorListenerMapOutputWithContext(context.Context) ConnectorListenerMapOutput
}

type ConnectorListenerMap map[string]ConnectorListenerInput

func (ConnectorListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorListener)(nil)).Elem()
}

func (i ConnectorListenerMap) ToConnectorListenerMapOutput() ConnectorListenerMapOutput {
	return i.ToConnectorListenerMapOutputWithContext(context.Background())
}

func (i ConnectorListenerMap) ToConnectorListenerMapOutputWithContext(ctx context.Context) ConnectorListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorListenerMapOutput)
}

type ConnectorListenerOutput struct{ *pulumi.OutputState }

func (ConnectorListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorListener)(nil)).Elem()
}

func (o ConnectorListenerOutput) ToConnectorListenerOutput() ConnectorListenerOutput {
	return o
}

func (o ConnectorListenerOutput) ToConnectorListenerOutputWithContext(ctx context.Context) ConnectorListenerOutput {
	return o
}

// The name of the connector listener.
func (o ConnectorListenerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorListener) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The listening port for this connector listener.
func (o ConnectorListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectorListener) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// If set to true, this connector listener cannot be deleted.
func (o ConnectorListenerOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorListener) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type ConnectorListenerArrayOutput struct{ *pulumi.OutputState }

func (ConnectorListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorListener)(nil)).Elem()
}

func (o ConnectorListenerArrayOutput) ToConnectorListenerArrayOutput() ConnectorListenerArrayOutput {
	return o
}

func (o ConnectorListenerArrayOutput) ToConnectorListenerArrayOutputWithContext(ctx context.Context) ConnectorListenerArrayOutput {
	return o
}

func (o ConnectorListenerArrayOutput) Index(i pulumi.IntInput) ConnectorListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorListener {
		return vs[0].([]*ConnectorListener)[vs[1].(int)]
	}).(ConnectorListenerOutput)
}

type ConnectorListenerMapOutput struct{ *pulumi.OutputState }

func (ConnectorListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorListener)(nil)).Elem()
}

func (o ConnectorListenerMapOutput) ToConnectorListenerMapOutput() ConnectorListenerMapOutput {
	return o
}

func (o ConnectorListenerMapOutput) ToConnectorListenerMapOutputWithContext(ctx context.Context) ConnectorListenerMapOutput {
	return o
}

func (o ConnectorListenerMapOutput) MapIndex(k pulumi.StringInput) ConnectorListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorListener {
		return vs[0].(map[string]*ConnectorListener)[vs[1].(string)]
	}).(ConnectorListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorListenerInput)(nil)).Elem(), &ConnectorListener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorListenerArrayInput)(nil)).Elem(), ConnectorListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorListenerMapInput)(nil)).Elem(), ConnectorListenerMap{})
	pulumi.RegisterOutputType(ConnectorListenerOutput{})
	pulumi.RegisterOutputType(ConnectorListenerArrayOutput{})
	pulumi.RegisterOutputType(ConnectorListenerMapOutput{})
}
