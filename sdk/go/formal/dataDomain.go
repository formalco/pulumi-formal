// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Data Domain with Formal.
type DataDomain struct {
	pulumi.CustomResourceState

	// When the policy was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the data domain.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Excluded paths of this data domain.
	ExcludedPaths pulumi.StringArrayOutput `pulumi:"excludedPaths"`
	// Included paths of this data domain.
	IncludedPaths pulumi.StringArrayOutput `pulumi:"includedPaths"`
	// Name of the data domain.
	Name pulumi.StringOutput `pulumi:"name"`
	// Owners of this policy.
	Owners DataDomainOwnerArrayOutput `pulumi:"owners"`
	// Last update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewDataDomain registers a new resource with the given unique name, arguments, and options.
func NewDataDomain(ctx *pulumi.Context,
	name string, args *DataDomainArgs, opts ...pulumi.ResourceOption) (*DataDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExcludedPaths == nil {
		return nil, errors.New("invalid value for required argument 'ExcludedPaths'")
	}
	if args.IncludedPaths == nil {
		return nil, errors.New("invalid value for required argument 'IncludedPaths'")
	}
	if args.Owners == nil {
		return nil, errors.New("invalid value for required argument 'Owners'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataDomain
	err := ctx.RegisterResource("formal:index/dataDomain:DataDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataDomain gets an existing DataDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataDomainState, opts ...pulumi.ResourceOption) (*DataDomain, error) {
	var resource DataDomain
	err := ctx.ReadResource("formal:index/dataDomain:DataDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataDomain resources.
type dataDomainState struct {
	// When the policy was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the data domain.
	Description *string `pulumi:"description"`
	// Excluded paths of this data domain.
	ExcludedPaths []string `pulumi:"excludedPaths"`
	// Included paths of this data domain.
	IncludedPaths []string `pulumi:"includedPaths"`
	// Name of the data domain.
	Name *string `pulumi:"name"`
	// Owners of this policy.
	Owners []DataDomainOwner `pulumi:"owners"`
	// Last update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type DataDomainState struct {
	// When the policy was created.
	CreatedAt pulumi.StringPtrInput
	// Description of the data domain.
	Description pulumi.StringPtrInput
	// Excluded paths of this data domain.
	ExcludedPaths pulumi.StringArrayInput
	// Included paths of this data domain.
	IncludedPaths pulumi.StringArrayInput
	// Name of the data domain.
	Name pulumi.StringPtrInput
	// Owners of this policy.
	Owners DataDomainOwnerArrayInput
	// Last update time.
	UpdatedAt pulumi.StringPtrInput
}

func (DataDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataDomainState)(nil)).Elem()
}

type dataDomainArgs struct {
	// Description of the data domain.
	Description *string `pulumi:"description"`
	// Excluded paths of this data domain.
	ExcludedPaths []string `pulumi:"excludedPaths"`
	// Included paths of this data domain.
	IncludedPaths []string `pulumi:"includedPaths"`
	// Name of the data domain.
	Name *string `pulumi:"name"`
	// Owners of this policy.
	Owners []DataDomainOwner `pulumi:"owners"`
}

// The set of arguments for constructing a DataDomain resource.
type DataDomainArgs struct {
	// Description of the data domain.
	Description pulumi.StringPtrInput
	// Excluded paths of this data domain.
	ExcludedPaths pulumi.StringArrayInput
	// Included paths of this data domain.
	IncludedPaths pulumi.StringArrayInput
	// Name of the data domain.
	Name pulumi.StringPtrInput
	// Owners of this policy.
	Owners DataDomainOwnerArrayInput
}

func (DataDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataDomainArgs)(nil)).Elem()
}

type DataDomainInput interface {
	pulumi.Input

	ToDataDomainOutput() DataDomainOutput
	ToDataDomainOutputWithContext(ctx context.Context) DataDomainOutput
}

func (*DataDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDomain)(nil)).Elem()
}

func (i *DataDomain) ToDataDomainOutput() DataDomainOutput {
	return i.ToDataDomainOutputWithContext(context.Background())
}

func (i *DataDomain) ToDataDomainOutputWithContext(ctx context.Context) DataDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDomainOutput)
}

// DataDomainArrayInput is an input type that accepts DataDomainArray and DataDomainArrayOutput values.
// You can construct a concrete instance of `DataDomainArrayInput` via:
//
//	DataDomainArray{ DataDomainArgs{...} }
type DataDomainArrayInput interface {
	pulumi.Input

	ToDataDomainArrayOutput() DataDomainArrayOutput
	ToDataDomainArrayOutputWithContext(context.Context) DataDomainArrayOutput
}

type DataDomainArray []DataDomainInput

func (DataDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataDomain)(nil)).Elem()
}

func (i DataDomainArray) ToDataDomainArrayOutput() DataDomainArrayOutput {
	return i.ToDataDomainArrayOutputWithContext(context.Background())
}

func (i DataDomainArray) ToDataDomainArrayOutputWithContext(ctx context.Context) DataDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDomainArrayOutput)
}

// DataDomainMapInput is an input type that accepts DataDomainMap and DataDomainMapOutput values.
// You can construct a concrete instance of `DataDomainMapInput` via:
//
//	DataDomainMap{ "key": DataDomainArgs{...} }
type DataDomainMapInput interface {
	pulumi.Input

	ToDataDomainMapOutput() DataDomainMapOutput
	ToDataDomainMapOutputWithContext(context.Context) DataDomainMapOutput
}

type DataDomainMap map[string]DataDomainInput

func (DataDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataDomain)(nil)).Elem()
}

func (i DataDomainMap) ToDataDomainMapOutput() DataDomainMapOutput {
	return i.ToDataDomainMapOutputWithContext(context.Background())
}

func (i DataDomainMap) ToDataDomainMapOutputWithContext(ctx context.Context) DataDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataDomainMapOutput)
}

type DataDomainOutput struct{ *pulumi.OutputState }

func (DataDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataDomain)(nil)).Elem()
}

func (o DataDomainOutput) ToDataDomainOutput() DataDomainOutput {
	return o
}

func (o DataDomainOutput) ToDataDomainOutputWithContext(ctx context.Context) DataDomainOutput {
	return o
}

// When the policy was created.
func (o DataDomainOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDomain) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the data domain.
func (o DataDomainOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataDomain) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Excluded paths of this data domain.
func (o DataDomainOutput) ExcludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataDomain) pulumi.StringArrayOutput { return v.ExcludedPaths }).(pulumi.StringArrayOutput)
}

// Included paths of this data domain.
func (o DataDomainOutput) IncludedPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataDomain) pulumi.StringArrayOutput { return v.IncludedPaths }).(pulumi.StringArrayOutput)
}

// Name of the data domain.
func (o DataDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDomain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Owners of this policy.
func (o DataDomainOutput) Owners() DataDomainOwnerArrayOutput {
	return o.ApplyT(func(v *DataDomain) DataDomainOwnerArrayOutput { return v.Owners }).(DataDomainOwnerArrayOutput)
}

// Last update time.
func (o DataDomainOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DataDomain) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type DataDomainArrayOutput struct{ *pulumi.OutputState }

func (DataDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataDomain)(nil)).Elem()
}

func (o DataDomainArrayOutput) ToDataDomainArrayOutput() DataDomainArrayOutput {
	return o
}

func (o DataDomainArrayOutput) ToDataDomainArrayOutputWithContext(ctx context.Context) DataDomainArrayOutput {
	return o
}

func (o DataDomainArrayOutput) Index(i pulumi.IntInput) DataDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataDomain {
		return vs[0].([]*DataDomain)[vs[1].(int)]
	}).(DataDomainOutput)
}

type DataDomainMapOutput struct{ *pulumi.OutputState }

func (DataDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataDomain)(nil)).Elem()
}

func (o DataDomainMapOutput) ToDataDomainMapOutput() DataDomainMapOutput {
	return o
}

func (o DataDomainMapOutput) ToDataDomainMapOutputWithContext(ctx context.Context) DataDomainMapOutput {
	return o
}

func (o DataDomainMapOutput) MapIndex(k pulumi.StringInput) DataDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataDomain {
		return vs[0].(map[string]*DataDomain)[vs[1].(string)]
	}).(DataDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataDomainInput)(nil)).Elem(), &DataDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDomainArrayInput)(nil)).Elem(), DataDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataDomainMapInput)(nil)).Elem(), DataDomainMap{})
	pulumi.RegisterOutputType(DataDomainOutput{})
	pulumi.RegisterOutputType(DataDomainArrayOutput{})
	pulumi.RegisterOutputType(DataDomainMapOutput{})
}
