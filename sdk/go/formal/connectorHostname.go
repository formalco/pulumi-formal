// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Connector Hostname with Formal.
type ConnectorHostname struct {
	pulumi.CustomResourceState

	// The ID of the Connector this hostname is linked to.
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// The DNS record for this hostname.
	DnsRecord pulumi.StringPtrOutput `pulumi:"dnsRecord"`
	// The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
	DnsRecordStatus pulumi.StringOutput `pulumi:"dnsRecordStatus"`
	// The hostname for this Connector hostname.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
	//
	// Deprecated: This field is deprecated and has no effect. It will be removed in a future release.
	ManagedTls pulumi.BoolPtrOutput `pulumi:"managedTls"`
	// If set to true, this connector hostname cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
	TlsCertificateStatus pulumi.StringOutput `pulumi:"tlsCertificateStatus"`
}

// NewConnectorHostname registers a new resource with the given unique name, arguments, and options.
func NewConnectorHostname(ctx *pulumi.Context,
	name string, args *ConnectorHostnameArgs, opts ...pulumi.ResourceOption) (*ConnectorHostname, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorHostname
	err := ctx.RegisterResource("formal:index/connectorHostname:ConnectorHostname", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorHostname gets an existing ConnectorHostname resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorHostname(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorHostnameState, opts ...pulumi.ResourceOption) (*ConnectorHostname, error) {
	var resource ConnectorHostname
	err := ctx.ReadResource("formal:index/connectorHostname:ConnectorHostname", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorHostname resources.
type connectorHostnameState struct {
	// The ID of the Connector this hostname is linked to.
	ConnectorId *string `pulumi:"connectorId"`
	// The DNS record for this hostname.
	DnsRecord *string `pulumi:"dnsRecord"`
	// The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
	DnsRecordStatus *string `pulumi:"dnsRecordStatus"`
	// The hostname for this Connector hostname.
	Hostname *string `pulumi:"hostname"`
	// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
	//
	// Deprecated: This field is deprecated and has no effect. It will be removed in a future release.
	ManagedTls *bool `pulumi:"managedTls"`
	// If set to true, this connector hostname cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
	TlsCertificateStatus *string `pulumi:"tlsCertificateStatus"`
}

type ConnectorHostnameState struct {
	// The ID of the Connector this hostname is linked to.
	ConnectorId pulumi.StringPtrInput
	// The DNS record for this hostname.
	DnsRecord pulumi.StringPtrInput
	// The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
	DnsRecordStatus pulumi.StringPtrInput
	// The hostname for this Connector hostname.
	Hostname pulumi.StringPtrInput
	// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
	//
	// Deprecated: This field is deprecated and has no effect. It will be removed in a future release.
	ManagedTls pulumi.BoolPtrInput
	// If set to true, this connector hostname cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
	TlsCertificateStatus pulumi.StringPtrInput
}

func (ConnectorHostnameState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorHostnameState)(nil)).Elem()
}

type connectorHostnameArgs struct {
	// The ID of the Connector this hostname is linked to.
	ConnectorId string `pulumi:"connectorId"`
	// The DNS record for this hostname.
	DnsRecord *string `pulumi:"dnsRecord"`
	// The hostname for this Connector hostname.
	Hostname string `pulumi:"hostname"`
	// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
	//
	// Deprecated: This field is deprecated and has no effect. It will be removed in a future release.
	ManagedTls *bool `pulumi:"managedTls"`
	// If set to true, this connector hostname cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a ConnectorHostname resource.
type ConnectorHostnameArgs struct {
	// The ID of the Connector this hostname is linked to.
	ConnectorId pulumi.StringInput
	// The DNS record for this hostname.
	DnsRecord pulumi.StringPtrInput
	// The hostname for this Connector hostname.
	Hostname pulumi.StringInput
	// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
	//
	// Deprecated: This field is deprecated and has no effect. It will be removed in a future release.
	ManagedTls pulumi.BoolPtrInput
	// If set to true, this connector hostname cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ConnectorHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorHostnameArgs)(nil)).Elem()
}

type ConnectorHostnameInput interface {
	pulumi.Input

	ToConnectorHostnameOutput() ConnectorHostnameOutput
	ToConnectorHostnameOutputWithContext(ctx context.Context) ConnectorHostnameOutput
}

func (*ConnectorHostname) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorHostname)(nil)).Elem()
}

func (i *ConnectorHostname) ToConnectorHostnameOutput() ConnectorHostnameOutput {
	return i.ToConnectorHostnameOutputWithContext(context.Background())
}

func (i *ConnectorHostname) ToConnectorHostnameOutputWithContext(ctx context.Context) ConnectorHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorHostnameOutput)
}

// ConnectorHostnameArrayInput is an input type that accepts ConnectorHostnameArray and ConnectorHostnameArrayOutput values.
// You can construct a concrete instance of `ConnectorHostnameArrayInput` via:
//
//	ConnectorHostnameArray{ ConnectorHostnameArgs{...} }
type ConnectorHostnameArrayInput interface {
	pulumi.Input

	ToConnectorHostnameArrayOutput() ConnectorHostnameArrayOutput
	ToConnectorHostnameArrayOutputWithContext(context.Context) ConnectorHostnameArrayOutput
}

type ConnectorHostnameArray []ConnectorHostnameInput

func (ConnectorHostnameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorHostname)(nil)).Elem()
}

func (i ConnectorHostnameArray) ToConnectorHostnameArrayOutput() ConnectorHostnameArrayOutput {
	return i.ToConnectorHostnameArrayOutputWithContext(context.Background())
}

func (i ConnectorHostnameArray) ToConnectorHostnameArrayOutputWithContext(ctx context.Context) ConnectorHostnameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorHostnameArrayOutput)
}

// ConnectorHostnameMapInput is an input type that accepts ConnectorHostnameMap and ConnectorHostnameMapOutput values.
// You can construct a concrete instance of `ConnectorHostnameMapInput` via:
//
//	ConnectorHostnameMap{ "key": ConnectorHostnameArgs{...} }
type ConnectorHostnameMapInput interface {
	pulumi.Input

	ToConnectorHostnameMapOutput() ConnectorHostnameMapOutput
	ToConnectorHostnameMapOutputWithContext(context.Context) ConnectorHostnameMapOutput
}

type ConnectorHostnameMap map[string]ConnectorHostnameInput

func (ConnectorHostnameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorHostname)(nil)).Elem()
}

func (i ConnectorHostnameMap) ToConnectorHostnameMapOutput() ConnectorHostnameMapOutput {
	return i.ToConnectorHostnameMapOutputWithContext(context.Background())
}

func (i ConnectorHostnameMap) ToConnectorHostnameMapOutputWithContext(ctx context.Context) ConnectorHostnameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorHostnameMapOutput)
}

type ConnectorHostnameOutput struct{ *pulumi.OutputState }

func (ConnectorHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorHostname)(nil)).Elem()
}

func (o ConnectorHostnameOutput) ToConnectorHostnameOutput() ConnectorHostnameOutput {
	return o
}

func (o ConnectorHostnameOutput) ToConnectorHostnameOutputWithContext(ctx context.Context) ConnectorHostnameOutput {
	return o
}

// The ID of the Connector this hostname is linked to.
func (o ConnectorHostnameOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorHostname) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// The DNS record for this hostname.
func (o ConnectorHostnameOutput) DnsRecord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorHostname) pulumi.StringPtrOutput { return v.DnsRecord }).(pulumi.StringPtrOutput)
}

// The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
func (o ConnectorHostnameOutput) DnsRecordStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorHostname) pulumi.StringOutput { return v.DnsRecordStatus }).(pulumi.StringOutput)
}

// The hostname for this Connector hostname.
func (o ConnectorHostnameOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorHostname) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
//
// Deprecated: This field is deprecated and has no effect. It will be removed in a future release.
func (o ConnectorHostnameOutput) ManagedTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorHostname) pulumi.BoolPtrOutput { return v.ManagedTls }).(pulumi.BoolPtrOutput)
}

// If set to true, this connector hostname cannot be deleted.
func (o ConnectorHostnameOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectorHostname) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
func (o ConnectorHostnameOutput) TlsCertificateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorHostname) pulumi.StringOutput { return v.TlsCertificateStatus }).(pulumi.StringOutput)
}

type ConnectorHostnameArrayOutput struct{ *pulumi.OutputState }

func (ConnectorHostnameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorHostname)(nil)).Elem()
}

func (o ConnectorHostnameArrayOutput) ToConnectorHostnameArrayOutput() ConnectorHostnameArrayOutput {
	return o
}

func (o ConnectorHostnameArrayOutput) ToConnectorHostnameArrayOutputWithContext(ctx context.Context) ConnectorHostnameArrayOutput {
	return o
}

func (o ConnectorHostnameArrayOutput) Index(i pulumi.IntInput) ConnectorHostnameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorHostname {
		return vs[0].([]*ConnectorHostname)[vs[1].(int)]
	}).(ConnectorHostnameOutput)
}

type ConnectorHostnameMapOutput struct{ *pulumi.OutputState }

func (ConnectorHostnameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorHostname)(nil)).Elem()
}

func (o ConnectorHostnameMapOutput) ToConnectorHostnameMapOutput() ConnectorHostnameMapOutput {
	return o
}

func (o ConnectorHostnameMapOutput) ToConnectorHostnameMapOutputWithContext(ctx context.Context) ConnectorHostnameMapOutput {
	return o
}

func (o ConnectorHostnameMapOutput) MapIndex(k pulumi.StringInput) ConnectorHostnameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorHostname {
		return vs[0].(map[string]*ConnectorHostname)[vs[1].(string)]
	}).(ConnectorHostnameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorHostnameInput)(nil)).Elem(), &ConnectorHostname{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorHostnameArrayInput)(nil)).Elem(), ConnectorHostnameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorHostnameMapInput)(nil)).Elem(), ConnectorHostnameMap{})
	pulumi.RegisterOutputType(ConnectorHostnameOutput{})
	pulumi.RegisterOutputType(ConnectorHostnameArrayOutput{})
	pulumi.RegisterOutputType(ConnectorHostnameMapOutput{})
}
