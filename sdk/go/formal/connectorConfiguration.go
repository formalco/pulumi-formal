// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Connector Configuration with Formal.
type ConnectorConfiguration struct {
	pulumi.CustomResourceState

	// The ID of the Connector this configuration is linked to.
	ConnectorId pulumi.StringOutput `pulumi:"connectorId"`
	// The port to be used for this Connector's health check.
	HealthCheckPort pulumi.IntPtrOutput `pulumi:"healthCheckPort"`
	// The log level to be configured for this Connector.
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
}

// NewConnectorConfiguration registers a new resource with the given unique name, arguments, and options.
func NewConnectorConfiguration(ctx *pulumi.Context,
	name string, args *ConnectorConfigurationArgs, opts ...pulumi.ResourceOption) (*ConnectorConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectorConfiguration
	err := ctx.RegisterResource("formal:index/connectorConfiguration:ConnectorConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectorConfiguration gets an existing ConnectorConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectorConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectorConfigurationState, opts ...pulumi.ResourceOption) (*ConnectorConfiguration, error) {
	var resource ConnectorConfiguration
	err := ctx.ReadResource("formal:index/connectorConfiguration:ConnectorConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectorConfiguration resources.
type connectorConfigurationState struct {
	// The ID of the Connector this configuration is linked to.
	ConnectorId *string `pulumi:"connectorId"`
	// The port to be used for this Connector's health check.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// The log level to be configured for this Connector.
	LogLevel *string `pulumi:"logLevel"`
}

type ConnectorConfigurationState struct {
	// The ID of the Connector this configuration is linked to.
	ConnectorId pulumi.StringPtrInput
	// The port to be used for this Connector's health check.
	HealthCheckPort pulumi.IntPtrInput
	// The log level to be configured for this Connector.
	LogLevel pulumi.StringPtrInput
}

func (ConnectorConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorConfigurationState)(nil)).Elem()
}

type connectorConfigurationArgs struct {
	// The ID of the Connector this configuration is linked to.
	ConnectorId string `pulumi:"connectorId"`
	// The port to be used for this Connector's health check.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// The log level to be configured for this Connector.
	LogLevel *string `pulumi:"logLevel"`
}

// The set of arguments for constructing a ConnectorConfiguration resource.
type ConnectorConfigurationArgs struct {
	// The ID of the Connector this configuration is linked to.
	ConnectorId pulumi.StringInput
	// The port to be used for this Connector's health check.
	HealthCheckPort pulumi.IntPtrInput
	// The log level to be configured for this Connector.
	LogLevel pulumi.StringPtrInput
}

func (ConnectorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectorConfigurationArgs)(nil)).Elem()
}

type ConnectorConfigurationInput interface {
	pulumi.Input

	ToConnectorConfigurationOutput() ConnectorConfigurationOutput
	ToConnectorConfigurationOutputWithContext(ctx context.Context) ConnectorConfigurationOutput
}

func (*ConnectorConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfiguration)(nil)).Elem()
}

func (i *ConnectorConfiguration) ToConnectorConfigurationOutput() ConnectorConfigurationOutput {
	return i.ToConnectorConfigurationOutputWithContext(context.Background())
}

func (i *ConnectorConfiguration) ToConnectorConfigurationOutputWithContext(ctx context.Context) ConnectorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationOutput)
}

// ConnectorConfigurationArrayInput is an input type that accepts ConnectorConfigurationArray and ConnectorConfigurationArrayOutput values.
// You can construct a concrete instance of `ConnectorConfigurationArrayInput` via:
//
//	ConnectorConfigurationArray{ ConnectorConfigurationArgs{...} }
type ConnectorConfigurationArrayInput interface {
	pulumi.Input

	ToConnectorConfigurationArrayOutput() ConnectorConfigurationArrayOutput
	ToConnectorConfigurationArrayOutputWithContext(context.Context) ConnectorConfigurationArrayOutput
}

type ConnectorConfigurationArray []ConnectorConfigurationInput

func (ConnectorConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorConfiguration)(nil)).Elem()
}

func (i ConnectorConfigurationArray) ToConnectorConfigurationArrayOutput() ConnectorConfigurationArrayOutput {
	return i.ToConnectorConfigurationArrayOutputWithContext(context.Background())
}

func (i ConnectorConfigurationArray) ToConnectorConfigurationArrayOutputWithContext(ctx context.Context) ConnectorConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationArrayOutput)
}

// ConnectorConfigurationMapInput is an input type that accepts ConnectorConfigurationMap and ConnectorConfigurationMapOutput values.
// You can construct a concrete instance of `ConnectorConfigurationMapInput` via:
//
//	ConnectorConfigurationMap{ "key": ConnectorConfigurationArgs{...} }
type ConnectorConfigurationMapInput interface {
	pulumi.Input

	ToConnectorConfigurationMapOutput() ConnectorConfigurationMapOutput
	ToConnectorConfigurationMapOutputWithContext(context.Context) ConnectorConfigurationMapOutput
}

type ConnectorConfigurationMap map[string]ConnectorConfigurationInput

func (ConnectorConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorConfiguration)(nil)).Elem()
}

func (i ConnectorConfigurationMap) ToConnectorConfigurationMapOutput() ConnectorConfigurationMapOutput {
	return i.ToConnectorConfigurationMapOutputWithContext(context.Background())
}

func (i ConnectorConfigurationMap) ToConnectorConfigurationMapOutputWithContext(ctx context.Context) ConnectorConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationMapOutput)
}

type ConnectorConfigurationOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfiguration)(nil)).Elem()
}

func (o ConnectorConfigurationOutput) ToConnectorConfigurationOutput() ConnectorConfigurationOutput {
	return o
}

func (o ConnectorConfigurationOutput) ToConnectorConfigurationOutputWithContext(ctx context.Context) ConnectorConfigurationOutput {
	return o
}

// The ID of the Connector this configuration is linked to.
func (o ConnectorConfigurationOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectorConfiguration) pulumi.StringOutput { return v.ConnectorId }).(pulumi.StringOutput)
}

// The port to be used for this Connector's health check.
func (o ConnectorConfigurationOutput) HealthCheckPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConnectorConfiguration) pulumi.IntPtrOutput { return v.HealthCheckPort }).(pulumi.IntPtrOutput)
}

// The log level to be configured for this Connector.
func (o ConnectorConfigurationOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorConfiguration) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

type ConnectorConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectorConfiguration)(nil)).Elem()
}

func (o ConnectorConfigurationArrayOutput) ToConnectorConfigurationArrayOutput() ConnectorConfigurationArrayOutput {
	return o
}

func (o ConnectorConfigurationArrayOutput) ToConnectorConfigurationArrayOutputWithContext(ctx context.Context) ConnectorConfigurationArrayOutput {
	return o
}

func (o ConnectorConfigurationArrayOutput) Index(i pulumi.IntInput) ConnectorConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectorConfiguration {
		return vs[0].([]*ConnectorConfiguration)[vs[1].(int)]
	}).(ConnectorConfigurationOutput)
}

type ConnectorConfigurationMapOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectorConfiguration)(nil)).Elem()
}

func (o ConnectorConfigurationMapOutput) ToConnectorConfigurationMapOutput() ConnectorConfigurationMapOutput {
	return o
}

func (o ConnectorConfigurationMapOutput) ToConnectorConfigurationMapOutputWithContext(ctx context.Context) ConnectorConfigurationMapOutput {
	return o
}

func (o ConnectorConfigurationMapOutput) MapIndex(k pulumi.StringInput) ConnectorConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectorConfiguration {
		return vs[0].(map[string]*ConnectorConfiguration)[vs[1].(string)]
	}).(ConnectorConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationInput)(nil)).Elem(), &ConnectorConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationArrayInput)(nil)).Elem(), ConnectorConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationMapInput)(nil)).Elem(), ConnectorConfigurationMap{})
	pulumi.RegisterOutputType(ConnectorConfigurationOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationMapOutput{})
}
