// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Integration MFA app.
type IntegrationMfa struct {
	pulumi.CustomResourceState

	// Configuration block for Duo integration. This block is optional and may be omitted if not configuring a Duo integration.
	Duo IntegrationMfaDuoPtrOutput `pulumi:"duo"`
	// Name of the Integration
	Name pulumi.StringOutput `pulumi:"name"`
	// If set to true, this Integration MFA cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewIntegrationMfa registers a new resource with the given unique name, arguments, and options.
func NewIntegrationMfa(ctx *pulumi.Context,
	name string, args *IntegrationMfaArgs, opts ...pulumi.ResourceOption) (*IntegrationMfa, error) {
	if args == nil {
		args = &IntegrationMfaArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationMfa
	err := ctx.RegisterResource("formal:index/integrationMfa:IntegrationMfa", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationMfa gets an existing IntegrationMfa resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationMfa(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationMfaState, opts ...pulumi.ResourceOption) (*IntegrationMfa, error) {
	var resource IntegrationMfa
	err := ctx.ReadResource("formal:index/integrationMfa:IntegrationMfa", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationMfa resources.
type integrationMfaState struct {
	// Configuration block for Duo integration. This block is optional and may be omitted if not configuring a Duo integration.
	Duo *IntegrationMfaDuo `pulumi:"duo"`
	// Name of the Integration
	Name *string `pulumi:"name"`
	// If set to true, this Integration MFA cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type IntegrationMfaState struct {
	// Configuration block for Duo integration. This block is optional and may be omitted if not configuring a Duo integration.
	Duo IntegrationMfaDuoPtrInput
	// Name of the Integration
	Name pulumi.StringPtrInput
	// If set to true, this Integration MFA cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (IntegrationMfaState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationMfaState)(nil)).Elem()
}

type integrationMfaArgs struct {
	// Configuration block for Duo integration. This block is optional and may be omitted if not configuring a Duo integration.
	Duo *IntegrationMfaDuo `pulumi:"duo"`
	// Name of the Integration
	Name *string `pulumi:"name"`
	// If set to true, this Integration MFA cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a IntegrationMfa resource.
type IntegrationMfaArgs struct {
	// Configuration block for Duo integration. This block is optional and may be omitted if not configuring a Duo integration.
	Duo IntegrationMfaDuoPtrInput
	// Name of the Integration
	Name pulumi.StringPtrInput
	// If set to true, this Integration MFA cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (IntegrationMfaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationMfaArgs)(nil)).Elem()
}

type IntegrationMfaInput interface {
	pulumi.Input

	ToIntegrationMfaOutput() IntegrationMfaOutput
	ToIntegrationMfaOutputWithContext(ctx context.Context) IntegrationMfaOutput
}

func (*IntegrationMfa) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationMfa)(nil)).Elem()
}

func (i *IntegrationMfa) ToIntegrationMfaOutput() IntegrationMfaOutput {
	return i.ToIntegrationMfaOutputWithContext(context.Background())
}

func (i *IntegrationMfa) ToIntegrationMfaOutputWithContext(ctx context.Context) IntegrationMfaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMfaOutput)
}

// IntegrationMfaArrayInput is an input type that accepts IntegrationMfaArray and IntegrationMfaArrayOutput values.
// You can construct a concrete instance of `IntegrationMfaArrayInput` via:
//
//	IntegrationMfaArray{ IntegrationMfaArgs{...} }
type IntegrationMfaArrayInput interface {
	pulumi.Input

	ToIntegrationMfaArrayOutput() IntegrationMfaArrayOutput
	ToIntegrationMfaArrayOutputWithContext(context.Context) IntegrationMfaArrayOutput
}

type IntegrationMfaArray []IntegrationMfaInput

func (IntegrationMfaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationMfa)(nil)).Elem()
}

func (i IntegrationMfaArray) ToIntegrationMfaArrayOutput() IntegrationMfaArrayOutput {
	return i.ToIntegrationMfaArrayOutputWithContext(context.Background())
}

func (i IntegrationMfaArray) ToIntegrationMfaArrayOutputWithContext(ctx context.Context) IntegrationMfaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMfaArrayOutput)
}

// IntegrationMfaMapInput is an input type that accepts IntegrationMfaMap and IntegrationMfaMapOutput values.
// You can construct a concrete instance of `IntegrationMfaMapInput` via:
//
//	IntegrationMfaMap{ "key": IntegrationMfaArgs{...} }
type IntegrationMfaMapInput interface {
	pulumi.Input

	ToIntegrationMfaMapOutput() IntegrationMfaMapOutput
	ToIntegrationMfaMapOutputWithContext(context.Context) IntegrationMfaMapOutput
}

type IntegrationMfaMap map[string]IntegrationMfaInput

func (IntegrationMfaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationMfa)(nil)).Elem()
}

func (i IntegrationMfaMap) ToIntegrationMfaMapOutput() IntegrationMfaMapOutput {
	return i.ToIntegrationMfaMapOutputWithContext(context.Background())
}

func (i IntegrationMfaMap) ToIntegrationMfaMapOutputWithContext(ctx context.Context) IntegrationMfaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationMfaMapOutput)
}

type IntegrationMfaOutput struct{ *pulumi.OutputState }

func (IntegrationMfaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationMfa)(nil)).Elem()
}

func (o IntegrationMfaOutput) ToIntegrationMfaOutput() IntegrationMfaOutput {
	return o
}

func (o IntegrationMfaOutput) ToIntegrationMfaOutputWithContext(ctx context.Context) IntegrationMfaOutput {
	return o
}

// Configuration block for Duo integration. This block is optional and may be omitted if not configuring a Duo integration.
func (o IntegrationMfaOutput) Duo() IntegrationMfaDuoPtrOutput {
	return o.ApplyT(func(v *IntegrationMfa) IntegrationMfaDuoPtrOutput { return v.Duo }).(IntegrationMfaDuoPtrOutput)
}

// Name of the Integration
func (o IntegrationMfaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationMfa) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// If set to true, this Integration MFA cannot be deleted.
func (o IntegrationMfaOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IntegrationMfa) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type IntegrationMfaArrayOutput struct{ *pulumi.OutputState }

func (IntegrationMfaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationMfa)(nil)).Elem()
}

func (o IntegrationMfaArrayOutput) ToIntegrationMfaArrayOutput() IntegrationMfaArrayOutput {
	return o
}

func (o IntegrationMfaArrayOutput) ToIntegrationMfaArrayOutputWithContext(ctx context.Context) IntegrationMfaArrayOutput {
	return o
}

func (o IntegrationMfaArrayOutput) Index(i pulumi.IntInput) IntegrationMfaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationMfa {
		return vs[0].([]*IntegrationMfa)[vs[1].(int)]
	}).(IntegrationMfaOutput)
}

type IntegrationMfaMapOutput struct{ *pulumi.OutputState }

func (IntegrationMfaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationMfa)(nil)).Elem()
}

func (o IntegrationMfaMapOutput) ToIntegrationMfaMapOutput() IntegrationMfaMapOutput {
	return o
}

func (o IntegrationMfaMapOutput) ToIntegrationMfaMapOutputWithContext(ctx context.Context) IntegrationMfaMapOutput {
	return o
}

func (o IntegrationMfaMapOutput) MapIndex(k pulumi.StringInput) IntegrationMfaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationMfa {
		return vs[0].(map[string]*IntegrationMfa)[vs[1].(string)]
	}).(IntegrationMfaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMfaInput)(nil)).Elem(), &IntegrationMfa{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMfaArrayInput)(nil)).Elem(), IntegrationMfaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationMfaMapInput)(nil)).Elem(), IntegrationMfaMap{})
	pulumi.RegisterOutputType(IntegrationMfaOutput{})
	pulumi.RegisterOutputType(IntegrationMfaArrayOutput{})
	pulumi.RegisterOutputType(IntegrationMfaMapOutput{})
}
