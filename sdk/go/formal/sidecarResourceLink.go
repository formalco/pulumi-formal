// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Linking a Resource to a Sidecar in Formal.
type SidecarResourceLink struct {
	pulumi.CustomResourceState

	// Port.
	Port pulumi.IntOutput `pulumi:"port"`
	// Resource ID to be linked.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Sidecar ID that should be linked.
	SidecarId pulumi.StringOutput `pulumi:"sidecarId"`
	// If set to true, this Sidecar Datastore Link cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewSidecarResourceLink registers a new resource with the given unique name, arguments, and options.
func NewSidecarResourceLink(ctx *pulumi.Context,
	name string, args *SidecarResourceLinkArgs, opts ...pulumi.ResourceOption) (*SidecarResourceLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.SidecarId == nil {
		return nil, errors.New("invalid value for required argument 'SidecarId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SidecarResourceLink
	err := ctx.RegisterResource("formal:index/sidecarResourceLink:SidecarResourceLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSidecarResourceLink gets an existing SidecarResourceLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSidecarResourceLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SidecarResourceLinkState, opts ...pulumi.ResourceOption) (*SidecarResourceLink, error) {
	var resource SidecarResourceLink
	err := ctx.ReadResource("formal:index/sidecarResourceLink:SidecarResourceLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SidecarResourceLink resources.
type sidecarResourceLinkState struct {
	// Port.
	Port *int `pulumi:"port"`
	// Resource ID to be linked.
	ResourceId *string `pulumi:"resourceId"`
	// Sidecar ID that should be linked.
	SidecarId *string `pulumi:"sidecarId"`
	// If set to true, this Sidecar Datastore Link cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type SidecarResourceLinkState struct {
	// Port.
	Port pulumi.IntPtrInput
	// Resource ID to be linked.
	ResourceId pulumi.StringPtrInput
	// Sidecar ID that should be linked.
	SidecarId pulumi.StringPtrInput
	// If set to true, this Sidecar Datastore Link cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (SidecarResourceLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarResourceLinkState)(nil)).Elem()
}

type sidecarResourceLinkArgs struct {
	// Port.
	Port int `pulumi:"port"`
	// Resource ID to be linked.
	ResourceId string `pulumi:"resourceId"`
	// Sidecar ID that should be linked.
	SidecarId string `pulumi:"sidecarId"`
	// If set to true, this Sidecar Datastore Link cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a SidecarResourceLink resource.
type SidecarResourceLinkArgs struct {
	// Port.
	Port pulumi.IntInput
	// Resource ID to be linked.
	ResourceId pulumi.StringInput
	// Sidecar ID that should be linked.
	SidecarId pulumi.StringInput
	// If set to true, this Sidecar Datastore Link cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (SidecarResourceLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sidecarResourceLinkArgs)(nil)).Elem()
}

type SidecarResourceLinkInput interface {
	pulumi.Input

	ToSidecarResourceLinkOutput() SidecarResourceLinkOutput
	ToSidecarResourceLinkOutputWithContext(ctx context.Context) SidecarResourceLinkOutput
}

func (*SidecarResourceLink) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarResourceLink)(nil)).Elem()
}

func (i *SidecarResourceLink) ToSidecarResourceLinkOutput() SidecarResourceLinkOutput {
	return i.ToSidecarResourceLinkOutputWithContext(context.Background())
}

func (i *SidecarResourceLink) ToSidecarResourceLinkOutputWithContext(ctx context.Context) SidecarResourceLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarResourceLinkOutput)
}

// SidecarResourceLinkArrayInput is an input type that accepts SidecarResourceLinkArray and SidecarResourceLinkArrayOutput values.
// You can construct a concrete instance of `SidecarResourceLinkArrayInput` via:
//
//	SidecarResourceLinkArray{ SidecarResourceLinkArgs{...} }
type SidecarResourceLinkArrayInput interface {
	pulumi.Input

	ToSidecarResourceLinkArrayOutput() SidecarResourceLinkArrayOutput
	ToSidecarResourceLinkArrayOutputWithContext(context.Context) SidecarResourceLinkArrayOutput
}

type SidecarResourceLinkArray []SidecarResourceLinkInput

func (SidecarResourceLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SidecarResourceLink)(nil)).Elem()
}

func (i SidecarResourceLinkArray) ToSidecarResourceLinkArrayOutput() SidecarResourceLinkArrayOutput {
	return i.ToSidecarResourceLinkArrayOutputWithContext(context.Background())
}

func (i SidecarResourceLinkArray) ToSidecarResourceLinkArrayOutputWithContext(ctx context.Context) SidecarResourceLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarResourceLinkArrayOutput)
}

// SidecarResourceLinkMapInput is an input type that accepts SidecarResourceLinkMap and SidecarResourceLinkMapOutput values.
// You can construct a concrete instance of `SidecarResourceLinkMapInput` via:
//
//	SidecarResourceLinkMap{ "key": SidecarResourceLinkArgs{...} }
type SidecarResourceLinkMapInput interface {
	pulumi.Input

	ToSidecarResourceLinkMapOutput() SidecarResourceLinkMapOutput
	ToSidecarResourceLinkMapOutputWithContext(context.Context) SidecarResourceLinkMapOutput
}

type SidecarResourceLinkMap map[string]SidecarResourceLinkInput

func (SidecarResourceLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SidecarResourceLink)(nil)).Elem()
}

func (i SidecarResourceLinkMap) ToSidecarResourceLinkMapOutput() SidecarResourceLinkMapOutput {
	return i.ToSidecarResourceLinkMapOutputWithContext(context.Background())
}

func (i SidecarResourceLinkMap) ToSidecarResourceLinkMapOutputWithContext(ctx context.Context) SidecarResourceLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SidecarResourceLinkMapOutput)
}

type SidecarResourceLinkOutput struct{ *pulumi.OutputState }

func (SidecarResourceLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SidecarResourceLink)(nil)).Elem()
}

func (o SidecarResourceLinkOutput) ToSidecarResourceLinkOutput() SidecarResourceLinkOutput {
	return o
}

func (o SidecarResourceLinkOutput) ToSidecarResourceLinkOutputWithContext(ctx context.Context) SidecarResourceLinkOutput {
	return o
}

// Port.
func (o SidecarResourceLinkOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *SidecarResourceLink) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Resource ID to be linked.
func (o SidecarResourceLinkOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SidecarResourceLink) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Sidecar ID that should be linked.
func (o SidecarResourceLinkOutput) SidecarId() pulumi.StringOutput {
	return o.ApplyT(func(v *SidecarResourceLink) pulumi.StringOutput { return v.SidecarId }).(pulumi.StringOutput)
}

// If set to true, this Sidecar Datastore Link cannot be deleted.
func (o SidecarResourceLinkOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SidecarResourceLink) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type SidecarResourceLinkArrayOutput struct{ *pulumi.OutputState }

func (SidecarResourceLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SidecarResourceLink)(nil)).Elem()
}

func (o SidecarResourceLinkArrayOutput) ToSidecarResourceLinkArrayOutput() SidecarResourceLinkArrayOutput {
	return o
}

func (o SidecarResourceLinkArrayOutput) ToSidecarResourceLinkArrayOutputWithContext(ctx context.Context) SidecarResourceLinkArrayOutput {
	return o
}

func (o SidecarResourceLinkArrayOutput) Index(i pulumi.IntInput) SidecarResourceLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SidecarResourceLink {
		return vs[0].([]*SidecarResourceLink)[vs[1].(int)]
	}).(SidecarResourceLinkOutput)
}

type SidecarResourceLinkMapOutput struct{ *pulumi.OutputState }

func (SidecarResourceLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SidecarResourceLink)(nil)).Elem()
}

func (o SidecarResourceLinkMapOutput) ToSidecarResourceLinkMapOutput() SidecarResourceLinkMapOutput {
	return o
}

func (o SidecarResourceLinkMapOutput) ToSidecarResourceLinkMapOutputWithContext(ctx context.Context) SidecarResourceLinkMapOutput {
	return o
}

func (o SidecarResourceLinkMapOutput) MapIndex(k pulumi.StringInput) SidecarResourceLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SidecarResourceLink {
		return vs[0].(map[string]*SidecarResourceLink)[vs[1].(string)]
	}).(SidecarResourceLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarResourceLinkInput)(nil)).Elem(), &SidecarResourceLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarResourceLinkArrayInput)(nil)).Elem(), SidecarResourceLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SidecarResourceLinkMapInput)(nil)).Elem(), SidecarResourceLinkMap{})
	pulumi.RegisterOutputType(SidecarResourceLinkOutput{})
	pulumi.RegisterOutputType(SidecarResourceLinkArrayOutput{})
	pulumi.RegisterOutputType(SidecarResourceLinkMapOutput{})
}
