// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Resource Hostname with Formal.
type ResourceHostname struct {
	pulumi.CustomResourceState

	// The hostname for this Resource hostname.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The name of this Resource Hostname.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Resource this hostname is linked to.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// If set to true, this resource hostname cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewResourceHostname registers a new resource with the given unique name, arguments, and options.
func NewResourceHostname(ctx *pulumi.Context,
	name string, args *ResourceHostnameArgs, opts ...pulumi.ResourceOption) (*ResourceHostname, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceHostname
	err := ctx.RegisterResource("formal:index/resourceHostname:ResourceHostname", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceHostname gets an existing ResourceHostname resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceHostname(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceHostnameState, opts ...pulumi.ResourceOption) (*ResourceHostname, error) {
	var resource ResourceHostname
	err := ctx.ReadResource("formal:index/resourceHostname:ResourceHostname", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceHostname resources.
type resourceHostnameState struct {
	// The hostname for this Resource hostname.
	Hostname *string `pulumi:"hostname"`
	// The name of this Resource Hostname.
	Name *string `pulumi:"name"`
	// The ID of the Resource this hostname is linked to.
	ResourceId *string `pulumi:"resourceId"`
	// If set to true, this resource hostname cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type ResourceHostnameState struct {
	// The hostname for this Resource hostname.
	Hostname pulumi.StringPtrInput
	// The name of this Resource Hostname.
	Name pulumi.StringPtrInput
	// The ID of the Resource this hostname is linked to.
	ResourceId pulumi.StringPtrInput
	// If set to true, this resource hostname cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ResourceHostnameState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceHostnameState)(nil)).Elem()
}

type resourceHostnameArgs struct {
	// The hostname for this Resource hostname.
	Hostname string `pulumi:"hostname"`
	// The name of this Resource Hostname.
	Name *string `pulumi:"name"`
	// The ID of the Resource this hostname is linked to.
	ResourceId string `pulumi:"resourceId"`
	// If set to true, this resource hostname cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a ResourceHostname resource.
type ResourceHostnameArgs struct {
	// The hostname for this Resource hostname.
	Hostname pulumi.StringInput
	// The name of this Resource Hostname.
	Name pulumi.StringPtrInput
	// The ID of the Resource this hostname is linked to.
	ResourceId pulumi.StringInput
	// If set to true, this resource hostname cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ResourceHostnameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceHostnameArgs)(nil)).Elem()
}

type ResourceHostnameInput interface {
	pulumi.Input

	ToResourceHostnameOutput() ResourceHostnameOutput
	ToResourceHostnameOutputWithContext(ctx context.Context) ResourceHostnameOutput
}

func (*ResourceHostname) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHostname)(nil)).Elem()
}

func (i *ResourceHostname) ToResourceHostnameOutput() ResourceHostnameOutput {
	return i.ToResourceHostnameOutputWithContext(context.Background())
}

func (i *ResourceHostname) ToResourceHostnameOutputWithContext(ctx context.Context) ResourceHostnameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHostnameOutput)
}

// ResourceHostnameArrayInput is an input type that accepts ResourceHostnameArray and ResourceHostnameArrayOutput values.
// You can construct a concrete instance of `ResourceHostnameArrayInput` via:
//
//	ResourceHostnameArray{ ResourceHostnameArgs{...} }
type ResourceHostnameArrayInput interface {
	pulumi.Input

	ToResourceHostnameArrayOutput() ResourceHostnameArrayOutput
	ToResourceHostnameArrayOutputWithContext(context.Context) ResourceHostnameArrayOutput
}

type ResourceHostnameArray []ResourceHostnameInput

func (ResourceHostnameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceHostname)(nil)).Elem()
}

func (i ResourceHostnameArray) ToResourceHostnameArrayOutput() ResourceHostnameArrayOutput {
	return i.ToResourceHostnameArrayOutputWithContext(context.Background())
}

func (i ResourceHostnameArray) ToResourceHostnameArrayOutputWithContext(ctx context.Context) ResourceHostnameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHostnameArrayOutput)
}

// ResourceHostnameMapInput is an input type that accepts ResourceHostnameMap and ResourceHostnameMapOutput values.
// You can construct a concrete instance of `ResourceHostnameMapInput` via:
//
//	ResourceHostnameMap{ "key": ResourceHostnameArgs{...} }
type ResourceHostnameMapInput interface {
	pulumi.Input

	ToResourceHostnameMapOutput() ResourceHostnameMapOutput
	ToResourceHostnameMapOutputWithContext(context.Context) ResourceHostnameMapOutput
}

type ResourceHostnameMap map[string]ResourceHostnameInput

func (ResourceHostnameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceHostname)(nil)).Elem()
}

func (i ResourceHostnameMap) ToResourceHostnameMapOutput() ResourceHostnameMapOutput {
	return i.ToResourceHostnameMapOutputWithContext(context.Background())
}

func (i ResourceHostnameMap) ToResourceHostnameMapOutputWithContext(ctx context.Context) ResourceHostnameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHostnameMapOutput)
}

type ResourceHostnameOutput struct{ *pulumi.OutputState }

func (ResourceHostnameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHostname)(nil)).Elem()
}

func (o ResourceHostnameOutput) ToResourceHostnameOutput() ResourceHostnameOutput {
	return o
}

func (o ResourceHostnameOutput) ToResourceHostnameOutputWithContext(ctx context.Context) ResourceHostnameOutput {
	return o
}

// The hostname for this Resource hostname.
func (o ResourceHostnameOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceHostname) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// The name of this Resource Hostname.
func (o ResourceHostnameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceHostname) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Resource this hostname is linked to.
func (o ResourceHostnameOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceHostname) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// If set to true, this resource hostname cannot be deleted.
func (o ResourceHostnameOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceHostname) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type ResourceHostnameArrayOutput struct{ *pulumi.OutputState }

func (ResourceHostnameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceHostname)(nil)).Elem()
}

func (o ResourceHostnameArrayOutput) ToResourceHostnameArrayOutput() ResourceHostnameArrayOutput {
	return o
}

func (o ResourceHostnameArrayOutput) ToResourceHostnameArrayOutputWithContext(ctx context.Context) ResourceHostnameArrayOutput {
	return o
}

func (o ResourceHostnameArrayOutput) Index(i pulumi.IntInput) ResourceHostnameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceHostname {
		return vs[0].([]*ResourceHostname)[vs[1].(int)]
	}).(ResourceHostnameOutput)
}

type ResourceHostnameMapOutput struct{ *pulumi.OutputState }

func (ResourceHostnameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceHostname)(nil)).Elem()
}

func (o ResourceHostnameMapOutput) ToResourceHostnameMapOutput() ResourceHostnameMapOutput {
	return o
}

func (o ResourceHostnameMapOutput) ToResourceHostnameMapOutputWithContext(ctx context.Context) ResourceHostnameMapOutput {
	return o
}

func (o ResourceHostnameMapOutput) MapIndex(k pulumi.StringInput) ResourceHostnameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceHostname {
		return vs[0].(map[string]*ResourceHostname)[vs[1].(string)]
	}).(ResourceHostnameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHostnameInput)(nil)).Elem(), &ResourceHostname{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHostnameArrayInput)(nil)).Elem(), ResourceHostnameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHostnameMapInput)(nil)).Elem(), ResourceHostnameMap{})
	pulumi.RegisterOutputType(ResourceHostnameOutput{})
	pulumi.RegisterOutputType(ResourceHostnameArrayOutput{})
	pulumi.RegisterOutputType(ResourceHostnameMapOutput{})
}
