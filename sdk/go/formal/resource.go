// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Resource with Formal.
type Resource struct {
	pulumi.CustomResourceState

	// Creation time of the Resource.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Environment pulumi.StringPtrOutput `pulumi:"environment"`
	// Hostname of the Resource.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Friendly name for the Resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The port your Resource is listening on.
	Port pulumi.IntOutput `pulumi:"port"`
	// The ID of the Space to create the Resource in.
	SpaceId pulumi.StringPtrOutput `pulumi:"spaceId"`
	// Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
	Technology pulumi.StringOutput `pulumi:"technology"`
	// For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
	TechnologyProvider pulumi.StringPtrOutput `pulumi:"technologyProvider"`
	// If set to true, the Resource cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Technology == nil {
		return nil, errors.New("invalid value for required argument 'Technology'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("formal:index/resource:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("formal:index/resource:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
	// Creation time of the Resource.
	CreatedAt *int `pulumi:"createdAt"`
	// Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Environment *string `pulumi:"environment"`
	// Hostname of the Resource.
	Hostname *string `pulumi:"hostname"`
	// Friendly name for the Resource.
	Name *string `pulumi:"name"`
	// The port your Resource is listening on.
	Port *int `pulumi:"port"`
	// The ID of the Space to create the Resource in.
	SpaceId *string `pulumi:"spaceId"`
	// Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
	Technology *string `pulumi:"technology"`
	// For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
	TechnologyProvider *string `pulumi:"technologyProvider"`
	// If set to true, the Resource cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type ResourceState struct {
	// Creation time of the Resource.
	CreatedAt pulumi.IntPtrInput
	// Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Environment pulumi.StringPtrInput
	// Hostname of the Resource.
	Hostname pulumi.StringPtrInput
	// Friendly name for the Resource.
	Name pulumi.StringPtrInput
	// The port your Resource is listening on.
	Port pulumi.IntPtrInput
	// The ID of the Space to create the Resource in.
	SpaceId pulumi.StringPtrInput
	// Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
	Technology pulumi.StringPtrInput
	// For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
	TechnologyProvider pulumi.StringPtrInput
	// If set to true, the Resource cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	// Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Environment *string `pulumi:"environment"`
	// Hostname of the Resource.
	Hostname string `pulumi:"hostname"`
	// Friendly name for the Resource.
	Name *string `pulumi:"name"`
	// The port your Resource is listening on.
	Port int `pulumi:"port"`
	// The ID of the Space to create the Resource in.
	SpaceId *string `pulumi:"spaceId"`
	// Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
	Technology string `pulumi:"technology"`
	// For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
	TechnologyProvider *string `pulumi:"technologyProvider"`
	// If set to true, the Resource cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	// Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
	//
	// Deprecated: This field is deprecated and will be removed in a future release.
	Environment pulumi.StringPtrInput
	// Hostname of the Resource.
	Hostname pulumi.StringInput
	// Friendly name for the Resource.
	Name pulumi.StringPtrInput
	// The port your Resource is listening on.
	Port pulumi.IntInput
	// The ID of the Space to create the Resource in.
	SpaceId pulumi.StringPtrInput
	// Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
	Technology pulumi.StringInput
	// For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
	TechnologyProvider pulumi.StringPtrInput
	// If set to true, the Resource cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(ctx context.Context) ResourceOutput
}

func (*Resource) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *Resource) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i *Resource) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

// ResourceArrayInput is an input type that accepts ResourceArray and ResourceArrayOutput values.
// You can construct a concrete instance of `ResourceArrayInput` via:
//
//	ResourceArray{ ResourceArgs{...} }
type ResourceArrayInput interface {
	pulumi.Input

	ToResourceArrayOutput() ResourceArrayOutput
	ToResourceArrayOutputWithContext(context.Context) ResourceArrayOutput
}

type ResourceArray []ResourceInput

func (ResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (i ResourceArray) ToResourceArrayOutput() ResourceArrayOutput {
	return i.ToResourceArrayOutputWithContext(context.Background())
}

func (i ResourceArray) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceArrayOutput)
}

// ResourceMapInput is an input type that accepts ResourceMap and ResourceMapOutput values.
// You can construct a concrete instance of `ResourceMapInput` via:
//
//	ResourceMap{ "key": ResourceArgs{...} }
type ResourceMapInput interface {
	pulumi.Input

	ToResourceMapOutput() ResourceMapOutput
	ToResourceMapOutputWithContext(context.Context) ResourceMapOutput
}

type ResourceMap map[string]ResourceInput

func (ResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (i ResourceMap) ToResourceMapOutput() ResourceMapOutput {
	return i.ToResourceMapOutputWithContext(context.Background())
}

func (i ResourceMap) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceMapOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

// Creation time of the Resource.
func (o ResourceOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
//
// Deprecated: This field is deprecated and will be removed in a future release.
func (o ResourceOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

// Hostname of the Resource.
func (o ResourceOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Friendly name for the Resource.
func (o ResourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The port your Resource is listening on.
func (o ResourceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The ID of the Space to create the Resource in.
func (o ResourceOutput) SpaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.SpaceId }).(pulumi.StringPtrOutput)
}

// Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
func (o ResourceOutput) Technology() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.Technology }).(pulumi.StringOutput)
}

// For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
func (o ResourceOutput) TechnologyProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringPtrOutput { return v.TechnologyProvider }).(pulumi.StringPtrOutput)
}

// If set to true, the Resource cannot be deleted.
func (o ResourceOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Resource) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type ResourceArrayOutput struct{ *pulumi.OutputState }

func (ResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Resource)(nil)).Elem()
}

func (o ResourceArrayOutput) ToResourceArrayOutput() ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) ToResourceArrayOutputWithContext(ctx context.Context) ResourceArrayOutput {
	return o
}

func (o ResourceArrayOutput) Index(i pulumi.IntInput) ResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].([]*Resource)[vs[1].(int)]
	}).(ResourceOutput)
}

type ResourceMapOutput struct{ *pulumi.OutputState }

func (ResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Resource)(nil)).Elem()
}

func (o ResourceMapOutput) ToResourceMapOutput() ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) ToResourceMapOutputWithContext(ctx context.Context) ResourceMapOutput {
	return o
}

func (o ResourceMapOutput) MapIndex(k pulumi.StringInput) ResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Resource {
		return vs[0].(map[string]*Resource)[vs[1].(string)]
	}).(ResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), &Resource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceArrayInput)(nil)).Elem(), ResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceMapInput)(nil)).Elem(), ResourceMap{})
	pulumi.RegisterOutputType(ResourceOutput{})
	pulumi.RegisterOutputType(ResourceArrayOutput{})
	pulumi.RegisterOutputType(ResourceMapOutput{})
}
