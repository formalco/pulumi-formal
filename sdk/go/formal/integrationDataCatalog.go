// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a Data Catalog integration.
type IntegrationDataCatalog struct {
	pulumi.CustomResourceState

	// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
	Datahub IntegrationDataCatalogDatahubPtrOutput `pulumi:"datahub"`
	// Name of the Integration
	Name pulumi.StringOutput `pulumi:"name"`
	// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
	SyncDirection pulumi.StringOutput `pulumi:"syncDirection"`
	// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
	SyncedEntities pulumi.StringArrayOutput `pulumi:"syncedEntities"`
}

// NewIntegrationDataCatalog registers a new resource with the given unique name, arguments, and options.
func NewIntegrationDataCatalog(ctx *pulumi.Context,
	name string, args *IntegrationDataCatalogArgs, opts ...pulumi.ResourceOption) (*IntegrationDataCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SyncDirection == nil {
		return nil, errors.New("invalid value for required argument 'SyncDirection'")
	}
	if args.SyncedEntities == nil {
		return nil, errors.New("invalid value for required argument 'SyncedEntities'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IntegrationDataCatalog
	err := ctx.RegisterResource("formal:index/integrationDataCatalog:IntegrationDataCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationDataCatalog gets an existing IntegrationDataCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationDataCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationDataCatalogState, opts ...pulumi.ResourceOption) (*IntegrationDataCatalog, error) {
	var resource IntegrationDataCatalog
	err := ctx.ReadResource("formal:index/integrationDataCatalog:IntegrationDataCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationDataCatalog resources.
type integrationDataCatalogState struct {
	// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
	Datahub *IntegrationDataCatalogDatahub `pulumi:"datahub"`
	// Name of the Integration
	Name *string `pulumi:"name"`
	// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
	SyncDirection *string `pulumi:"syncDirection"`
	// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
	SyncedEntities []string `pulumi:"syncedEntities"`
}

type IntegrationDataCatalogState struct {
	// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
	Datahub IntegrationDataCatalogDatahubPtrInput
	// Name of the Integration
	Name pulumi.StringPtrInput
	// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
	SyncDirection pulumi.StringPtrInput
	// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
	SyncedEntities pulumi.StringArrayInput
}

func (IntegrationDataCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationDataCatalogState)(nil)).Elem()
}

type integrationDataCatalogArgs struct {
	// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
	Datahub *IntegrationDataCatalogDatahub `pulumi:"datahub"`
	// Name of the Integration
	Name *string `pulumi:"name"`
	// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
	SyncDirection string `pulumi:"syncDirection"`
	// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
	SyncedEntities []string `pulumi:"syncedEntities"`
}

// The set of arguments for constructing a IntegrationDataCatalog resource.
type IntegrationDataCatalogArgs struct {
	// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
	Datahub IntegrationDataCatalogDatahubPtrInput
	// Name of the Integration
	Name pulumi.StringPtrInput
	// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
	SyncDirection pulumi.StringInput
	// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
	SyncedEntities pulumi.StringArrayInput
}

func (IntegrationDataCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationDataCatalogArgs)(nil)).Elem()
}

type IntegrationDataCatalogInput interface {
	pulumi.Input

	ToIntegrationDataCatalogOutput() IntegrationDataCatalogOutput
	ToIntegrationDataCatalogOutputWithContext(ctx context.Context) IntegrationDataCatalogOutput
}

func (*IntegrationDataCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationDataCatalog)(nil)).Elem()
}

func (i *IntegrationDataCatalog) ToIntegrationDataCatalogOutput() IntegrationDataCatalogOutput {
	return i.ToIntegrationDataCatalogOutputWithContext(context.Background())
}

func (i *IntegrationDataCatalog) ToIntegrationDataCatalogOutputWithContext(ctx context.Context) IntegrationDataCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationDataCatalogOutput)
}

// IntegrationDataCatalogArrayInput is an input type that accepts IntegrationDataCatalogArray and IntegrationDataCatalogArrayOutput values.
// You can construct a concrete instance of `IntegrationDataCatalogArrayInput` via:
//
//	IntegrationDataCatalogArray{ IntegrationDataCatalogArgs{...} }
type IntegrationDataCatalogArrayInput interface {
	pulumi.Input

	ToIntegrationDataCatalogArrayOutput() IntegrationDataCatalogArrayOutput
	ToIntegrationDataCatalogArrayOutputWithContext(context.Context) IntegrationDataCatalogArrayOutput
}

type IntegrationDataCatalogArray []IntegrationDataCatalogInput

func (IntegrationDataCatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationDataCatalog)(nil)).Elem()
}

func (i IntegrationDataCatalogArray) ToIntegrationDataCatalogArrayOutput() IntegrationDataCatalogArrayOutput {
	return i.ToIntegrationDataCatalogArrayOutputWithContext(context.Background())
}

func (i IntegrationDataCatalogArray) ToIntegrationDataCatalogArrayOutputWithContext(ctx context.Context) IntegrationDataCatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationDataCatalogArrayOutput)
}

// IntegrationDataCatalogMapInput is an input type that accepts IntegrationDataCatalogMap and IntegrationDataCatalogMapOutput values.
// You can construct a concrete instance of `IntegrationDataCatalogMapInput` via:
//
//	IntegrationDataCatalogMap{ "key": IntegrationDataCatalogArgs{...} }
type IntegrationDataCatalogMapInput interface {
	pulumi.Input

	ToIntegrationDataCatalogMapOutput() IntegrationDataCatalogMapOutput
	ToIntegrationDataCatalogMapOutputWithContext(context.Context) IntegrationDataCatalogMapOutput
}

type IntegrationDataCatalogMap map[string]IntegrationDataCatalogInput

func (IntegrationDataCatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationDataCatalog)(nil)).Elem()
}

func (i IntegrationDataCatalogMap) ToIntegrationDataCatalogMapOutput() IntegrationDataCatalogMapOutput {
	return i.ToIntegrationDataCatalogMapOutputWithContext(context.Background())
}

func (i IntegrationDataCatalogMap) ToIntegrationDataCatalogMapOutputWithContext(ctx context.Context) IntegrationDataCatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationDataCatalogMapOutput)
}

type IntegrationDataCatalogOutput struct{ *pulumi.OutputState }

func (IntegrationDataCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IntegrationDataCatalog)(nil)).Elem()
}

func (o IntegrationDataCatalogOutput) ToIntegrationDataCatalogOutput() IntegrationDataCatalogOutput {
	return o
}

func (o IntegrationDataCatalogOutput) ToIntegrationDataCatalogOutputWithContext(ctx context.Context) IntegrationDataCatalogOutput {
	return o
}

// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
func (o IntegrationDataCatalogOutput) Datahub() IntegrationDataCatalogDatahubPtrOutput {
	return o.ApplyT(func(v *IntegrationDataCatalog) IntegrationDataCatalogDatahubPtrOutput { return v.Datahub }).(IntegrationDataCatalogDatahubPtrOutput)
}

// Name of the Integration
func (o IntegrationDataCatalogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDataCatalog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
func (o IntegrationDataCatalogOutput) SyncDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *IntegrationDataCatalog) pulumi.StringOutput { return v.SyncDirection }).(pulumi.StringOutput)
}

// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
func (o IntegrationDataCatalogOutput) SyncedEntities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IntegrationDataCatalog) pulumi.StringArrayOutput { return v.SyncedEntities }).(pulumi.StringArrayOutput)
}

type IntegrationDataCatalogArrayOutput struct{ *pulumi.OutputState }

func (IntegrationDataCatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IntegrationDataCatalog)(nil)).Elem()
}

func (o IntegrationDataCatalogArrayOutput) ToIntegrationDataCatalogArrayOutput() IntegrationDataCatalogArrayOutput {
	return o
}

func (o IntegrationDataCatalogArrayOutput) ToIntegrationDataCatalogArrayOutputWithContext(ctx context.Context) IntegrationDataCatalogArrayOutput {
	return o
}

func (o IntegrationDataCatalogArrayOutput) Index(i pulumi.IntInput) IntegrationDataCatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IntegrationDataCatalog {
		return vs[0].([]*IntegrationDataCatalog)[vs[1].(int)]
	}).(IntegrationDataCatalogOutput)
}

type IntegrationDataCatalogMapOutput struct{ *pulumi.OutputState }

func (IntegrationDataCatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IntegrationDataCatalog)(nil)).Elem()
}

func (o IntegrationDataCatalogMapOutput) ToIntegrationDataCatalogMapOutput() IntegrationDataCatalogMapOutput {
	return o
}

func (o IntegrationDataCatalogMapOutput) ToIntegrationDataCatalogMapOutputWithContext(ctx context.Context) IntegrationDataCatalogMapOutput {
	return o
}

func (o IntegrationDataCatalogMapOutput) MapIndex(k pulumi.StringInput) IntegrationDataCatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IntegrationDataCatalog {
		return vs[0].(map[string]*IntegrationDataCatalog)[vs[1].(string)]
	}).(IntegrationDataCatalogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationDataCatalogInput)(nil)).Elem(), &IntegrationDataCatalog{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationDataCatalogArrayInput)(nil)).Elem(), IntegrationDataCatalogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationDataCatalogMapInput)(nil)).Elem(), IntegrationDataCatalogMap{})
	pulumi.RegisterOutputType(IntegrationDataCatalogOutput{})
	pulumi.RegisterOutputType(IntegrationDataCatalogArrayOutput{})
	pulumi.RegisterOutputType(IntegrationDataCatalogMapOutput{})
}
