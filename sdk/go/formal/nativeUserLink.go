// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource creates assigns a Native User to a Formal Identity.
type NativeUserLink struct {
	pulumi.CustomResourceState

	// The Formal ID for the User, Group, or Resource Hostname to be linked.
	FormalIdentityId pulumi.StringOutput `pulumi:"formalIdentityId"`
	// The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
	FormalIdentityType pulumi.StringOutput `pulumi:"formalIdentityType"`
	// The Native User ID of the Native User.
	NativeUserId pulumi.StringOutput `pulumi:"nativeUserId"`
	// The Resource ID of the Native User.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// If set to true, this Native User link cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewNativeUserLink registers a new resource with the given unique name, arguments, and options.
func NewNativeUserLink(ctx *pulumi.Context,
	name string, args *NativeUserLinkArgs, opts ...pulumi.ResourceOption) (*NativeUserLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FormalIdentityId == nil {
		return nil, errors.New("invalid value for required argument 'FormalIdentityId'")
	}
	if args.FormalIdentityType == nil {
		return nil, errors.New("invalid value for required argument 'FormalIdentityType'")
	}
	if args.NativeUserId == nil {
		return nil, errors.New("invalid value for required argument 'NativeUserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NativeUserLink
	err := ctx.RegisterResource("formal:index/nativeUserLink:NativeUserLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNativeUserLink gets an existing NativeUserLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNativeUserLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NativeUserLinkState, opts ...pulumi.ResourceOption) (*NativeUserLink, error) {
	var resource NativeUserLink
	err := ctx.ReadResource("formal:index/nativeUserLink:NativeUserLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NativeUserLink resources.
type nativeUserLinkState struct {
	// The Formal ID for the User, Group, or Resource Hostname to be linked.
	FormalIdentityId *string `pulumi:"formalIdentityId"`
	// The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
	FormalIdentityType *string `pulumi:"formalIdentityType"`
	// The Native User ID of the Native User.
	NativeUserId *string `pulumi:"nativeUserId"`
	// The Resource ID of the Native User.
	ResourceId *string `pulumi:"resourceId"`
	// If set to true, this Native User link cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type NativeUserLinkState struct {
	// The Formal ID for the User, Group, or Resource Hostname to be linked.
	FormalIdentityId pulumi.StringPtrInput
	// The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
	FormalIdentityType pulumi.StringPtrInput
	// The Native User ID of the Native User.
	NativeUserId pulumi.StringPtrInput
	// The Resource ID of the Native User.
	ResourceId pulumi.StringPtrInput
	// If set to true, this Native User link cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (NativeUserLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*nativeUserLinkState)(nil)).Elem()
}

type nativeUserLinkArgs struct {
	// The Formal ID for the User, Group, or Resource Hostname to be linked.
	FormalIdentityId string `pulumi:"formalIdentityId"`
	// The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
	FormalIdentityType string `pulumi:"formalIdentityType"`
	// The Native User ID of the Native User.
	NativeUserId string `pulumi:"nativeUserId"`
	// If set to true, this Native User link cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a NativeUserLink resource.
type NativeUserLinkArgs struct {
	// The Formal ID for the User, Group, or Resource Hostname to be linked.
	FormalIdentityId pulumi.StringInput
	// The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
	FormalIdentityType pulumi.StringInput
	// The Native User ID of the Native User.
	NativeUserId pulumi.StringInput
	// If set to true, this Native User link cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (NativeUserLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nativeUserLinkArgs)(nil)).Elem()
}

type NativeUserLinkInput interface {
	pulumi.Input

	ToNativeUserLinkOutput() NativeUserLinkOutput
	ToNativeUserLinkOutputWithContext(ctx context.Context) NativeUserLinkOutput
}

func (*NativeUserLink) ElementType() reflect.Type {
	return reflect.TypeOf((**NativeUserLink)(nil)).Elem()
}

func (i *NativeUserLink) ToNativeUserLinkOutput() NativeUserLinkOutput {
	return i.ToNativeUserLinkOutputWithContext(context.Background())
}

func (i *NativeUserLink) ToNativeUserLinkOutputWithContext(ctx context.Context) NativeUserLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NativeUserLinkOutput)
}

// NativeUserLinkArrayInput is an input type that accepts NativeUserLinkArray and NativeUserLinkArrayOutput values.
// You can construct a concrete instance of `NativeUserLinkArrayInput` via:
//
//	NativeUserLinkArray{ NativeUserLinkArgs{...} }
type NativeUserLinkArrayInput interface {
	pulumi.Input

	ToNativeUserLinkArrayOutput() NativeUserLinkArrayOutput
	ToNativeUserLinkArrayOutputWithContext(context.Context) NativeUserLinkArrayOutput
}

type NativeUserLinkArray []NativeUserLinkInput

func (NativeUserLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NativeUserLink)(nil)).Elem()
}

func (i NativeUserLinkArray) ToNativeUserLinkArrayOutput() NativeUserLinkArrayOutput {
	return i.ToNativeUserLinkArrayOutputWithContext(context.Background())
}

func (i NativeUserLinkArray) ToNativeUserLinkArrayOutputWithContext(ctx context.Context) NativeUserLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NativeUserLinkArrayOutput)
}

// NativeUserLinkMapInput is an input type that accepts NativeUserLinkMap and NativeUserLinkMapOutput values.
// You can construct a concrete instance of `NativeUserLinkMapInput` via:
//
//	NativeUserLinkMap{ "key": NativeUserLinkArgs{...} }
type NativeUserLinkMapInput interface {
	pulumi.Input

	ToNativeUserLinkMapOutput() NativeUserLinkMapOutput
	ToNativeUserLinkMapOutputWithContext(context.Context) NativeUserLinkMapOutput
}

type NativeUserLinkMap map[string]NativeUserLinkInput

func (NativeUserLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NativeUserLink)(nil)).Elem()
}

func (i NativeUserLinkMap) ToNativeUserLinkMapOutput() NativeUserLinkMapOutput {
	return i.ToNativeUserLinkMapOutputWithContext(context.Background())
}

func (i NativeUserLinkMap) ToNativeUserLinkMapOutputWithContext(ctx context.Context) NativeUserLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NativeUserLinkMapOutput)
}

type NativeUserLinkOutput struct{ *pulumi.OutputState }

func (NativeUserLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NativeUserLink)(nil)).Elem()
}

func (o NativeUserLinkOutput) ToNativeUserLinkOutput() NativeUserLinkOutput {
	return o
}

func (o NativeUserLinkOutput) ToNativeUserLinkOutputWithContext(ctx context.Context) NativeUserLinkOutput {
	return o
}

// The Formal ID for the User, Group, or Resource Hostname to be linked.
func (o NativeUserLinkOutput) FormalIdentityId() pulumi.StringOutput {
	return o.ApplyT(func(v *NativeUserLink) pulumi.StringOutput { return v.FormalIdentityId }).(pulumi.StringOutput)
}

// The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
func (o NativeUserLinkOutput) FormalIdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v *NativeUserLink) pulumi.StringOutput { return v.FormalIdentityType }).(pulumi.StringOutput)
}

// The Native User ID of the Native User.
func (o NativeUserLinkOutput) NativeUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *NativeUserLink) pulumi.StringOutput { return v.NativeUserId }).(pulumi.StringOutput)
}

// The Resource ID of the Native User.
func (o NativeUserLinkOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NativeUserLink) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// If set to true, this Native User link cannot be deleted.
func (o NativeUserLinkOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NativeUserLink) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type NativeUserLinkArrayOutput struct{ *pulumi.OutputState }

func (NativeUserLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NativeUserLink)(nil)).Elem()
}

func (o NativeUserLinkArrayOutput) ToNativeUserLinkArrayOutput() NativeUserLinkArrayOutput {
	return o
}

func (o NativeUserLinkArrayOutput) ToNativeUserLinkArrayOutputWithContext(ctx context.Context) NativeUserLinkArrayOutput {
	return o
}

func (o NativeUserLinkArrayOutput) Index(i pulumi.IntInput) NativeUserLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NativeUserLink {
		return vs[0].([]*NativeUserLink)[vs[1].(int)]
	}).(NativeUserLinkOutput)
}

type NativeUserLinkMapOutput struct{ *pulumi.OutputState }

func (NativeUserLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NativeUserLink)(nil)).Elem()
}

func (o NativeUserLinkMapOutput) ToNativeUserLinkMapOutput() NativeUserLinkMapOutput {
	return o
}

func (o NativeUserLinkMapOutput) ToNativeUserLinkMapOutputWithContext(ctx context.Context) NativeUserLinkMapOutput {
	return o
}

func (o NativeUserLinkMapOutput) MapIndex(k pulumi.StringInput) NativeUserLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NativeUserLink {
		return vs[0].(map[string]*NativeUserLink)[vs[1].(string)]
	}).(NativeUserLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NativeUserLinkInput)(nil)).Elem(), &NativeUserLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*NativeUserLinkArrayInput)(nil)).Elem(), NativeUserLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NativeUserLinkMapInput)(nil)).Elem(), NativeUserLinkMap{})
	pulumi.RegisterOutputType(NativeUserLinkOutput{})
	pulumi.RegisterOutputType(NativeUserLinkArrayOutput{})
	pulumi.RegisterOutputType(NativeUserLinkMapOutput{})
}
