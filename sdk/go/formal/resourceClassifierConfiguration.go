// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Resource Classifier Configuration is a configuration for a resource classifier.
type ResourceClassifierConfiguration struct {
	pulumi.CustomResourceState

	// The timestamp of the Resource Classifier Preference creation.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
	Preference pulumi.StringOutput `pulumi:"preference"`
	// The ID of the Resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The timestamp of the Resource Classifier Preference update.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewResourceClassifierConfiguration registers a new resource with the given unique name, arguments, and options.
func NewResourceClassifierConfiguration(ctx *pulumi.Context,
	name string, args *ResourceClassifierConfigurationArgs, opts ...pulumi.ResourceOption) (*ResourceClassifierConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Preference == nil {
		return nil, errors.New("invalid value for required argument 'Preference'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceClassifierConfiguration
	err := ctx.RegisterResource("formal:index/resourceClassifierConfiguration:ResourceClassifierConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceClassifierConfiguration gets an existing ResourceClassifierConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceClassifierConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceClassifierConfigurationState, opts ...pulumi.ResourceOption) (*ResourceClassifierConfiguration, error) {
	var resource ResourceClassifierConfiguration
	err := ctx.ReadResource("formal:index/resourceClassifierConfiguration:ResourceClassifierConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceClassifierConfiguration resources.
type resourceClassifierConfigurationState struct {
	// The timestamp of the Resource Classifier Preference creation.
	CreatedAt *int `pulumi:"createdAt"`
	// The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
	Preference *string `pulumi:"preference"`
	// The ID of the Resource.
	ResourceId *string `pulumi:"resourceId"`
	// The timestamp of the Resource Classifier Preference update.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type ResourceClassifierConfigurationState struct {
	// The timestamp of the Resource Classifier Preference creation.
	CreatedAt pulumi.IntPtrInput
	// The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
	Preference pulumi.StringPtrInput
	// The ID of the Resource.
	ResourceId pulumi.StringPtrInput
	// The timestamp of the Resource Classifier Preference update.
	UpdatedAt pulumi.IntPtrInput
}

func (ResourceClassifierConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceClassifierConfigurationState)(nil)).Elem()
}

type resourceClassifierConfigurationArgs struct {
	// The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
	Preference string `pulumi:"preference"`
	// The ID of the Resource.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a ResourceClassifierConfiguration resource.
type ResourceClassifierConfigurationArgs struct {
	// The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
	Preference pulumi.StringInput
	// The ID of the Resource.
	ResourceId pulumi.StringInput
}

func (ResourceClassifierConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceClassifierConfigurationArgs)(nil)).Elem()
}

type ResourceClassifierConfigurationInput interface {
	pulumi.Input

	ToResourceClassifierConfigurationOutput() ResourceClassifierConfigurationOutput
	ToResourceClassifierConfigurationOutputWithContext(ctx context.Context) ResourceClassifierConfigurationOutput
}

func (*ResourceClassifierConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassifierConfiguration)(nil)).Elem()
}

func (i *ResourceClassifierConfiguration) ToResourceClassifierConfigurationOutput() ResourceClassifierConfigurationOutput {
	return i.ToResourceClassifierConfigurationOutputWithContext(context.Background())
}

func (i *ResourceClassifierConfiguration) ToResourceClassifierConfigurationOutputWithContext(ctx context.Context) ResourceClassifierConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassifierConfigurationOutput)
}

// ResourceClassifierConfigurationArrayInput is an input type that accepts ResourceClassifierConfigurationArray and ResourceClassifierConfigurationArrayOutput values.
// You can construct a concrete instance of `ResourceClassifierConfigurationArrayInput` via:
//
//	ResourceClassifierConfigurationArray{ ResourceClassifierConfigurationArgs{...} }
type ResourceClassifierConfigurationArrayInput interface {
	pulumi.Input

	ToResourceClassifierConfigurationArrayOutput() ResourceClassifierConfigurationArrayOutput
	ToResourceClassifierConfigurationArrayOutputWithContext(context.Context) ResourceClassifierConfigurationArrayOutput
}

type ResourceClassifierConfigurationArray []ResourceClassifierConfigurationInput

func (ResourceClassifierConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceClassifierConfiguration)(nil)).Elem()
}

func (i ResourceClassifierConfigurationArray) ToResourceClassifierConfigurationArrayOutput() ResourceClassifierConfigurationArrayOutput {
	return i.ToResourceClassifierConfigurationArrayOutputWithContext(context.Background())
}

func (i ResourceClassifierConfigurationArray) ToResourceClassifierConfigurationArrayOutputWithContext(ctx context.Context) ResourceClassifierConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassifierConfigurationArrayOutput)
}

// ResourceClassifierConfigurationMapInput is an input type that accepts ResourceClassifierConfigurationMap and ResourceClassifierConfigurationMapOutput values.
// You can construct a concrete instance of `ResourceClassifierConfigurationMapInput` via:
//
//	ResourceClassifierConfigurationMap{ "key": ResourceClassifierConfigurationArgs{...} }
type ResourceClassifierConfigurationMapInput interface {
	pulumi.Input

	ToResourceClassifierConfigurationMapOutput() ResourceClassifierConfigurationMapOutput
	ToResourceClassifierConfigurationMapOutputWithContext(context.Context) ResourceClassifierConfigurationMapOutput
}

type ResourceClassifierConfigurationMap map[string]ResourceClassifierConfigurationInput

func (ResourceClassifierConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceClassifierConfiguration)(nil)).Elem()
}

func (i ResourceClassifierConfigurationMap) ToResourceClassifierConfigurationMapOutput() ResourceClassifierConfigurationMapOutput {
	return i.ToResourceClassifierConfigurationMapOutputWithContext(context.Background())
}

func (i ResourceClassifierConfigurationMap) ToResourceClassifierConfigurationMapOutputWithContext(ctx context.Context) ResourceClassifierConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceClassifierConfigurationMapOutput)
}

type ResourceClassifierConfigurationOutput struct{ *pulumi.OutputState }

func (ResourceClassifierConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceClassifierConfiguration)(nil)).Elem()
}

func (o ResourceClassifierConfigurationOutput) ToResourceClassifierConfigurationOutput() ResourceClassifierConfigurationOutput {
	return o
}

func (o ResourceClassifierConfigurationOutput) ToResourceClassifierConfigurationOutputWithContext(ctx context.Context) ResourceClassifierConfigurationOutput {
	return o
}

// The timestamp of the Resource Classifier Preference creation.
func (o ResourceClassifierConfigurationOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceClassifierConfiguration) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// The preference. Supported values are `nlp`, `llm`, `both`, and `none`.
func (o ResourceClassifierConfigurationOutput) Preference() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceClassifierConfiguration) pulumi.StringOutput { return v.Preference }).(pulumi.StringOutput)
}

// The ID of the Resource.
func (o ResourceClassifierConfigurationOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceClassifierConfiguration) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The timestamp of the Resource Classifier Preference update.
func (o ResourceClassifierConfigurationOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *ResourceClassifierConfiguration) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type ResourceClassifierConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ResourceClassifierConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceClassifierConfiguration)(nil)).Elem()
}

func (o ResourceClassifierConfigurationArrayOutput) ToResourceClassifierConfigurationArrayOutput() ResourceClassifierConfigurationArrayOutput {
	return o
}

func (o ResourceClassifierConfigurationArrayOutput) ToResourceClassifierConfigurationArrayOutputWithContext(ctx context.Context) ResourceClassifierConfigurationArrayOutput {
	return o
}

func (o ResourceClassifierConfigurationArrayOutput) Index(i pulumi.IntInput) ResourceClassifierConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceClassifierConfiguration {
		return vs[0].([]*ResourceClassifierConfiguration)[vs[1].(int)]
	}).(ResourceClassifierConfigurationOutput)
}

type ResourceClassifierConfigurationMapOutput struct{ *pulumi.OutputState }

func (ResourceClassifierConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceClassifierConfiguration)(nil)).Elem()
}

func (o ResourceClassifierConfigurationMapOutput) ToResourceClassifierConfigurationMapOutput() ResourceClassifierConfigurationMapOutput {
	return o
}

func (o ResourceClassifierConfigurationMapOutput) ToResourceClassifierConfigurationMapOutputWithContext(ctx context.Context) ResourceClassifierConfigurationMapOutput {
	return o
}

func (o ResourceClassifierConfigurationMapOutput) MapIndex(k pulumi.StringInput) ResourceClassifierConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceClassifierConfiguration {
		return vs[0].(map[string]*ResourceClassifierConfiguration)[vs[1].(string)]
	}).(ResourceClassifierConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassifierConfigurationInput)(nil)).Elem(), &ResourceClassifierConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassifierConfigurationArrayInput)(nil)).Elem(), ResourceClassifierConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceClassifierConfigurationMapInput)(nil)).Elem(), ResourceClassifierConfigurationMap{})
	pulumi.RegisterOutputType(ResourceClassifierConfigurationOutput{})
	pulumi.RegisterOutputType(ResourceClassifierConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ResourceClassifierConfigurationMapOutput{})
}
