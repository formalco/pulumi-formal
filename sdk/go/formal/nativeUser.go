// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource creates a Native User.
type NativeUser struct {
	pulumi.CustomResourceState

	// The username of the Native User.
	NativeUserId pulumi.StringOutput `pulumi:"nativeUserId"`
	// The password of the Native User.
	NativeUserSecret pulumi.StringOutput `pulumi:"nativeUserSecret"`
	// The Sidecar ID for the resource this Native User is for.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// If set to true, this Native User cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// The password of the Native User.
	UseAsDefault pulumi.BoolPtrOutput `pulumi:"useAsDefault"`
}

// NewNativeUser registers a new resource with the given unique name, arguments, and options.
func NewNativeUser(ctx *pulumi.Context,
	name string, args *NativeUserArgs, opts ...pulumi.ResourceOption) (*NativeUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NativeUserId == nil {
		return nil, errors.New("invalid value for required argument 'NativeUserId'")
	}
	if args.NativeUserSecret == nil {
		return nil, errors.New("invalid value for required argument 'NativeUserSecret'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.NativeUserSecret != nil {
		args.NativeUserSecret = pulumi.ToSecret(args.NativeUserSecret).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"nativeUserSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NativeUser
	err := ctx.RegisterResource("formal:index/nativeUser:NativeUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNativeUser gets an existing NativeUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNativeUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NativeUserState, opts ...pulumi.ResourceOption) (*NativeUser, error) {
	var resource NativeUser
	err := ctx.ReadResource("formal:index/nativeUser:NativeUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NativeUser resources.
type nativeUserState struct {
	// The username of the Native User.
	NativeUserId *string `pulumi:"nativeUserId"`
	// The password of the Native User.
	NativeUserSecret *string `pulumi:"nativeUserSecret"`
	// The Sidecar ID for the resource this Native User is for.
	ResourceId *string `pulumi:"resourceId"`
	// If set to true, this Native User cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// The password of the Native User.
	UseAsDefault *bool `pulumi:"useAsDefault"`
}

type NativeUserState struct {
	// The username of the Native User.
	NativeUserId pulumi.StringPtrInput
	// The password of the Native User.
	NativeUserSecret pulumi.StringPtrInput
	// The Sidecar ID for the resource this Native User is for.
	ResourceId pulumi.StringPtrInput
	// If set to true, this Native User cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// The password of the Native User.
	UseAsDefault pulumi.BoolPtrInput
}

func (NativeUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*nativeUserState)(nil)).Elem()
}

type nativeUserArgs struct {
	// The username of the Native User.
	NativeUserId string `pulumi:"nativeUserId"`
	// The password of the Native User.
	NativeUserSecret string `pulumi:"nativeUserSecret"`
	// The Sidecar ID for the resource this Native User is for.
	ResourceId string `pulumi:"resourceId"`
	// If set to true, this Native User cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// The password of the Native User.
	UseAsDefault *bool `pulumi:"useAsDefault"`
}

// The set of arguments for constructing a NativeUser resource.
type NativeUserArgs struct {
	// The username of the Native User.
	NativeUserId pulumi.StringInput
	// The password of the Native User.
	NativeUserSecret pulumi.StringInput
	// The Sidecar ID for the resource this Native User is for.
	ResourceId pulumi.StringInput
	// If set to true, this Native User cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// The password of the Native User.
	UseAsDefault pulumi.BoolPtrInput
}

func (NativeUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nativeUserArgs)(nil)).Elem()
}

type NativeUserInput interface {
	pulumi.Input

	ToNativeUserOutput() NativeUserOutput
	ToNativeUserOutputWithContext(ctx context.Context) NativeUserOutput
}

func (*NativeUser) ElementType() reflect.Type {
	return reflect.TypeOf((**NativeUser)(nil)).Elem()
}

func (i *NativeUser) ToNativeUserOutput() NativeUserOutput {
	return i.ToNativeUserOutputWithContext(context.Background())
}

func (i *NativeUser) ToNativeUserOutputWithContext(ctx context.Context) NativeUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NativeUserOutput)
}

// NativeUserArrayInput is an input type that accepts NativeUserArray and NativeUserArrayOutput values.
// You can construct a concrete instance of `NativeUserArrayInput` via:
//
//	NativeUserArray{ NativeUserArgs{...} }
type NativeUserArrayInput interface {
	pulumi.Input

	ToNativeUserArrayOutput() NativeUserArrayOutput
	ToNativeUserArrayOutputWithContext(context.Context) NativeUserArrayOutput
}

type NativeUserArray []NativeUserInput

func (NativeUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NativeUser)(nil)).Elem()
}

func (i NativeUserArray) ToNativeUserArrayOutput() NativeUserArrayOutput {
	return i.ToNativeUserArrayOutputWithContext(context.Background())
}

func (i NativeUserArray) ToNativeUserArrayOutputWithContext(ctx context.Context) NativeUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NativeUserArrayOutput)
}

// NativeUserMapInput is an input type that accepts NativeUserMap and NativeUserMapOutput values.
// You can construct a concrete instance of `NativeUserMapInput` via:
//
//	NativeUserMap{ "key": NativeUserArgs{...} }
type NativeUserMapInput interface {
	pulumi.Input

	ToNativeUserMapOutput() NativeUserMapOutput
	ToNativeUserMapOutputWithContext(context.Context) NativeUserMapOutput
}

type NativeUserMap map[string]NativeUserInput

func (NativeUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NativeUser)(nil)).Elem()
}

func (i NativeUserMap) ToNativeUserMapOutput() NativeUserMapOutput {
	return i.ToNativeUserMapOutputWithContext(context.Background())
}

func (i NativeUserMap) ToNativeUserMapOutputWithContext(ctx context.Context) NativeUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NativeUserMapOutput)
}

type NativeUserOutput struct{ *pulumi.OutputState }

func (NativeUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NativeUser)(nil)).Elem()
}

func (o NativeUserOutput) ToNativeUserOutput() NativeUserOutput {
	return o
}

func (o NativeUserOutput) ToNativeUserOutputWithContext(ctx context.Context) NativeUserOutput {
	return o
}

// The username of the Native User.
func (o NativeUserOutput) NativeUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *NativeUser) pulumi.StringOutput { return v.NativeUserId }).(pulumi.StringOutput)
}

// The password of the Native User.
func (o NativeUserOutput) NativeUserSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *NativeUser) pulumi.StringOutput { return v.NativeUserSecret }).(pulumi.StringOutput)
}

// The Sidecar ID for the resource this Native User is for.
func (o NativeUserOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NativeUser) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// If set to true, this Native User cannot be deleted.
func (o NativeUserOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NativeUser) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// The password of the Native User.
func (o NativeUserOutput) UseAsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NativeUser) pulumi.BoolPtrOutput { return v.UseAsDefault }).(pulumi.BoolPtrOutput)
}

type NativeUserArrayOutput struct{ *pulumi.OutputState }

func (NativeUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NativeUser)(nil)).Elem()
}

func (o NativeUserArrayOutput) ToNativeUserArrayOutput() NativeUserArrayOutput {
	return o
}

func (o NativeUserArrayOutput) ToNativeUserArrayOutputWithContext(ctx context.Context) NativeUserArrayOutput {
	return o
}

func (o NativeUserArrayOutput) Index(i pulumi.IntInput) NativeUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NativeUser {
		return vs[0].([]*NativeUser)[vs[1].(int)]
	}).(NativeUserOutput)
}

type NativeUserMapOutput struct{ *pulumi.OutputState }

func (NativeUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NativeUser)(nil)).Elem()
}

func (o NativeUserMapOutput) ToNativeUserMapOutput() NativeUserMapOutput {
	return o
}

func (o NativeUserMapOutput) ToNativeUserMapOutputWithContext(ctx context.Context) NativeUserMapOutput {
	return o
}

func (o NativeUserMapOutput) MapIndex(k pulumi.StringInput) NativeUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NativeUser {
		return vs[0].(map[string]*NativeUser)[vs[1].(string)]
	}).(NativeUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NativeUserInput)(nil)).Elem(), &NativeUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*NativeUserArrayInput)(nil)).Elem(), NativeUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NativeUserMapInput)(nil)).Elem(), NativeUserMap{})
	pulumi.RegisterOutputType(NativeUserOutput{})
	pulumi.RegisterOutputType(NativeUserArrayOutput{})
	pulumi.RegisterOutputType(NativeUserMapOutput{})
}
