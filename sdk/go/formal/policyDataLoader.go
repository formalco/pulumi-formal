// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registering a policy data loader with Formal.
type PolicyDataLoader struct {
	pulumi.CustomResourceState

	// When the policy data loader was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Policy data loader description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The key to access the output data of this policy data loader.
	Key pulumi.StringOutput `pulumi:"key"`
	// Friendly name for this policy data loader.
	Name pulumi.StringOutput `pulumi:"name"`
	// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
	Status pulumi.StringOutput `pulumi:"status"`
	// If set to true, this policy data loader cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
	// Last update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The code that will be executed to fetch and output the data.
	WorkerCode pulumi.StringOutput `pulumi:"workerCode"`
	// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
	WorkerRuntime pulumi.StringOutput `pulumi:"workerRuntime"`
	// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
	WorkerSchedule pulumi.StringOutput `pulumi:"workerSchedule"`
}

// NewPolicyDataLoader registers a new resource with the given unique name, arguments, and options.
func NewPolicyDataLoader(ctx *pulumi.Context,
	name string, args *PolicyDataLoaderArgs, opts ...pulumi.ResourceOption) (*PolicyDataLoader, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.WorkerCode == nil {
		return nil, errors.New("invalid value for required argument 'WorkerCode'")
	}
	if args.WorkerRuntime == nil {
		return nil, errors.New("invalid value for required argument 'WorkerRuntime'")
	}
	if args.WorkerSchedule == nil {
		return nil, errors.New("invalid value for required argument 'WorkerSchedule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyDataLoader
	err := ctx.RegisterResource("formal:index/policyDataLoader:PolicyDataLoader", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyDataLoader gets an existing PolicyDataLoader resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyDataLoader(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyDataLoaderState, opts ...pulumi.ResourceOption) (*PolicyDataLoader, error) {
	var resource PolicyDataLoader
	err := ctx.ReadResource("formal:index/policyDataLoader:PolicyDataLoader", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyDataLoader resources.
type policyDataLoaderState struct {
	// When the policy data loader was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Policy data loader description.
	Description *string `pulumi:"description"`
	// The key to access the output data of this policy data loader.
	Key *string `pulumi:"key"`
	// Friendly name for this policy data loader.
	Name *string `pulumi:"name"`
	// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
	Status *string `pulumi:"status"`
	// If set to true, this policy data loader cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// Last update time.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The code that will be executed to fetch and output the data.
	WorkerCode *string `pulumi:"workerCode"`
	// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
	WorkerRuntime *string `pulumi:"workerRuntime"`
	// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
	WorkerSchedule *string `pulumi:"workerSchedule"`
}

type PolicyDataLoaderState struct {
	// When the policy data loader was created.
	CreatedAt pulumi.StringPtrInput
	// Policy data loader description.
	Description pulumi.StringPtrInput
	// The key to access the output data of this policy data loader.
	Key pulumi.StringPtrInput
	// Friendly name for this policy data loader.
	Name pulumi.StringPtrInput
	// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
	Status pulumi.StringPtrInput
	// If set to true, this policy data loader cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// Last update time.
	UpdatedAt pulumi.StringPtrInput
	// The code that will be executed to fetch and output the data.
	WorkerCode pulumi.StringPtrInput
	// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
	WorkerRuntime pulumi.StringPtrInput
	// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
	WorkerSchedule pulumi.StringPtrInput
}

func (PolicyDataLoaderState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyDataLoaderState)(nil)).Elem()
}

type policyDataLoaderArgs struct {
	// Policy data loader description.
	Description string `pulumi:"description"`
	// The key to access the output data of this policy data loader.
	Key string `pulumi:"key"`
	// Friendly name for this policy data loader.
	Name *string `pulumi:"name"`
	// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
	Status string `pulumi:"status"`
	// If set to true, this policy data loader cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
	// The code that will be executed to fetch and output the data.
	WorkerCode string `pulumi:"workerCode"`
	// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
	WorkerRuntime string `pulumi:"workerRuntime"`
	// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
	WorkerSchedule string `pulumi:"workerSchedule"`
}

// The set of arguments for constructing a PolicyDataLoader resource.
type PolicyDataLoaderArgs struct {
	// Policy data loader description.
	Description pulumi.StringInput
	// The key to access the output data of this policy data loader.
	Key pulumi.StringInput
	// Friendly name for this policy data loader.
	Name pulumi.StringPtrInput
	// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
	Status pulumi.StringInput
	// If set to true, this policy data loader cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
	// The code that will be executed to fetch and output the data.
	WorkerCode pulumi.StringInput
	// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
	WorkerRuntime pulumi.StringInput
	// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
	WorkerSchedule pulumi.StringInput
}

func (PolicyDataLoaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyDataLoaderArgs)(nil)).Elem()
}

type PolicyDataLoaderInput interface {
	pulumi.Input

	ToPolicyDataLoaderOutput() PolicyDataLoaderOutput
	ToPolicyDataLoaderOutputWithContext(ctx context.Context) PolicyDataLoaderOutput
}

func (*PolicyDataLoader) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDataLoader)(nil)).Elem()
}

func (i *PolicyDataLoader) ToPolicyDataLoaderOutput() PolicyDataLoaderOutput {
	return i.ToPolicyDataLoaderOutputWithContext(context.Background())
}

func (i *PolicyDataLoader) ToPolicyDataLoaderOutputWithContext(ctx context.Context) PolicyDataLoaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDataLoaderOutput)
}

// PolicyDataLoaderArrayInput is an input type that accepts PolicyDataLoaderArray and PolicyDataLoaderArrayOutput values.
// You can construct a concrete instance of `PolicyDataLoaderArrayInput` via:
//
//	PolicyDataLoaderArray{ PolicyDataLoaderArgs{...} }
type PolicyDataLoaderArrayInput interface {
	pulumi.Input

	ToPolicyDataLoaderArrayOutput() PolicyDataLoaderArrayOutput
	ToPolicyDataLoaderArrayOutputWithContext(context.Context) PolicyDataLoaderArrayOutput
}

type PolicyDataLoaderArray []PolicyDataLoaderInput

func (PolicyDataLoaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyDataLoader)(nil)).Elem()
}

func (i PolicyDataLoaderArray) ToPolicyDataLoaderArrayOutput() PolicyDataLoaderArrayOutput {
	return i.ToPolicyDataLoaderArrayOutputWithContext(context.Background())
}

func (i PolicyDataLoaderArray) ToPolicyDataLoaderArrayOutputWithContext(ctx context.Context) PolicyDataLoaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDataLoaderArrayOutput)
}

// PolicyDataLoaderMapInput is an input type that accepts PolicyDataLoaderMap and PolicyDataLoaderMapOutput values.
// You can construct a concrete instance of `PolicyDataLoaderMapInput` via:
//
//	PolicyDataLoaderMap{ "key": PolicyDataLoaderArgs{...} }
type PolicyDataLoaderMapInput interface {
	pulumi.Input

	ToPolicyDataLoaderMapOutput() PolicyDataLoaderMapOutput
	ToPolicyDataLoaderMapOutputWithContext(context.Context) PolicyDataLoaderMapOutput
}

type PolicyDataLoaderMap map[string]PolicyDataLoaderInput

func (PolicyDataLoaderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyDataLoader)(nil)).Elem()
}

func (i PolicyDataLoaderMap) ToPolicyDataLoaderMapOutput() PolicyDataLoaderMapOutput {
	return i.ToPolicyDataLoaderMapOutputWithContext(context.Background())
}

func (i PolicyDataLoaderMap) ToPolicyDataLoaderMapOutputWithContext(ctx context.Context) PolicyDataLoaderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyDataLoaderMapOutput)
}

type PolicyDataLoaderOutput struct{ *pulumi.OutputState }

func (PolicyDataLoaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyDataLoader)(nil)).Elem()
}

func (o PolicyDataLoaderOutput) ToPolicyDataLoaderOutput() PolicyDataLoaderOutput {
	return o
}

func (o PolicyDataLoaderOutput) ToPolicyDataLoaderOutputWithContext(ctx context.Context) PolicyDataLoaderOutput {
	return o
}

// When the policy data loader was created.
func (o PolicyDataLoaderOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Policy data loader description.
func (o PolicyDataLoaderOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The key to access the output data of this policy data loader.
func (o PolicyDataLoaderOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Friendly name for this policy data loader.
func (o PolicyDataLoaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
func (o PolicyDataLoaderOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// If set to true, this policy data loader cannot be deleted.
func (o PolicyDataLoaderOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

// Last update time.
func (o PolicyDataLoaderOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The code that will be executed to fetch and output the data.
func (o PolicyDataLoaderOutput) WorkerCode() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.WorkerCode }).(pulumi.StringOutput)
}

// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
func (o PolicyDataLoaderOutput) WorkerRuntime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.WorkerRuntime }).(pulumi.StringOutput)
}

// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
func (o PolicyDataLoaderOutput) WorkerSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyDataLoader) pulumi.StringOutput { return v.WorkerSchedule }).(pulumi.StringOutput)
}

type PolicyDataLoaderArrayOutput struct{ *pulumi.OutputState }

func (PolicyDataLoaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyDataLoader)(nil)).Elem()
}

func (o PolicyDataLoaderArrayOutput) ToPolicyDataLoaderArrayOutput() PolicyDataLoaderArrayOutput {
	return o
}

func (o PolicyDataLoaderArrayOutput) ToPolicyDataLoaderArrayOutputWithContext(ctx context.Context) PolicyDataLoaderArrayOutput {
	return o
}

func (o PolicyDataLoaderArrayOutput) Index(i pulumi.IntInput) PolicyDataLoaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyDataLoader {
		return vs[0].([]*PolicyDataLoader)[vs[1].(int)]
	}).(PolicyDataLoaderOutput)
}

type PolicyDataLoaderMapOutput struct{ *pulumi.OutputState }

func (PolicyDataLoaderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyDataLoader)(nil)).Elem()
}

func (o PolicyDataLoaderMapOutput) ToPolicyDataLoaderMapOutput() PolicyDataLoaderMapOutput {
	return o
}

func (o PolicyDataLoaderMapOutput) ToPolicyDataLoaderMapOutputWithContext(ctx context.Context) PolicyDataLoaderMapOutput {
	return o
}

func (o PolicyDataLoaderMapOutput) MapIndex(k pulumi.StringInput) PolicyDataLoaderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyDataLoader {
		return vs[0].(map[string]*PolicyDataLoader)[vs[1].(string)]
	}).(PolicyDataLoaderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDataLoaderInput)(nil)).Elem(), &PolicyDataLoader{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDataLoaderArrayInput)(nil)).Elem(), PolicyDataLoaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyDataLoaderMapInput)(nil)).Elem(), PolicyDataLoaderMap{})
	pulumi.RegisterOutputType(PolicyDataLoaderOutput{})
	pulumi.RegisterOutputType(PolicyDataLoaderArrayOutput{})
	pulumi.RegisterOutputType(PolicyDataLoaderMapOutput{})
}
