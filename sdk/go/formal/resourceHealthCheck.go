// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package formal

import (
	"context"
	"reflect"

	"errors"
	"github.com/formalco/pulumi-formal/sdk/go/formal/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creating a Health Check in Formal.
type ResourceHealthCheck struct {
	pulumi.CustomResourceState

	// Database associated with the health check.
	DatabaseName pulumi.StringOutput `pulumi:"databaseName"`
	// Resource ID linked to the following health check.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// If set to true, this Resource Health Check cannot be deleted.
	TerminationProtection pulumi.BoolPtrOutput `pulumi:"terminationProtection"`
}

// NewResourceHealthCheck registers a new resource with the given unique name, arguments, and options.
func NewResourceHealthCheck(ctx *pulumi.Context,
	name string, args *ResourceHealthCheckArgs, opts ...pulumi.ResourceOption) (*ResourceHealthCheck, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResourceHealthCheck
	err := ctx.RegisterResource("formal:index/resourceHealthCheck:ResourceHealthCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourceHealthCheck gets an existing ResourceHealthCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourceHealthCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceHealthCheckState, opts ...pulumi.ResourceOption) (*ResourceHealthCheck, error) {
	var resource ResourceHealthCheck
	err := ctx.ReadResource("formal:index/resourceHealthCheck:ResourceHealthCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourceHealthCheck resources.
type resourceHealthCheckState struct {
	// Database associated with the health check.
	DatabaseName *string `pulumi:"databaseName"`
	// Resource ID linked to the following health check.
	ResourceId *string `pulumi:"resourceId"`
	// If set to true, this Resource Health Check cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

type ResourceHealthCheckState struct {
	// Database associated with the health check.
	DatabaseName pulumi.StringPtrInput
	// Resource ID linked to the following health check.
	ResourceId pulumi.StringPtrInput
	// If set to true, this Resource Health Check cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ResourceHealthCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceHealthCheckState)(nil)).Elem()
}

type resourceHealthCheckArgs struct {
	// Database associated with the health check.
	DatabaseName string `pulumi:"databaseName"`
	// Resource ID linked to the following health check.
	ResourceId string `pulumi:"resourceId"`
	// If set to true, this Resource Health Check cannot be deleted.
	TerminationProtection *bool `pulumi:"terminationProtection"`
}

// The set of arguments for constructing a ResourceHealthCheck resource.
type ResourceHealthCheckArgs struct {
	// Database associated with the health check.
	DatabaseName pulumi.StringInput
	// Resource ID linked to the following health check.
	ResourceId pulumi.StringInput
	// If set to true, this Resource Health Check cannot be deleted.
	TerminationProtection pulumi.BoolPtrInput
}

func (ResourceHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceHealthCheckArgs)(nil)).Elem()
}

type ResourceHealthCheckInput interface {
	pulumi.Input

	ToResourceHealthCheckOutput() ResourceHealthCheckOutput
	ToResourceHealthCheckOutputWithContext(ctx context.Context) ResourceHealthCheckOutput
}

func (*ResourceHealthCheck) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHealthCheck)(nil)).Elem()
}

func (i *ResourceHealthCheck) ToResourceHealthCheckOutput() ResourceHealthCheckOutput {
	return i.ToResourceHealthCheckOutputWithContext(context.Background())
}

func (i *ResourceHealthCheck) ToResourceHealthCheckOutputWithContext(ctx context.Context) ResourceHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHealthCheckOutput)
}

// ResourceHealthCheckArrayInput is an input type that accepts ResourceHealthCheckArray and ResourceHealthCheckArrayOutput values.
// You can construct a concrete instance of `ResourceHealthCheckArrayInput` via:
//
//	ResourceHealthCheckArray{ ResourceHealthCheckArgs{...} }
type ResourceHealthCheckArrayInput interface {
	pulumi.Input

	ToResourceHealthCheckArrayOutput() ResourceHealthCheckArrayOutput
	ToResourceHealthCheckArrayOutputWithContext(context.Context) ResourceHealthCheckArrayOutput
}

type ResourceHealthCheckArray []ResourceHealthCheckInput

func (ResourceHealthCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceHealthCheck)(nil)).Elem()
}

func (i ResourceHealthCheckArray) ToResourceHealthCheckArrayOutput() ResourceHealthCheckArrayOutput {
	return i.ToResourceHealthCheckArrayOutputWithContext(context.Background())
}

func (i ResourceHealthCheckArray) ToResourceHealthCheckArrayOutputWithContext(ctx context.Context) ResourceHealthCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHealthCheckArrayOutput)
}

// ResourceHealthCheckMapInput is an input type that accepts ResourceHealthCheckMap and ResourceHealthCheckMapOutput values.
// You can construct a concrete instance of `ResourceHealthCheckMapInput` via:
//
//	ResourceHealthCheckMap{ "key": ResourceHealthCheckArgs{...} }
type ResourceHealthCheckMapInput interface {
	pulumi.Input

	ToResourceHealthCheckMapOutput() ResourceHealthCheckMapOutput
	ToResourceHealthCheckMapOutputWithContext(context.Context) ResourceHealthCheckMapOutput
}

type ResourceHealthCheckMap map[string]ResourceHealthCheckInput

func (ResourceHealthCheckMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceHealthCheck)(nil)).Elem()
}

func (i ResourceHealthCheckMap) ToResourceHealthCheckMapOutput() ResourceHealthCheckMapOutput {
	return i.ToResourceHealthCheckMapOutputWithContext(context.Background())
}

func (i ResourceHealthCheckMap) ToResourceHealthCheckMapOutputWithContext(ctx context.Context) ResourceHealthCheckMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceHealthCheckMapOutput)
}

type ResourceHealthCheckOutput struct{ *pulumi.OutputState }

func (ResourceHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceHealthCheck)(nil)).Elem()
}

func (o ResourceHealthCheckOutput) ToResourceHealthCheckOutput() ResourceHealthCheckOutput {
	return o
}

func (o ResourceHealthCheckOutput) ToResourceHealthCheckOutputWithContext(ctx context.Context) ResourceHealthCheckOutput {
	return o
}

// Database associated with the health check.
func (o ResourceHealthCheckOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceHealthCheck) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

// Resource ID linked to the following health check.
func (o ResourceHealthCheckOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResourceHealthCheck) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// If set to true, this Resource Health Check cannot be deleted.
func (o ResourceHealthCheckOutput) TerminationProtection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceHealthCheck) pulumi.BoolPtrOutput { return v.TerminationProtection }).(pulumi.BoolPtrOutput)
}

type ResourceHealthCheckArrayOutput struct{ *pulumi.OutputState }

func (ResourceHealthCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourceHealthCheck)(nil)).Elem()
}

func (o ResourceHealthCheckArrayOutput) ToResourceHealthCheckArrayOutput() ResourceHealthCheckArrayOutput {
	return o
}

func (o ResourceHealthCheckArrayOutput) ToResourceHealthCheckArrayOutputWithContext(ctx context.Context) ResourceHealthCheckArrayOutput {
	return o
}

func (o ResourceHealthCheckArrayOutput) Index(i pulumi.IntInput) ResourceHealthCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourceHealthCheck {
		return vs[0].([]*ResourceHealthCheck)[vs[1].(int)]
	}).(ResourceHealthCheckOutput)
}

type ResourceHealthCheckMapOutput struct{ *pulumi.OutputState }

func (ResourceHealthCheckMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourceHealthCheck)(nil)).Elem()
}

func (o ResourceHealthCheckMapOutput) ToResourceHealthCheckMapOutput() ResourceHealthCheckMapOutput {
	return o
}

func (o ResourceHealthCheckMapOutput) ToResourceHealthCheckMapOutputWithContext(ctx context.Context) ResourceHealthCheckMapOutput {
	return o
}

func (o ResourceHealthCheckMapOutput) MapIndex(k pulumi.StringInput) ResourceHealthCheckOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourceHealthCheck {
		return vs[0].(map[string]*ResourceHealthCheck)[vs[1].(string)]
	}).(ResourceHealthCheckOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHealthCheckInput)(nil)).Elem(), &ResourceHealthCheck{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHealthCheckArrayInput)(nil)).Elem(), ResourceHealthCheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceHealthCheckMapInput)(nil)).Elem(), ResourceHealthCheckMap{})
	pulumi.RegisterOutputType(ResourceHealthCheckOutput{})
	pulumi.RegisterOutputType(ResourceHealthCheckArrayOutput{})
	pulumi.RegisterOutputType(ResourceHealthCheckMapOutput{})
}
