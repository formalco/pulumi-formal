// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering a Sidecar with Formal.
 */
export class Sidecar extends pulumi.CustomResource {
    /**
     * Get an existing Sidecar resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SidecarState, opts?: pulumi.CustomResourceOptions): Sidecar {
        return new Sidecar(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/sidecar:Sidecar';

    /**
     * Returns true if the given object is an instance of Sidecar.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sidecar {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sidecar.__pulumiType;
    }

    /**
     * Api key for the deployed Sidecar.
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * Creation time of the sidecar.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * If deploymentType is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
     */
    public /*out*/ readonly formalControlPlaneTlsCertificate!: pulumi.Output<string>;
    /**
     * The hostname of the created sidecar.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Friendly name for this Sidecar.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
     */
    public readonly technology!: pulumi.Output<string>;
    /**
     * If set to true, this Sidecar cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Version of the Sidecar to deploy for `managed`.
     */
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a Sidecar resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SidecarArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SidecarArgs | SidecarState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SidecarState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["formalControlPlaneTlsCertificate"] = state ? state.formalControlPlaneTlsCertificate : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["technology"] = state ? state.technology : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SidecarArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.technology === undefined) && !opts.urn) {
                throw new Error("Missing required property 'technology'");
            }
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["technology"] = args ? args.technology : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["formalControlPlaneTlsCertificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "formalControlPlaneTlsCertificate"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Sidecar.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Sidecar resources.
 */
export interface SidecarState {
    /**
     * Api key for the deployed Sidecar.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Creation time of the sidecar.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * If deploymentType is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
     */
    formalControlPlaneTlsCertificate?: pulumi.Input<string>;
    /**
     * The hostname of the created sidecar.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Friendly name for this Sidecar.
     */
    name?: pulumi.Input<string>;
    /**
     * Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
     */
    technology?: pulumi.Input<string>;
    /**
     * If set to true, this Sidecar cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * Version of the Sidecar to deploy for `managed`.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sidecar resource.
 */
export interface SidecarArgs {
    /**
     * The hostname of the created sidecar.
     */
    hostname: pulumi.Input<string>;
    /**
     * Friendly name for this Sidecar.
     */
    name?: pulumi.Input<string>;
    /**
     * Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
     */
    technology: pulumi.Input<string>;
    /**
     * If set to true, this Sidecar cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * Version of the Sidecar to deploy for `managed`.
     */
    version?: pulumi.Input<string>;
}
