// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Registering a Data Catalog integration.
 */
export class IntegrationDataCatalog extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationDataCatalog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationDataCatalogState, opts?: pulumi.CustomResourceOptions): IntegrationDataCatalog {
        return new IntegrationDataCatalog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/integrationDataCatalog:IntegrationDataCatalog';

    /**
     * Returns true if the given object is an instance of IntegrationDataCatalog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationDataCatalog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationDataCatalog.__pulumiType;
    }

    /**
     * Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
     */
    public readonly datahub!: pulumi.Output<outputs.IntegrationDataCatalogDatahub | undefined>;
    /**
     * Name of the Integration
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
     */
    public readonly syncDirection!: pulumi.Output<string>;
    /**
     * Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
     */
    public readonly syncedEntities!: pulumi.Output<string[]>;

    /**
     * Create a IntegrationDataCatalog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationDataCatalogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationDataCatalogArgs | IntegrationDataCatalogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationDataCatalogState | undefined;
            resourceInputs["datahub"] = state ? state.datahub : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["syncDirection"] = state ? state.syncDirection : undefined;
            resourceInputs["syncedEntities"] = state ? state.syncedEntities : undefined;
        } else {
            const args = argsOrState as IntegrationDataCatalogArgs | undefined;
            if ((!args || args.syncDirection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncDirection'");
            }
            if ((!args || args.syncedEntities === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncedEntities'");
            }
            resourceInputs["datahub"] = args ? args.datahub : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["syncDirection"] = args ? args.syncDirection : undefined;
            resourceInputs["syncedEntities"] = args ? args.syncedEntities : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationDataCatalog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationDataCatalog resources.
 */
export interface IntegrationDataCatalogState {
    /**
     * Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
     */
    datahub?: pulumi.Input<inputs.IntegrationDataCatalogDatahub>;
    /**
     * Name of the Integration
     */
    name?: pulumi.Input<string>;
    /**
     * Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
     */
    syncDirection?: pulumi.Input<string>;
    /**
     * Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
     */
    syncedEntities?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IntegrationDataCatalog resource.
 */
export interface IntegrationDataCatalogArgs {
    /**
     * Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
     */
    datahub?: pulumi.Input<inputs.IntegrationDataCatalogDatahub>;
    /**
     * Name of the Integration
     */
    name?: pulumi.Input<string>;
    /**
     * Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
     */
    syncDirection: pulumi.Input<string>;
    /**
     * Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
     */
    syncedEntities: pulumi.Input<pulumi.Input<string>[]>;
}
