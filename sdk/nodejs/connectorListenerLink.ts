// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering a Connector Listener Link with Formal.
 */
export class ConnectorListenerLink extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorListenerLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorListenerLinkState, opts?: pulumi.CustomResourceOptions): ConnectorListenerLink {
        return new ConnectorListenerLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/connectorListenerLink:ConnectorListenerLink';

    /**
     * Returns true if the given object is an instance of ConnectorListenerLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorListenerLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorListenerLink.__pulumiType;
    }

    /**
     * The ID of the Connector Listener you want to link to a connector.
     */
    public readonly connectorId!: pulumi.Output<string>;
    /**
     * The ID of the Connector Listener you want to link to a connector.
     */
    public readonly connectorListenerId!: pulumi.Output<string>;
    /**
     * If set to true, this connector cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ConnectorListenerLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorListenerLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorListenerLinkArgs | ConnectorListenerLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorListenerLinkState | undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["connectorListenerId"] = state ? state.connectorListenerId : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as ConnectorListenerLinkArgs | undefined;
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            if ((!args || args.connectorListenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorListenerId'");
            }
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["connectorListenerId"] = args ? args.connectorListenerId : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorListenerLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorListenerLink resources.
 */
export interface ConnectorListenerLinkState {
    /**
     * The ID of the Connector Listener you want to link to a connector.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * The ID of the Connector Listener you want to link to a connector.
     */
    connectorListenerId?: pulumi.Input<string>;
    /**
     * If set to true, this connector cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ConnectorListenerLink resource.
 */
export interface ConnectorListenerLinkArgs {
    /**
     * The ID of the Connector Listener you want to link to a connector.
     */
    connectorId: pulumi.Input<string>;
    /**
     * The ID of the Connector Listener you want to link to a connector.
     */
    connectorListenerId: pulumi.Input<string>;
    /**
     * If set to true, this connector cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
