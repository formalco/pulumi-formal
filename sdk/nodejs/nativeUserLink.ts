// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource creates assigns a Native User to a Formal Identity.
 */
export class NativeUserLink extends pulumi.CustomResource {
    /**
     * Get an existing NativeUserLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NativeUserLinkState, opts?: pulumi.CustomResourceOptions): NativeUserLink {
        return new NativeUserLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/nativeUserLink:NativeUserLink';

    /**
     * Returns true if the given object is an instance of NativeUserLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NativeUserLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NativeUserLink.__pulumiType;
    }

    /**
     * The Formal ID for the User, Group, or Resource Hostname to be linked.
     */
    public readonly formalIdentityId!: pulumi.Output<string>;
    /**
     * The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
     */
    public readonly formalIdentityType!: pulumi.Output<string>;
    /**
     * The Native User ID of the Native User.
     */
    public readonly nativeUserId!: pulumi.Output<string>;
    /**
     * The Resource ID of the Native User.
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * If set to true, this Native User link cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a NativeUserLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NativeUserLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NativeUserLinkArgs | NativeUserLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NativeUserLinkState | undefined;
            resourceInputs["formalIdentityId"] = state ? state.formalIdentityId : undefined;
            resourceInputs["formalIdentityType"] = state ? state.formalIdentityType : undefined;
            resourceInputs["nativeUserId"] = state ? state.nativeUserId : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as NativeUserLinkArgs | undefined;
            if ((!args || args.formalIdentityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'formalIdentityId'");
            }
            if ((!args || args.formalIdentityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'formalIdentityType'");
            }
            if ((!args || args.nativeUserId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nativeUserId'");
            }
            resourceInputs["formalIdentityId"] = args ? args.formalIdentityId : undefined;
            resourceInputs["formalIdentityType"] = args ? args.formalIdentityType : undefined;
            resourceInputs["nativeUserId"] = args ? args.nativeUserId : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["resourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NativeUserLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NativeUserLink resources.
 */
export interface NativeUserLinkState {
    /**
     * The Formal ID for the User, Group, or Resource Hostname to be linked.
     */
    formalIdentityId?: pulumi.Input<string>;
    /**
     * The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
     */
    formalIdentityType?: pulumi.Input<string>;
    /**
     * The Native User ID of the Native User.
     */
    nativeUserId?: pulumi.Input<string>;
    /**
     * The Resource ID of the Native User.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * If set to true, this Native User link cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NativeUserLink resource.
 */
export interface NativeUserLinkArgs {
    /**
     * The Formal ID for the User, Group, or Resource Hostname to be linked.
     */
    formalIdentityId: pulumi.Input<string>;
    /**
     * The type of Formal Identity to be linked. Accepted values are `user`, `group`, and `resourceHostname`.
     */
    formalIdentityType: pulumi.Input<string>;
    /**
     * The Native User ID of the Native User.
     */
    nativeUserId: pulumi.Input<string>;
    /**
     * If set to true, this Native User link cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
