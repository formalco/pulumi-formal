// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Registering a BI App.
 */
export class IntegrationBi extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationBi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationBiState, opts?: pulumi.CustomResourceOptions): IntegrationBi {
        return new IntegrationBi(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/integrationBi:IntegrationBi';

    /**
     * Returns true if the given object is an instance of IntegrationBi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationBi {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationBi.__pulumiType;
    }

    /**
     * Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
     */
    public readonly metabase!: pulumi.Output<outputs.IntegrationBiMetabase | undefined>;
    /**
     * Friendly name for the App.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
     */
    public readonly sync!: pulumi.Output<boolean>;

    /**
     * Create a IntegrationBi resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationBiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationBiArgs | IntegrationBiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationBiState | undefined;
            resourceInputs["metabase"] = state ? state.metabase : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sync"] = state ? state.sync : undefined;
        } else {
            const args = argsOrState as IntegrationBiArgs | undefined;
            if ((!args || args.sync === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sync'");
            }
            resourceInputs["metabase"] = args ? args.metabase : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sync"] = args ? args.sync : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationBi.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationBi resources.
 */
export interface IntegrationBiState {
    /**
     * Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
     */
    metabase?: pulumi.Input<inputs.IntegrationBiMetabase>;
    /**
     * Friendly name for the App.
     */
    name?: pulumi.Input<string>;
    /**
     * Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
     */
    sync?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IntegrationBi resource.
 */
export interface IntegrationBiArgs {
    /**
     * Configuration block for Metabase integration. This block is optional and may be omitted if not configuring a Metabase integration.
     */
    metabase?: pulumi.Input<inputs.IntegrationBiMetabase>;
    /**
     * Friendly name for the App.
     */
    name?: pulumi.Input<string>;
    /**
     * Auto synchronize users from Metabase to Formal (occurs every hour). Note that a lambda worker will need to be deployed in your infrastructure to synchronise users.
     */
    sync: pulumi.Input<boolean>;
}
