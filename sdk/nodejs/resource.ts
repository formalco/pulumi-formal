// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering a Resource with Formal.
 */
export class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceState, opts?: pulumi.CustomResourceOptions): Resource {
        return new Resource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/resource:Resource';

    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resource.__pulumiType;
    }

    /**
     * Creation time of the Resource.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * Hostname of the Resource.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Friendly name for the Resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port your Resource is listening on.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The ID of the Space to create the Resource in.
     */
    public readonly spaceId!: pulumi.Output<string | undefined>;
    /**
     * Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
     */
    public readonly technology!: pulumi.Output<string>;
    /**
     * For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
     */
    public readonly technologyProvider!: pulumi.Output<string | undefined>;
    /**
     * If set to true, the Resource cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceArgs | ResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["technology"] = state ? state.technology : undefined;
            resourceInputs["technologyProvider"] = state ? state.technologyProvider : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as ResourceArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.technology === undefined) && !opts.urn) {
                throw new Error("Missing required property 'technology'");
            }
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["technology"] = args ? args.technology : undefined;
            resourceInputs["technologyProvider"] = args ? args.technologyProvider : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resource resources.
 */
export interface ResourceState {
    /**
     * Creation time of the Resource.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    environment?: pulumi.Input<string>;
    /**
     * Hostname of the Resource.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Friendly name for the Resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The port your Resource is listening on.
     */
    port?: pulumi.Input<number>;
    /**
     * The ID of the Space to create the Resource in.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
     */
    technology?: pulumi.Input<string>;
    /**
     * For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
     */
    technologyProvider?: pulumi.Input<string>;
    /**
     * If set to true, the Resource cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * Environment for the Resource, options: DEV, TEST, QA, UAT, EI, PRE, STG, NON_PROD, PROD, CORP.
     *
     * @deprecated This field is deprecated and will be removed in a future release.
     */
    environment?: pulumi.Input<string>;
    /**
     * Hostname of the Resource.
     */
    hostname: pulumi.Input<string>;
    /**
     * Friendly name for the Resource.
     */
    name?: pulumi.Input<string>;
    /**
     * The port your Resource is listening on.
     */
    port: pulumi.Input<number>;
    /**
     * The ID of the Space to create the Resource in.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Technology of the Resource: supported values are `snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http`, `clickhouse`, `redis` and `ssh`.
     */
    technology: pulumi.Input<string>;
    /**
     * For SSH resources, if the backend connection is SSM, supported values are `aws-ec2`, and `aws-ecs`
     */
    technologyProvider?: pulumi.Input<string>;
    /**
     * If set to true, the Resource cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
