// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering a Connector Configuration with Formal.
 */
export class ConnectorConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorConfigurationState, opts?: pulumi.CustomResourceOptions): ConnectorConfiguration {
        return new ConnectorConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/connectorConfiguration:ConnectorConfiguration';

    /**
     * Returns true if the given object is an instance of ConnectorConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorConfiguration.__pulumiType;
    }

    /**
     * The ID of the Connector this configuration is linked to.
     */
    public readonly connectorId!: pulumi.Output<string>;
    /**
     * The port to be used for this Connector's health check.
     */
    public readonly healthCheckPort!: pulumi.Output<number | undefined>;
    /**
     * The log level to be configured for this Connector.
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectorConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorConfigurationArgs | ConnectorConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorConfigurationState | undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
        } else {
            const args = argsOrState as ConnectorConfigurationArgs | undefined;
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorConfiguration resources.
 */
export interface ConnectorConfigurationState {
    /**
     * The ID of the Connector this configuration is linked to.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * The port to be used for this Connector's health check.
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * The log level to be configured for this Connector.
     */
    logLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorConfiguration resource.
 */
export interface ConnectorConfigurationArgs {
    /**
     * The ID of the Connector this configuration is linked to.
     */
    connectorId: pulumi.Input<string>;
    /**
     * The port to be used for this Connector's health check.
     */
    healthCheckPort?: pulumi.Input<number>;
    /**
     * The log level to be configured for this Connector.
     */
    logLevel?: pulumi.Input<string>;
}
