// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Registering a Data Domain with Formal.
 */
export class DataDomain extends pulumi.CustomResource {
    /**
     * Get an existing DataDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataDomainState, opts?: pulumi.CustomResourceOptions): DataDomain {
        return new DataDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/dataDomain:DataDomain';

    /**
     * Returns true if the given object is an instance of DataDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataDomain.__pulumiType;
    }

    /**
     * When the policy was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the data domain.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Excluded paths of this data domain.
     */
    public readonly excludedPaths!: pulumi.Output<string[]>;
    /**
     * Included paths of this data domain.
     */
    public readonly includedPaths!: pulumi.Output<string[]>;
    /**
     * Name of the data domain.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Owners of this policy.
     */
    public readonly owners!: pulumi.Output<outputs.DataDomainOwner[]>;
    /**
     * Last update time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a DataDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataDomainArgs | DataDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataDomainState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excludedPaths"] = state ? state.excludedPaths : undefined;
            resourceInputs["includedPaths"] = state ? state.includedPaths : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as DataDomainArgs | undefined;
            if ((!args || args.excludedPaths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'excludedPaths'");
            }
            if ((!args || args.includedPaths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includedPaths'");
            }
            if ((!args || args.owners === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owners'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excludedPaths"] = args ? args.excludedPaths : undefined;
            resourceInputs["includedPaths"] = args ? args.includedPaths : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataDomain.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataDomain resources.
 */
export interface DataDomainState {
    /**
     * When the policy was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the data domain.
     */
    description?: pulumi.Input<string>;
    /**
     * Excluded paths of this data domain.
     */
    excludedPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Included paths of this data domain.
     */
    includedPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the data domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Owners of this policy.
     */
    owners?: pulumi.Input<pulumi.Input<inputs.DataDomainOwner>[]>;
    /**
     * Last update time.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataDomain resource.
 */
export interface DataDomainArgs {
    /**
     * Description of the data domain.
     */
    description?: pulumi.Input<string>;
    /**
     * Excluded paths of this data domain.
     */
    excludedPaths: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Included paths of this data domain.
     */
    includedPaths: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the data domain.
     */
    name?: pulumi.Input<string>;
    /**
     * Owners of this policy.
     */
    owners: pulumi.Input<pulumi.Input<inputs.DataDomainOwner>[]>;
}
