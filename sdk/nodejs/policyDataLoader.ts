// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering a policy data loader with Formal.
 */
export class PolicyDataLoader extends pulumi.CustomResource {
    /**
     * Get an existing PolicyDataLoader resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyDataLoaderState, opts?: pulumi.CustomResourceOptions): PolicyDataLoader {
        return new PolicyDataLoader(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/policyDataLoader:PolicyDataLoader';

    /**
     * Returns true if the given object is an instance of PolicyDataLoader.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyDataLoader {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyDataLoader.__pulumiType;
    }

    /**
     * When the policy data loader was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Policy data loader description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The key to access the output data of this policy data loader.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Friendly name for this policy data loader.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * If set to true, this policy data loader cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Last update time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The code that will be executed to fetch and output the data.
     */
    public readonly workerCode!: pulumi.Output<string>;
    /**
     * The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
     */
    public readonly workerRuntime!: pulumi.Output<string>;
    /**
     * Second-based 'cron' expression specifying when the data should be fetched. For example, use '*&#47;10 * * * * *' to run the code every 10 seconds.
     */
    public readonly workerSchedule!: pulumi.Output<string>;

    /**
     * Create a PolicyDataLoader resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyDataLoaderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyDataLoaderArgs | PolicyDataLoaderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyDataLoaderState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["workerCode"] = state ? state.workerCode : undefined;
            resourceInputs["workerRuntime"] = state ? state.workerRuntime : undefined;
            resourceInputs["workerSchedule"] = state ? state.workerSchedule : undefined;
        } else {
            const args = argsOrState as PolicyDataLoaderArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.workerCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerCode'");
            }
            if ((!args || args.workerRuntime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerRuntime'");
            }
            if ((!args || args.workerSchedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerSchedule'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["workerCode"] = args ? args.workerCode : undefined;
            resourceInputs["workerRuntime"] = args ? args.workerRuntime : undefined;
            resourceInputs["workerSchedule"] = args ? args.workerSchedule : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyDataLoader.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyDataLoader resources.
 */
export interface PolicyDataLoaderState {
    /**
     * When the policy data loader was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Policy data loader description.
     */
    description?: pulumi.Input<string>;
    /**
     * The key to access the output data of this policy data loader.
     */
    key?: pulumi.Input<string>;
    /**
     * Friendly name for this policy data loader.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
     */
    status?: pulumi.Input<string>;
    /**
     * If set to true, this policy data loader cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * Last update time.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The code that will be executed to fetch and output the data.
     */
    workerCode?: pulumi.Input<string>;
    /**
     * The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
     */
    workerRuntime?: pulumi.Input<string>;
    /**
     * Second-based 'cron' expression specifying when the data should be fetched. For example, use '*&#47;10 * * * * *' to run the code every 10 seconds.
     */
    workerSchedule?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyDataLoader resource.
 */
export interface PolicyDataLoaderArgs {
    /**
     * Policy data loader description.
     */
    description: pulumi.Input<string>;
    /**
     * The key to access the output data of this policy data loader.
     */
    key: pulumi.Input<string>;
    /**
     * Friendly name for this policy data loader.
     */
    name?: pulumi.Input<string>;
    /**
     * Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
     */
    status: pulumi.Input<string>;
    /**
     * If set to true, this policy data loader cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * The code that will be executed to fetch and output the data.
     */
    workerCode: pulumi.Input<string>;
    /**
     * The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
     */
    workerRuntime: pulumi.Input<string>;
    /**
     * Second-based 'cron' expression specifying when the data should be fetched. For example, use '*&#47;10 * * * * *' to run the code every 10 seconds.
     */
    workerSchedule: pulumi.Input<string>;
}
