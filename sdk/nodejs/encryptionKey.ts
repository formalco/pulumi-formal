// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering an Encryption Key with Formal.
 */
export class EncryptionKey extends pulumi.CustomResource {
    /**
     * Get an existing EncryptionKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EncryptionKeyState, opts?: pulumi.CustomResourceOptions): EncryptionKey {
        return new EncryptionKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/encryptionKey:EncryptionKey';

    /**
     * Returns true if the given object is an instance of EncryptionKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EncryptionKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EncryptionKey.__pulumiType;
    }

    /**
     * The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * When the encryption key was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
     */
    public readonly decryptorUri!: pulumi.Output<string>;
    /**
     * The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The provider of the encryption key. Currently only 'aws' is supported.
     */
    public readonly keyProvider!: pulumi.Output<string>;
    /**
     * Last update time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a EncryptionKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EncryptionKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EncryptionKeyArgs | EncryptionKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EncryptionKeyState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["decryptorUri"] = state ? state.decryptorUri : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyProvider"] = state ? state.keyProvider : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as EncryptionKeyArgs | undefined;
            if ((!args || args.algorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algorithm'");
            }
            if ((!args || args.decryptorUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'decryptorUri'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.keyProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyProvider'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["decryptorUri"] = args ? args.decryptorUri : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyProvider"] = args ? args.keyProvider : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EncryptionKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EncryptionKey resources.
 */
export interface EncryptionKeyState {
    /**
     * The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * When the encryption key was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
     */
    decryptorUri?: pulumi.Input<string>;
    /**
     * The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
     */
    keyId?: pulumi.Input<string>;
    /**
     * The provider of the encryption key. Currently only 'aws' is supported.
     */
    keyProvider?: pulumi.Input<string>;
    /**
     * Last update time.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EncryptionKey resource.
 */
export interface EncryptionKeyArgs {
    /**
     * The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
     */
    algorithm: pulumi.Input<string>;
    /**
     * The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
     */
    decryptorUri: pulumi.Input<string>;
    /**
     * The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
     */
    keyId: pulumi.Input<string>;
    /**
     * The provider of the encryption key. Currently only 'aws' is supported.
     */
    keyProvider: pulumi.Input<string>;
}
