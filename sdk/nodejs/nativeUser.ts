// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource creates a Native User.
 */
export class NativeUser extends pulumi.CustomResource {
    /**
     * Get an existing NativeUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NativeUserState, opts?: pulumi.CustomResourceOptions): NativeUser {
        return new NativeUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/nativeUser:NativeUser';

    /**
     * Returns true if the given object is an instance of NativeUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NativeUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NativeUser.__pulumiType;
    }

    /**
     * The username of the Native User.
     */
    public readonly nativeUserId!: pulumi.Output<string>;
    /**
     * The password of the Native User.
     */
    public readonly nativeUserSecret!: pulumi.Output<string>;
    /**
     * The Sidecar ID for the resource this Native User is for.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * If set to true, this Native User cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The password of the Native User.
     */
    public readonly useAsDefault!: pulumi.Output<boolean | undefined>;

    /**
     * Create a NativeUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NativeUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NativeUserArgs | NativeUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NativeUserState | undefined;
            resourceInputs["nativeUserId"] = state ? state.nativeUserId : undefined;
            resourceInputs["nativeUserSecret"] = state ? state.nativeUserSecret : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["useAsDefault"] = state ? state.useAsDefault : undefined;
        } else {
            const args = argsOrState as NativeUserArgs | undefined;
            if ((!args || args.nativeUserId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nativeUserId'");
            }
            if ((!args || args.nativeUserSecret === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nativeUserSecret'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["nativeUserId"] = args ? args.nativeUserId : undefined;
            resourceInputs["nativeUserSecret"] = args?.nativeUserSecret ? pulumi.secret(args.nativeUserSecret) : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["useAsDefault"] = args ? args.useAsDefault : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["nativeUserSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NativeUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NativeUser resources.
 */
export interface NativeUserState {
    /**
     * The username of the Native User.
     */
    nativeUserId?: pulumi.Input<string>;
    /**
     * The password of the Native User.
     */
    nativeUserSecret?: pulumi.Input<string>;
    /**
     * The Sidecar ID for the resource this Native User is for.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * If set to true, this Native User cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * The password of the Native User.
     */
    useAsDefault?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NativeUser resource.
 */
export interface NativeUserArgs {
    /**
     * The username of the Native User.
     */
    nativeUserId: pulumi.Input<string>;
    /**
     * The password of the Native User.
     */
    nativeUserSecret: pulumi.Input<string>;
    /**
     * The Sidecar ID for the resource this Native User is for.
     */
    resourceId: pulumi.Input<string>;
    /**
     * If set to true, this Native User cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * The password of the Native User.
     */
    useAsDefault?: pulumi.Input<boolean>;
}
