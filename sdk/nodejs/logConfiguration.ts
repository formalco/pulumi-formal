// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Managing Log Configuration with Formal.
 */
export class LogConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LogConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogConfigurationState, opts?: pulumi.CustomResourceOptions): LogConfiguration {
        return new LogConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/logConfiguration:LogConfiguration';

    /**
     * Returns true if the given object is an instance of LogConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogConfiguration.__pulumiType;
    }

    /**
     * When the log configuration was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The ID of the encryption key to use for this log configuration.
     */
    public readonly encryptionKeyId!: pulumi.Output<string>;
    /**
     * The name of this log configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Request logging configuration.
     */
    public readonly request!: pulumi.Output<outputs.LogConfigurationRequest>;
    /**
     * Response logging configuration.
     */
    public readonly response!: pulumi.Output<outputs.LogConfigurationResponse>;
    /**
     * The scope configuration for this log configuration.
     */
    public readonly scope!: pulumi.Output<outputs.LogConfigurationScope>;
    /**
     * Stream logging configuration.
     */
    public readonly stream!: pulumi.Output<outputs.LogConfigurationStream | undefined>;
    /**
     * Last update time.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a LogConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogConfigurationArgs | LogConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogConfigurationState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["encryptionKeyId"] = state ? state.encryptionKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["request"] = state ? state.request : undefined;
            resourceInputs["response"] = state ? state.response : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["stream"] = state ? state.stream : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as LogConfigurationArgs | undefined;
            if ((!args || args.encryptionKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'encryptionKeyId'");
            }
            if ((!args || args.request === undefined) && !opts.urn) {
                throw new Error("Missing required property 'request'");
            }
            if ((!args || args.response === undefined) && !opts.urn) {
                throw new Error("Missing required property 'response'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["encryptionKeyId"] = args ? args.encryptionKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["request"] = args ? args.request : undefined;
            resourceInputs["response"] = args ? args.response : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["stream"] = args ? args.stream : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogConfiguration resources.
 */
export interface LogConfigurationState {
    /**
     * When the log configuration was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the encryption key to use for this log configuration.
     */
    encryptionKeyId?: pulumi.Input<string>;
    /**
     * The name of this log configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Request logging configuration.
     */
    request?: pulumi.Input<inputs.LogConfigurationRequest>;
    /**
     * Response logging configuration.
     */
    response?: pulumi.Input<inputs.LogConfigurationResponse>;
    /**
     * The scope configuration for this log configuration.
     */
    scope?: pulumi.Input<inputs.LogConfigurationScope>;
    /**
     * Stream logging configuration.
     */
    stream?: pulumi.Input<inputs.LogConfigurationStream>;
    /**
     * Last update time.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogConfiguration resource.
 */
export interface LogConfigurationArgs {
    /**
     * The ID of the encryption key to use for this log configuration.
     */
    encryptionKeyId: pulumi.Input<string>;
    /**
     * The name of this log configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Request logging configuration.
     */
    request: pulumi.Input<inputs.LogConfigurationRequest>;
    /**
     * Response logging configuration.
     */
    response: pulumi.Input<inputs.LogConfigurationResponse>;
    /**
     * The scope configuration for this log configuration.
     */
    scope: pulumi.Input<inputs.LogConfigurationScope>;
    /**
     * Stream logging configuration.
     */
    stream?: pulumi.Input<inputs.LogConfigurationStream>;
}
