// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering a Connector Hostname with Formal.
 */
export class ConnectorHostname extends pulumi.CustomResource {
    /**
     * Get an existing ConnectorHostname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectorHostnameState, opts?: pulumi.CustomResourceOptions): ConnectorHostname {
        return new ConnectorHostname(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/connectorHostname:ConnectorHostname';

    /**
     * Returns true if the given object is an instance of ConnectorHostname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectorHostname {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectorHostname.__pulumiType;
    }

    /**
     * The ID of the Connector this hostname is linked to.
     */
    public readonly connectorId!: pulumi.Output<string>;
    /**
     * The DNS record for this hostname.
     */
    public readonly dnsRecord!: pulumi.Output<string | undefined>;
    /**
     * The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
     */
    public /*out*/ readonly dnsRecordStatus!: pulumi.Output<string>;
    /**
     * The hostname for this Connector hostname.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
     *
     * @deprecated This field is deprecated and has no effect. It will be removed in a future release.
     */
    public readonly managedTls!: pulumi.Output<boolean | undefined>;
    /**
     * If set to true, this connector hostname cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
     */
    public /*out*/ readonly tlsCertificateStatus!: pulumi.Output<string>;

    /**
     * Create a ConnectorHostname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectorHostnameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectorHostnameArgs | ConnectorHostnameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectorHostnameState | undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["dnsRecord"] = state ? state.dnsRecord : undefined;
            resourceInputs["dnsRecordStatus"] = state ? state.dnsRecordStatus : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["managedTls"] = state ? state.managedTls : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["tlsCertificateStatus"] = state ? state.tlsCertificateStatus : undefined;
        } else {
            const args = argsOrState as ConnectorHostnameArgs | undefined;
            if ((!args || args.connectorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["dnsRecord"] = args ? args.dnsRecord : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["managedTls"] = args ? args.managedTls : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["dnsRecordStatus"] = undefined /*out*/;
            resourceInputs["tlsCertificateStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectorHostname.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectorHostname resources.
 */
export interface ConnectorHostnameState {
    /**
     * The ID of the Connector this hostname is linked to.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * The DNS record for this hostname.
     */
    dnsRecord?: pulumi.Input<string>;
    /**
     * The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
     */
    dnsRecordStatus?: pulumi.Input<string>;
    /**
     * The hostname for this Connector hostname.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
     *
     * @deprecated This field is deprecated and has no effect. It will be removed in a future release.
     */
    managedTls?: pulumi.Input<boolean>;
    /**
     * If set to true, this connector hostname cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
     */
    tlsCertificateStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectorHostname resource.
 */
export interface ConnectorHostnameArgs {
    /**
     * The ID of the Connector this hostname is linked to.
     */
    connectorId: pulumi.Input<string>;
    /**
     * The DNS record for this hostname.
     */
    dnsRecord?: pulumi.Input<string>;
    /**
     * The hostname for this Connector hostname.
     */
    hostname: pulumi.Input<string>;
    /**
     * Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
     *
     * @deprecated This field is deprecated and has no effect. It will be removed in a future release.
     */
    managedTls?: pulumi.Input<boolean>;
    /**
     * If set to true, this connector hostname cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
