// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Linking a Resource to a Sidecar in Formal.
 */
export class SidecarResourceLink extends pulumi.CustomResource {
    /**
     * Get an existing SidecarResourceLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SidecarResourceLinkState, opts?: pulumi.CustomResourceOptions): SidecarResourceLink {
        return new SidecarResourceLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/sidecarResourceLink:SidecarResourceLink';

    /**
     * Returns true if the given object is an instance of SidecarResourceLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SidecarResourceLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SidecarResourceLink.__pulumiType;
    }

    /**
     * Port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Resource ID to be linked.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * Sidecar ID that should be linked.
     */
    public readonly sidecarId!: pulumi.Output<string>;
    /**
     * If set to true, this Sidecar Datastore Link cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SidecarResourceLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SidecarResourceLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SidecarResourceLinkArgs | SidecarResourceLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SidecarResourceLinkState | undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["sidecarId"] = state ? state.sidecarId : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
        } else {
            const args = argsOrState as SidecarResourceLinkArgs | undefined;
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.sidecarId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sidecarId'");
            }
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["sidecarId"] = args ? args.sidecarId : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SidecarResourceLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SidecarResourceLink resources.
 */
export interface SidecarResourceLinkState {
    /**
     * Port.
     */
    port?: pulumi.Input<number>;
    /**
     * Resource ID to be linked.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Sidecar ID that should be linked.
     */
    sidecarId?: pulumi.Input<string>;
    /**
     * If set to true, this Sidecar Datastore Link cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SidecarResourceLink resource.
 */
export interface SidecarResourceLinkArgs {
    /**
     * Port.
     */
    port: pulumi.Input<number>;
    /**
     * Resource ID to be linked.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Sidecar ID that should be linked.
     */
    sidecarId: pulumi.Input<string>;
    /**
     * If set to true, this Sidecar Datastore Link cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
