// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Registering a Satellite
 */
export class Satellite extends pulumi.CustomResource {
    /**
     * Get an existing Satellite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SatelliteState, opts?: pulumi.CustomResourceOptions): Satellite {
        return new Satellite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/satellite:Satellite';

    /**
     * Returns true if the given object is an instance of Satellite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Satellite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Satellite.__pulumiType;
    }

    /**
     * Api key of the Satellite.
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * Friendly name for the Satellite.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the Space to create the Satellite in.
     */
    public readonly spaceId!: pulumi.Output<string | undefined>;
    /**
     * If set to true, this Satellite cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * TLS certificate of the Satellite.
     */
    public /*out*/ readonly tlsCert!: pulumi.Output<string>;

    /**
     * Create a Satellite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SatelliteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SatelliteArgs | SatelliteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SatelliteState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["tlsCert"] = state ? state.tlsCert : undefined;
        } else {
            const args = argsOrState as SatelliteArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["tlsCert"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Satellite.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Satellite resources.
 */
export interface SatelliteState {
    /**
     * Api key of the Satellite.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Friendly name for the Satellite.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Space to create the Satellite in.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * If set to true, this Satellite cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * TLS certificate of the Satellite.
     */
    tlsCert?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Satellite resource.
 */
export interface SatelliteArgs {
    /**
     * Friendly name for the Satellite.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Space to create the Satellite in.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * If set to true, this Satellite cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
}
