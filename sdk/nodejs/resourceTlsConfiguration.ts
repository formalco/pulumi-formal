// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creating a TLS Configuration of a Resource in Formal.
 */
export class ResourceTlsConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing ResourceTlsConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceTlsConfigurationState, opts?: pulumi.CustomResourceOptions): ResourceTlsConfiguration {
        return new ResourceTlsConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/resourceTlsConfiguration:ResourceTlsConfiguration';

    /**
     * Returns true if the given object is an instance of ResourceTlsConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceTlsConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceTlsConfiguration.__pulumiType;
    }

    /**
     * Resource ID for which the TLS configuration is applied to.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
     */
    public readonly tlsCaTruststore!: pulumi.Output<string | undefined>;
    /**
     * Validation mode for the TLS configuration.
     */
    public readonly tlsConfig!: pulumi.Output<string>;
    /**
     * Minimum TLS version to be used for connections.
     */
    public readonly tlsMinVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a ResourceTlsConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceTlsConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceTlsConfigurationArgs | ResourceTlsConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceTlsConfigurationState | undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["tlsCaTruststore"] = state ? state.tlsCaTruststore : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
            resourceInputs["tlsMinVersion"] = state ? state.tlsMinVersion : undefined;
        } else {
            const args = argsOrState as ResourceTlsConfigurationArgs | undefined;
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.tlsConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tlsConfig'");
            }
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["tlsCaTruststore"] = args ? args.tlsCaTruststore : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["tlsMinVersion"] = args ? args.tlsMinVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceTlsConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceTlsConfiguration resources.
 */
export interface ResourceTlsConfigurationState {
    /**
     * Resource ID for which the TLS configuration is applied to.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
     */
    tlsCaTruststore?: pulumi.Input<string>;
    /**
     * Validation mode for the TLS configuration.
     */
    tlsConfig?: pulumi.Input<string>;
    /**
     * Minimum TLS version to be used for connections.
     */
    tlsMinVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourceTlsConfiguration resource.
 */
export interface ResourceTlsConfigurationArgs {
    /**
     * Resource ID for which the TLS configuration is applied to.
     */
    resourceId: pulumi.Input<string>;
    /**
     * PEM encoded CA certificate to verify resource certificates. Only required if resource certificates are not trusted by the root CA truststore.
     */
    tlsCaTruststore?: pulumi.Input<string>;
    /**
     * Validation mode for the TLS configuration.
     */
    tlsConfig: pulumi.Input<string>;
    /**
     * Minimum TLS version to be used for connections.
     */
    tlsMinVersion?: pulumi.Input<string>;
}
