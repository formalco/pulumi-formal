// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * User in Formal.
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
     */
    public readonly appType!: pulumi.Output<string | undefined>;
    /**
     * The username that the user will use to access the sidecar.
     */
    public /*out*/ readonly dbUsername!: pulumi.Output<string>;
    /**
     * For human users, their email.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
     */
    public readonly expireAt!: pulumi.Output<number | undefined>;
    /**
     * For human users, their first name.
     */
    public readonly firstName!: pulumi.Output<string | undefined>;
    /**
     * For human users, their last name.
     */
    public readonly lastName!: pulumi.Output<string | undefined>;
    /**
     * If the user is of type `machine`, this is the access token (database password) of this user.
     */
    public /*out*/ readonly machineUserAccessToken!: pulumi.Output<string>;
    /**
     * For machine users, the name of the user.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * If set to true, this User cannot be deleted.
     */
    public readonly terminationProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Either 'human' or 'machine'.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["appType"] = state ? state.appType : undefined;
            resourceInputs["dbUsername"] = state ? state.dbUsername : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["expireAt"] = state ? state.expireAt : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["machineUserAccessToken"] = state ? state.machineUserAccessToken : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appType"] = args ? args.appType : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["expireAt"] = args ? args.expireAt : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["dbUsername"] = undefined /*out*/;
            resourceInputs["machineUserAccessToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["machineUserAccessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
     */
    appType?: pulumi.Input<string>;
    /**
     * The username that the user will use to access the sidecar.
     */
    dbUsername?: pulumi.Input<string>;
    /**
     * For human users, their email.
     */
    email?: pulumi.Input<string>;
    /**
     * When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
     */
    expireAt?: pulumi.Input<number>;
    /**
     * For human users, their first name.
     */
    firstName?: pulumi.Input<string>;
    /**
     * For human users, their last name.
     */
    lastName?: pulumi.Input<string>;
    /**
     * If the user is of type `machine`, this is the access token (database password) of this user.
     */
    machineUserAccessToken?: pulumi.Input<string>;
    /**
     * For machine users, the name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * If set to true, this User cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * Either 'human' or 'machine'.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * If the user is of type `machine`, this is an optional designation for the app that this user will be used for. Supported values are `metabase`, `tableau`, and `popsql`.
     */
    appType?: pulumi.Input<string>;
    /**
     * For human users, their email.
     */
    email?: pulumi.Input<string>;
    /**
     * When the Role should be deleted and access revoked. Value should be provided in Unix epoch time, in seconds since midnight UTC of January 1, 1970.
     */
    expireAt?: pulumi.Input<number>;
    /**
     * For human users, their first name.
     */
    firstName?: pulumi.Input<string>;
    /**
     * For human users, their last name.
     */
    lastName?: pulumi.Input<string>;
    /**
     * For machine users, the name of the user.
     */
    name?: pulumi.Input<string>;
    /**
     * If set to true, this User cannot be deleted.
     */
    terminationProtection?: pulumi.Input<boolean>;
    /**
     * Either 'human' or 'machine'.
     */
    type: pulumi.Input<string>;
}
