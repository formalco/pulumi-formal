// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DataDomainOwner {
    objectId: pulumi.Input<string>;
    objectType: pulumi.Input<string>;
}

export interface IntegrationBiMetabase {
    /**
     * Hostname of the Metabase instance.
     */
    hostname: pulumi.Input<string>;
    /**
     * Password for the Metabase instance.
     */
    password: pulumi.Input<string>;
    /**
     * Username for the Metabase instance.
     */
    username: pulumi.Input<string>;
}

export interface IntegrationCloudAws {
    /**
     * Allows the Cloud Integration to access S3 buckets for Log Integrations.
     */
    allowS3Access?: pulumi.Input<boolean>;
    /**
     * The ARN of the IAM role that Formal assumes in your AWS account to access your resources.
     */
    awsCustomerRoleArn?: pulumi.Input<string>;
    /**
     * Enables resource autodiscovery for EC2 instances.
     */
    enableEc2Autodiscovery?: pulumi.Input<boolean>;
    /**
     * Enables resource autodiscovery for ECS clusters.
     */
    enableEcsAutodiscovery?: pulumi.Input<boolean>;
    /**
     * Enables resource autodiscovery for EKS clusters.
     */
    enableEksAutodiscovery?: pulumi.Input<boolean>;
    /**
     * Enables resource autodiscovery for RDS instances (PostgreSQL, MySQL, MongoDB).
     */
    enableRdsAutodiscovery?: pulumi.Input<boolean>;
    /**
     * Enables resource autodiscovery for Redshift clusters.
     */
    enableRedshiftAutodiscovery?: pulumi.Input<boolean>;
    /**
     * The S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations.
     */
    s3BucketArn?: pulumi.Input<string>;
    /**
     * The template version of the CloudFormation stack. Use `latest` to stay in sync.
     */
    templateVersion: pulumi.Input<string>;
}

export interface IntegrationDataCatalogDatahub {
    /**
     * Api Key for the Datahub instance.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Generalized metadata service url for the Datahub instance.
     */
    generalizedMetadataServiceUrl: pulumi.Input<string>;
    /**
     * Webhook secret of the Datahub instance.
     */
    webhookSecret: pulumi.Input<string>;
}

export interface IntegrationLogAwsS3 {
    /**
     * Cloud Integration ID.
     */
    cloudIntegrationId: pulumi.Input<string>;
    /**
     * AWS Region.
     */
    region?: pulumi.Input<string>;
    /**
     * AWS S3 Bucket Name.
     */
    s3BucketName: pulumi.Input<string>;
}

export interface IntegrationLogDatadog {
    /**
     * Account ID of Datadog.
     */
    accountId: pulumi.Input<string>;
    /**
     * API Key of Datadog.
     */
    apiKey: pulumi.Input<string>;
    /**
     * URL of your Datadog app.
     */
    site: pulumi.Input<string>;
}

export interface IntegrationLogSplunk {
    /**
     * Access Token of Splunk.
     */
    accessToken: pulumi.Input<string>;
    /**
     * URL of your Splunk app.
     */
    host: pulumi.Input<string>;
    /**
     * Port of your Splunk app.
     */
    port: pulumi.Input<number>;
}

export interface IntegrationMdmKandji {
    /**
     * API Key of your Kandji organization.
     */
    apiKey: pulumi.Input<string>;
    /**
     * API URL of your Kandji organization.
     */
    apiUrl: pulumi.Input<string>;
}

export interface IntegrationMfaDuo {
    /**
     * Duo API Hostname.
     */
    apiHostname: pulumi.Input<string>;
    /**
     * Duo Integration Key.
     */
    integrationKey: pulumi.Input<string>;
    /**
     * Duo Secret Key.
     */
    secretKey: pulumi.Input<string>;
}

export interface LogConfigurationRequest {
    /**
     * Whether to encrypt request payloads.
     */
    encrypt: pulumi.Input<boolean>;
    /**
     * Maximum size of request payloads to log.
     */
    maxPayloadSize: pulumi.Input<number>;
    /**
     * SQL logging configuration for requests.
     */
    sql?: pulumi.Input<inputs.LogConfigurationRequestSql>;
}

export interface LogConfigurationRequestSql {
    /**
     * Whether to encrypt SQL queries in logs.
     */
    encrypt: pulumi.Input<boolean>;
    /**
     * Whether to obfuscate SQL queries in logs.
     */
    stripValues: pulumi.Input<boolean>;
}

export interface LogConfigurationResponse {
    /**
     * Whether to encrypt response payloads.
     */
    encrypt: pulumi.Input<boolean>;
    /**
     * Maximum size of response payloads to log.
     */
    maxPayloadSize: pulumi.Input<number>;
}

export interface LogConfigurationScope {
    /**
     * The ID of the connector (required when type is connector).
     */
    connectorId?: pulumi.Input<string>;
    /**
     * The ID of the resource (required when type is resource).
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The ID of the space (required when type is space).
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The type of scope (resource, connector, space, org).
     */
    type: pulumi.Input<string>;
}

export interface LogConfigurationStream {
    /**
     * Whether to encrypt stream data.
     */
    encrypt: pulumi.Input<boolean>;
}
