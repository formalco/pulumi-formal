// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Registering a Integration Logs app.
 */
export class IntegrationLog extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationLogState, opts?: pulumi.CustomResourceOptions): IntegrationLog {
        return new IntegrationLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'formal:index/integrationLog:IntegrationLog';

    /**
     * Returns true if the given object is an instance of IntegrationLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationLog.__pulumiType;
    }

    /**
     * Configuration block for AWS S3 integration.
     */
    public readonly awsS3!: pulumi.Output<outputs.IntegrationLogAwsS3 | undefined>;
    /**
     * Configuration block for Datadog integration.
     */
    public readonly datadog!: pulumi.Output<outputs.IntegrationLogDatadog | undefined>;
    /**
     * Friendly name for the Integration app.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configuration block for Splunk integration.
     */
    public readonly splunk!: pulumi.Output<outputs.IntegrationLogSplunk | undefined>;

    /**
     * Create a IntegrationLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IntegrationLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationLogArgs | IntegrationLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationLogState | undefined;
            resourceInputs["awsS3"] = state ? state.awsS3 : undefined;
            resourceInputs["datadog"] = state ? state.datadog : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["splunk"] = state ? state.splunk : undefined;
        } else {
            const args = argsOrState as IntegrationLogArgs | undefined;
            resourceInputs["awsS3"] = args ? args.awsS3 : undefined;
            resourceInputs["datadog"] = args ? args.datadog : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["splunk"] = args ? args.splunk : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationLog resources.
 */
export interface IntegrationLogState {
    /**
     * Configuration block for AWS S3 integration.
     */
    awsS3?: pulumi.Input<inputs.IntegrationLogAwsS3>;
    /**
     * Configuration block for Datadog integration.
     */
    datadog?: pulumi.Input<inputs.IntegrationLogDatadog>;
    /**
     * Friendly name for the Integration app.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block for Splunk integration.
     */
    splunk?: pulumi.Input<inputs.IntegrationLogSplunk>;
}

/**
 * The set of arguments for constructing a IntegrationLog resource.
 */
export interface IntegrationLogArgs {
    /**
     * Configuration block for AWS S3 integration.
     */
    awsS3?: pulumi.Input<inputs.IntegrationLogAwsS3>;
    /**
     * Configuration block for Datadog integration.
     */
    datadog?: pulumi.Input<inputs.IntegrationLogDatadog>;
    /**
     * Friendly name for the Integration app.
     */
    name?: pulumi.Input<string>;
    /**
     * Configuration block for Splunk integration.
     */
    splunk?: pulumi.Input<inputs.IntegrationLogSplunk>;
}
