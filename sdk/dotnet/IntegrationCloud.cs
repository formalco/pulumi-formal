// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Formal
{
    /// <summary>
    /// Registering a Cloud integration.
    /// </summary>
    [FormalResourceType("formal:index/integrationCloud:IntegrationCloud")]
    public partial class IntegrationCloud : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration block for AWS integration.
        /// </summary>
        [Output("aws")]
        public Output<Outputs.IntegrationCloudAws?> Aws { get; private set; } = null!;

        /// <summary>
        /// Whether AWS S3 access is allowed or not.
        /// </summary>
        [Output("awsAllowS3Access")]
        public Output<bool> AwsAllowS3Access { get; private set; } = null!;

        /// <summary>
        /// Whether AWS EC2 autodiscovery is enabled or not.
        /// </summary>
        [Output("awsEnableEc2Autodiscovery")]
        public Output<bool> AwsEnableEc2Autodiscovery { get; private set; } = null!;

        /// <summary>
        /// Whether AWS ECS autodiscovery is enabled or not.
        /// </summary>
        [Output("awsEnableEcsAutodiscovery")]
        public Output<bool> AwsEnableEcsAutodiscovery { get; private set; } = null!;

        /// <summary>
        /// Whether AWS EKS autodiscovery is enabled or not.
        /// </summary>
        [Output("awsEnableEksAutodiscovery")]
        public Output<bool> AwsEnableEksAutodiscovery { get; private set; } = null!;

        /// <summary>
        /// Whether AWS RDS autodiscovery is enabled or not.
        /// </summary>
        [Output("awsEnableRdsAutodiscovery")]
        public Output<bool> AwsEnableRdsAutodiscovery { get; private set; } = null!;

        /// <summary>
        /// Whether AWS Redshift autodiscovery is enabled or not.
        /// </summary>
        [Output("awsEnableRedshiftAutodiscovery")]
        public Output<bool> AwsEnableRedshiftAutodiscovery { get; private set; } = null!;

        /// <summary>
        /// The IAM role ID Formal will use to access your resources.
        /// </summary>
        [Output("awsFormalIamRole")]
        public Output<string> AwsFormalIamRole { get; private set; } = null!;

        /// <summary>
        /// The SNS topic ARN CloudFormation can use to send events to Formal.
        /// </summary>
        [Output("awsFormalPingbackArn")]
        public Output<string> AwsFormalPingbackArn { get; private set; } = null!;

        /// <summary>
        /// A generated name for your CloudFormation stack.
        /// </summary>
        [Output("awsFormalStackName")]
        public Output<string> AwsFormalStackName { get; private set; } = null!;

        /// <summary>
        /// The AWS S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations, if it is allowed to access S3.
        /// </summary>
        [Output("awsS3BucketArn")]
        public Output<string> AwsS3BucketArn { get; private set; } = null!;

        /// <summary>
        /// The template body of the CloudFormation stack.
        /// </summary>
        [Output("awsTemplateBody")]
        public Output<string> AwsTemplateBody { get; private set; } = null!;

        /// <summary>
        /// Region of the cloud provider.
        /// </summary>
        [Output("cloudRegion")]
        public Output<string> CloudRegion { get; private set; } = null!;

        /// <summary>
        /// Name of the Integration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Type of the Integration. (Supported: aws)
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationCloud resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationCloud(string name, IntegrationCloudArgs args, CustomResourceOptions? options = null)
            : base("formal:index/integrationCloud:IntegrationCloud", name, args ?? new IntegrationCloudArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationCloud(string name, Input<string> id, IntegrationCloudState? state = null, CustomResourceOptions? options = null)
            : base("formal:index/integrationCloud:IntegrationCloud", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationCloud resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationCloud Get(string name, Input<string> id, IntegrationCloudState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationCloud(name, id, state, options);
        }
    }

    public sealed class IntegrationCloudArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for AWS integration.
        /// </summary>
        [Input("aws")]
        public Input<Inputs.IntegrationCloudAwsArgs>? Aws { get; set; }

        /// <summary>
        /// Region of the cloud provider.
        /// </summary>
        [Input("cloudRegion", required: true)]
        public Input<string> CloudRegion { get; set; } = null!;

        /// <summary>
        /// Name of the Integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of the Integration. (Supported: aws)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public IntegrationCloudArgs()
        {
        }
        public static new IntegrationCloudArgs Empty => new IntegrationCloudArgs();
    }

    public sealed class IntegrationCloudState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for AWS integration.
        /// </summary>
        [Input("aws")]
        public Input<Inputs.IntegrationCloudAwsGetArgs>? Aws { get; set; }

        /// <summary>
        /// Whether AWS S3 access is allowed or not.
        /// </summary>
        [Input("awsAllowS3Access")]
        public Input<bool>? AwsAllowS3Access { get; set; }

        /// <summary>
        /// Whether AWS EC2 autodiscovery is enabled or not.
        /// </summary>
        [Input("awsEnableEc2Autodiscovery")]
        public Input<bool>? AwsEnableEc2Autodiscovery { get; set; }

        /// <summary>
        /// Whether AWS ECS autodiscovery is enabled or not.
        /// </summary>
        [Input("awsEnableEcsAutodiscovery")]
        public Input<bool>? AwsEnableEcsAutodiscovery { get; set; }

        /// <summary>
        /// Whether AWS EKS autodiscovery is enabled or not.
        /// </summary>
        [Input("awsEnableEksAutodiscovery")]
        public Input<bool>? AwsEnableEksAutodiscovery { get; set; }

        /// <summary>
        /// Whether AWS RDS autodiscovery is enabled or not.
        /// </summary>
        [Input("awsEnableRdsAutodiscovery")]
        public Input<bool>? AwsEnableRdsAutodiscovery { get; set; }

        /// <summary>
        /// Whether AWS Redshift autodiscovery is enabled or not.
        /// </summary>
        [Input("awsEnableRedshiftAutodiscovery")]
        public Input<bool>? AwsEnableRedshiftAutodiscovery { get; set; }

        /// <summary>
        /// The IAM role ID Formal will use to access your resources.
        /// </summary>
        [Input("awsFormalIamRole")]
        public Input<string>? AwsFormalIamRole { get; set; }

        /// <summary>
        /// The SNS topic ARN CloudFormation can use to send events to Formal.
        /// </summary>
        [Input("awsFormalPingbackArn")]
        public Input<string>? AwsFormalPingbackArn { get; set; }

        /// <summary>
        /// A generated name for your CloudFormation stack.
        /// </summary>
        [Input("awsFormalStackName")]
        public Input<string>? AwsFormalStackName { get; set; }

        /// <summary>
        /// The AWS S3 bucket ARN this Cloud Integration is allowed to use for Log Integrations, if it is allowed to access S3.
        /// </summary>
        [Input("awsS3BucketArn")]
        public Input<string>? AwsS3BucketArn { get; set; }

        /// <summary>
        /// The template body of the CloudFormation stack.
        /// </summary>
        [Input("awsTemplateBody")]
        public Input<string>? AwsTemplateBody { get; set; }

        /// <summary>
        /// Region of the cloud provider.
        /// </summary>
        [Input("cloudRegion")]
        public Input<string>? CloudRegion { get; set; }

        /// <summary>
        /// Name of the Integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of the Integration. (Supported: aws)
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public IntegrationCloudState()
        {
        }
        public static new IntegrationCloudState Empty => new IntegrationCloudState();
    }
}
