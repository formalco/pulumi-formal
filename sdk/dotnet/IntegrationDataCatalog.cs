// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Formal
{
    /// <summary>
    /// Registering a Data Catalog integration.
    /// </summary>
    [FormalResourceType("formal:index/integrationDataCatalog:IntegrationDataCatalog")]
    public partial class IntegrationDataCatalog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        /// </summary>
        [Output("datahub")]
        public Output<Outputs.IntegrationDataCatalogDatahub?> Datahub { get; private set; } = null!;

        /// <summary>
        /// Name of the Integration
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        /// </summary>
        [Output("syncDirection")]
        public Output<string> SyncDirection { get; private set; } = null!;

        /// <summary>
        /// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        /// </summary>
        [Output("syncedEntities")]
        public Output<ImmutableArray<string>> SyncedEntities { get; private set; } = null!;


        /// <summary>
        /// Create a IntegrationDataCatalog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IntegrationDataCatalog(string name, IntegrationDataCatalogArgs args, CustomResourceOptions? options = null)
            : base("formal:index/integrationDataCatalog:IntegrationDataCatalog", name, args ?? new IntegrationDataCatalogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IntegrationDataCatalog(string name, Input<string> id, IntegrationDataCatalogState? state = null, CustomResourceOptions? options = null)
            : base("formal:index/integrationDataCatalog:IntegrationDataCatalog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IntegrationDataCatalog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IntegrationDataCatalog Get(string name, Input<string> id, IntegrationDataCatalogState? state = null, CustomResourceOptions? options = null)
        {
            return new IntegrationDataCatalog(name, id, state, options);
        }
    }

    public sealed class IntegrationDataCatalogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        /// </summary>
        [Input("datahub")]
        public Input<Inputs.IntegrationDataCatalogDatahubArgs>? Datahub { get; set; }

        /// <summary>
        /// Name of the Integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        /// </summary>
        [Input("syncDirection", required: true)]
        public Input<string> SyncDirection { get; set; } = null!;

        [Input("syncedEntities", required: true)]
        private InputList<string>? _syncedEntities;

        /// <summary>
        /// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        /// </summary>
        public InputList<string> SyncedEntities
        {
            get => _syncedEntities ?? (_syncedEntities = new InputList<string>());
            set => _syncedEntities = value;
        }

        public IntegrationDataCatalogArgs()
        {
        }
        public static new IntegrationDataCatalogArgs Empty => new IntegrationDataCatalogArgs();
    }

    public sealed class IntegrationDataCatalogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for Datahub integration. This block is optional and may be omitted if not configuring a Datahub integration.
        /// </summary>
        [Input("datahub")]
        public Input<Inputs.IntegrationDataCatalogDatahubGetArgs>? Datahub { get; set; }

        /// <summary>
        /// Name of the Integration
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Sync direction of the Integration: supported values are 'bidirectional', 'formal*to*datahub', 'datahub*to*formal'.
        /// </summary>
        [Input("syncDirection")]
        public Input<string>? SyncDirection { get; set; }

        [Input("syncedEntities")]
        private InputList<string>? _syncedEntities;

        /// <summary>
        /// Synced entities of the Integration: currently supported values are 'tags', 'data_labels'.
        /// </summary>
        public InputList<string> SyncedEntities
        {
            get => _syncedEntities ?? (_syncedEntities = new InputList<string>());
            set => _syncedEntities = value;
        }

        public IntegrationDataCatalogState()
        {
        }
        public static new IntegrationDataCatalogState Empty => new IntegrationDataCatalogState();
    }
}
