// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Formal
{
    /// <summary>
    /// Registering a Sidecar with Formal.
    /// </summary>
    [FormalResourceType("formal:index/sidecar:Sidecar")]
    public partial class Sidecar : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Api key for the deployed Sidecar.
        /// </summary>
        [Output("apiKey")]
        public Output<string> ApiKey { get; private set; } = null!;

        /// <summary>
        /// Creation time of the sidecar.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// If deployment_type is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
        /// </summary>
        [Output("formalControlPlaneTlsCertificate")]
        public Output<string> FormalControlPlaneTlsCertificate { get; private set; } = null!;

        /// <summary>
        /// The hostname of the created sidecar.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// Friendly name for this Sidecar.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        /// </summary>
        [Output("technology")]
        public Output<string> Technology { get; private set; } = null!;

        /// <summary>
        /// If set to true, this Sidecar cannot be deleted.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;

        /// <summary>
        /// Version of the Sidecar to deploy for `managed`.
        /// </summary>
        [Output("version")]
        public Output<string?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Sidecar resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Sidecar(string name, SidecarArgs args, CustomResourceOptions? options = null)
            : base("formal:index/sidecar:Sidecar", name, args ?? new SidecarArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Sidecar(string name, Input<string> id, SidecarState? state = null, CustomResourceOptions? options = null)
            : base("formal:index/sidecar:Sidecar", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/formalco",
                AdditionalSecretOutputs =
                {
                    "apiKey",
                    "formalControlPlaneTlsCertificate",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Sidecar resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Sidecar Get(string name, Input<string> id, SidecarState? state = null, CustomResourceOptions? options = null)
        {
            return new Sidecar(name, id, state, options);
        }
    }

    public sealed class SidecarArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hostname of the created sidecar.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// Friendly name for this Sidecar.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        /// </summary>
        [Input("technology", required: true)]
        public Input<string> Technology { get; set; } = null!;

        /// <summary>
        /// If set to true, this Sidecar cannot be deleted.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// Version of the Sidecar to deploy for `managed`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public SidecarArgs()
        {
        }
        public static new SidecarArgs Empty => new SidecarArgs();
    }

    public sealed class SidecarState : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;

        /// <summary>
        /// Api key for the deployed Sidecar.
        /// </summary>
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Creation time of the sidecar.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("formalControlPlaneTlsCertificate")]
        private Input<string>? _formalControlPlaneTlsCertificate;

        /// <summary>
        /// If deployment_type is onprem, this is the Control Plane TLS Certificate to add to the deployed Sidecar.
        /// </summary>
        public Input<string>? FormalControlPlaneTlsCertificate
        {
            get => _formalControlPlaneTlsCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _formalControlPlaneTlsCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The hostname of the created sidecar.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Friendly name for this Sidecar.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Technology of the Datastore: supported values are`snowflake`, `postgres`, `redshift`, `mysql`, `mariadb`, `s3`, `dynamodb`, `mongodb`, `documentdb`, `http` and `ssh`.
        /// </summary>
        [Input("technology")]
        public Input<string>? Technology { get; set; }

        /// <summary>
        /// If set to true, this Sidecar cannot be deleted.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// Version of the Sidecar to deploy for `managed`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public SidecarState()
        {
        }
        public static new SidecarState Empty => new SidecarState();
    }
}
