// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Formal.Pulumi
{
    /// <summary>
    /// Registering a Data Domain with Formal.
    /// </summary>
    [PulumiResourceType("formal:index/dataDomain:DataDomain")]
    public partial class DataDomain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When the policy was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the data domain.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Excluded paths of this data domain.
        /// </summary>
        [Output("excludedPaths")]
        public Output<ImmutableArray<string>> ExcludedPaths { get; private set; } = null!;

        /// <summary>
        /// Included paths of this data domain.
        /// </summary>
        [Output("includedPaths")]
        public Output<ImmutableArray<string>> IncludedPaths { get; private set; } = null!;

        /// <summary>
        /// Name of the data domain.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Owners of this policy.
        /// </summary>
        [Output("owners")]
        public Output<ImmutableArray<Outputs.DataDomainOwner>> Owners { get; private set; } = null!;

        /// <summary>
        /// Last update time.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a DataDomain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataDomain(string name, DataDomainArgs args, CustomResourceOptions? options = null)
            : base("formal:index/dataDomain:DataDomain", name, args ?? new DataDomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataDomain(string name, Input<string> id, DataDomainState? state = null, CustomResourceOptions? options = null)
            : base("formal:index/dataDomain:DataDomain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/formalco",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataDomain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataDomain Get(string name, Input<string> id, DataDomainState? state = null, CustomResourceOptions? options = null)
        {
            return new DataDomain(name, id, state, options);
        }
    }

    public sealed class DataDomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the data domain.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("excludedPaths", required: true)]
        private InputList<string>? _excludedPaths;

        /// <summary>
        /// Excluded paths of this data domain.
        /// </summary>
        public InputList<string> ExcludedPaths
        {
            get => _excludedPaths ?? (_excludedPaths = new InputList<string>());
            set => _excludedPaths = value;
        }

        [Input("includedPaths", required: true)]
        private InputList<string>? _includedPaths;

        /// <summary>
        /// Included paths of this data domain.
        /// </summary>
        public InputList<string> IncludedPaths
        {
            get => _includedPaths ?? (_includedPaths = new InputList<string>());
            set => _includedPaths = value;
        }

        /// <summary>
        /// Name of the data domain.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owners", required: true)]
        private InputList<Inputs.DataDomainOwnerArgs>? _owners;

        /// <summary>
        /// Owners of this policy.
        /// </summary>
        public InputList<Inputs.DataDomainOwnerArgs> Owners
        {
            get => _owners ?? (_owners = new InputList<Inputs.DataDomainOwnerArgs>());
            set => _owners = value;
        }

        public DataDomainArgs()
        {
        }
        public static new DataDomainArgs Empty => new DataDomainArgs();
    }

    public sealed class DataDomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the policy was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the data domain.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("excludedPaths")]
        private InputList<string>? _excludedPaths;

        /// <summary>
        /// Excluded paths of this data domain.
        /// </summary>
        public InputList<string> ExcludedPaths
        {
            get => _excludedPaths ?? (_excludedPaths = new InputList<string>());
            set => _excludedPaths = value;
        }

        [Input("includedPaths")]
        private InputList<string>? _includedPaths;

        /// <summary>
        /// Included paths of this data domain.
        /// </summary>
        public InputList<string> IncludedPaths
        {
            get => _includedPaths ?? (_includedPaths = new InputList<string>());
            set => _includedPaths = value;
        }

        /// <summary>
        /// Name of the data domain.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owners")]
        private InputList<Inputs.DataDomainOwnerGetArgs>? _owners;

        /// <summary>
        /// Owners of this policy.
        /// </summary>
        public InputList<Inputs.DataDomainOwnerGetArgs> Owners
        {
            get => _owners ?? (_owners = new InputList<Inputs.DataDomainOwnerGetArgs>());
            set => _owners = value;
        }

        /// <summary>
        /// Last update time.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public DataDomainState()
        {
        }
        public static new DataDomainState Empty => new DataDomainState();
    }
}
