// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Formal
{
    public static class GetResource
    {
        /// <summary>
        /// Data source for looking up a Resource by name.
        /// </summary>
        public static Task<GetResourceResult> InvokeAsync(GetResourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResourceResult>("formal:index/getResource:getResource", args ?? new GetResourceArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for looking up a Resource by name.
        /// </summary>
        public static Output<GetResourceResult> Invoke(GetResourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceResult>("formal:index/getResource:getResource", args ?? new GetResourceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for looking up a Resource by name.
        /// </summary>
        public static Output<GetResourceResult> Invoke(GetResourceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetResourceResult>("formal:index/getResource:getResource", args ?? new GetResourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Resource.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetResourceArgs()
        {
        }
        public static new GetResourceArgs Empty => new GetResourceArgs();
    }

    public sealed class GetResourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Resource.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetResourceInvokeArgs()
        {
        }
        public static new GetResourceInvokeArgs Empty => new GetResourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetResourceResult
    {
        /// <summary>
        /// Creation time of the Resource.
        /// </summary>
        public readonly int CreatedAt;
        /// <summary>
        /// Environment for the Resource.
        /// </summary>
        public readonly string Environment;
        /// <summary>
        /// Hostname of the Resource.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Resource.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The port your Resource is listening on.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The ID of the Space the Resource is in.
        /// </summary>
        public readonly string SpaceId;
        /// <summary>
        /// Technology of the Resource.
        /// </summary>
        public readonly string Technology;
        /// <summary>
        /// If set to true, the Resource cannot be deleted.
        /// </summary>
        public readonly bool TerminationProtection;

        [OutputConstructor]
        private GetResourceResult(
            int createdAt,

            string environment,

            string hostname,

            string id,

            string name,

            int port,

            string spaceId,

            string technology,

            bool terminationProtection)
        {
            CreatedAt = createdAt;
            Environment = environment;
            Hostname = hostname;
            Id = id;
            Name = name;
            Port = port;
            SpaceId = spaceId;
            Technology = technology;
            TerminationProtection = terminationProtection;
        }
    }
}
