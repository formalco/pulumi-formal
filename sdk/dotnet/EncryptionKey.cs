// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Formal
{
    /// <summary>
    /// Registering an Encryption Key with Formal.
    /// </summary>
    [FormalResourceType("formal:index/encryptionKey:EncryptionKey")]
    public partial class EncryptionKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        /// </summary>
        [Output("algorithm")]
        public Output<string> Algorithm { get; private set; } = null!;

        /// <summary>
        /// When the encryption key was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        /// </summary>
        [Output("decryptorUri")]
        public Output<string> DecryptorUri { get; private set; } = null!;

        /// <summary>
        /// The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// The provider of the encryption key. Currently only 'aws' is supported.
        /// </summary>
        [Output("keyProvider")]
        public Output<string> KeyProvider { get; private set; } = null!;

        /// <summary>
        /// Last update time.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a EncryptionKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EncryptionKey(string name, EncryptionKeyArgs args, CustomResourceOptions? options = null)
            : base("formal:index/encryptionKey:EncryptionKey", name, args ?? new EncryptionKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EncryptionKey(string name, Input<string> id, EncryptionKeyState? state = null, CustomResourceOptions? options = null)
            : base("formal:index/encryptionKey:EncryptionKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/formalco",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EncryptionKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EncryptionKey Get(string name, Input<string> id, EncryptionKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new EncryptionKey(name, id, state, options);
        }
    }

    public sealed class EncryptionKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        /// </summary>
        [Input("algorithm", required: true)]
        public Input<string> Algorithm { get; set; } = null!;

        /// <summary>
        /// The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        /// </summary>
        [Input("decryptorUri", required: true)]
        public Input<string> DecryptorUri { get; set; } = null!;

        /// <summary>
        /// The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        /// <summary>
        /// The provider of the encryption key. Currently only 'aws' is supported.
        /// </summary>
        [Input("keyProvider", required: true)]
        public Input<string> KeyProvider { get; set; } = null!;

        public EncryptionKeyArgs()
        {
        }
        public static new EncryptionKeyArgs Empty => new EncryptionKeyArgs();
    }

    public sealed class EncryptionKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The algorithm used for encryption. Can be either 'aes*random' or 'aes*deterministic'.
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// When the encryption key was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The URI of the decryptor (e.g., a URL to a Lambda function, either directly or via API Gateway). This is used to decrypt the data on the frontend only (and is never called by the Formal Control Plane backend).
        /// </summary>
        [Input("decryptorUri")]
        public Input<string>? DecryptorUri { get; set; }

        /// <summary>
        /// The ID of the key in the provider's system (e.g., key ARN for AWS KMS).
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The provider of the encryption key. Currently only 'aws' is supported.
        /// </summary>
        [Input("keyProvider")]
        public Input<string>? KeyProvider { get; set; }

        /// <summary>
        /// Last update time.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public EncryptionKeyState()
        {
        }
        public static new EncryptionKeyState Empty => new EncryptionKeyState();
    }
}
