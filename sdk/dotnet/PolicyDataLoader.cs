// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Formal.Pulumi
{
    /// <summary>
    /// Registering a policy data loader with Formal.
    /// </summary>
    [PulumiResourceType("formal:index/policyDataLoader:PolicyDataLoader")]
    public partial class PolicyDataLoader : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When the policy data loader was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Policy data loader description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The key to access the output data of this policy data loader.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Friendly name for this policy data loader.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// If set to true, this policy data loader cannot be deleted.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;

        /// <summary>
        /// Last update time.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The code that will be executed to fetch and output the data.
        /// </summary>
        [Output("workerCode")]
        public Output<string> WorkerCode { get; private set; } = null!;

        /// <summary>
        /// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        /// </summary>
        [Output("workerRuntime")]
        public Output<string> WorkerRuntime { get; private set; } = null!;

        /// <summary>
        /// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        /// </summary>
        [Output("workerSchedule")]
        public Output<string> WorkerSchedule { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyDataLoader resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyDataLoader(string name, PolicyDataLoaderArgs args, CustomResourceOptions? options = null)
            : base("formal:index/policyDataLoader:PolicyDataLoader", name, args ?? new PolicyDataLoaderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyDataLoader(string name, Input<string> id, PolicyDataLoaderState? state = null, CustomResourceOptions? options = null)
            : base("formal:index/policyDataLoader:PolicyDataLoader", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/formalco",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyDataLoader resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyDataLoader Get(string name, Input<string> id, PolicyDataLoaderState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyDataLoader(name, id, state, options);
        }
    }

    public sealed class PolicyDataLoaderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Policy data loader description.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The key to access the output data of this policy data loader.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// Friendly name for this policy data loader.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// If set to true, this policy data loader cannot be deleted.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// The code that will be executed to fetch and output the data.
        /// </summary>
        [Input("workerCode", required: true)]
        public Input<string> WorkerCode { get; set; } = null!;

        /// <summary>
        /// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        /// </summary>
        [Input("workerRuntime", required: true)]
        public Input<string> WorkerRuntime { get; set; } = null!;

        /// <summary>
        /// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        /// </summary>
        [Input("workerSchedule", required: true)]
        public Input<string> WorkerSchedule { get; set; } = null!;

        public PolicyDataLoaderArgs()
        {
        }
        public static new PolicyDataLoaderArgs Empty => new PolicyDataLoaderArgs();
    }

    public sealed class PolicyDataLoaderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the policy data loader was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Policy data loader description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The key to access the output data of this policy data loader.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// Friendly name for this policy data loader.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines the current status of the policy data loader. It can be one of the following: 'draft' or 'active'.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// If set to true, this policy data loader cannot be deleted.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// Last update time.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The code that will be executed to fetch and output the data.
        /// </summary>
        [Input("workerCode")]
        public Input<string>? WorkerCode { get; set; }

        /// <summary>
        /// The execution environment for the code. It can be one of the following: 'python3.11' or 'nodejs18.x'.
        /// </summary>
        [Input("workerRuntime")]
        public Input<string>? WorkerRuntime { get; set; }

        /// <summary>
        /// Second-based 'cron' expression specifying when the data should be fetched. For example, use '*/10 * * * * *' to run the code every 10 seconds.
        /// </summary>
        [Input("workerSchedule")]
        public Input<string>? WorkerSchedule { get; set; }

        public PolicyDataLoaderState()
        {
        }
        public static new PolicyDataLoaderState Empty => new PolicyDataLoaderState();
    }
}
