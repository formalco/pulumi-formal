// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Formal.Pulumi
{
    /// <summary>
    /// Registering a Connector Hostname with Formal.
    /// </summary>
    [PulumiResourceType("formal:index/connectorHostname:ConnectorHostname")]
    public partial class ConnectorHostname : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Connector this hostname is linked to.
        /// </summary>
        [Output("connectorId")]
        public Output<string> ConnectorId { get; private set; } = null!;

        /// <summary>
        /// The DNS record for this hostname.
        /// </summary>
        [Output("dnsRecord")]
        public Output<string?> DnsRecord { get; private set; } = null!;

        /// <summary>
        /// The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
        /// </summary>
        [Output("dnsRecordStatus")]
        public Output<string> DnsRecordStatus { get; private set; } = null!;

        /// <summary>
        /// The hostname for this Connector hostname.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        /// </summary>
        [Output("managedTls")]
        public Output<bool?> ManagedTls { get; private set; } = null!;

        /// <summary>
        /// If set to true, this connector hostname cannot be deleted.
        /// </summary>
        [Output("terminationProtection")]
        public Output<bool?> TerminationProtection { get; private set; } = null!;

        /// <summary>
        /// The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
        /// </summary>
        [Output("tlsCertificateStatus")]
        public Output<string> TlsCertificateStatus { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectorHostname resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectorHostname(string name, ConnectorHostnameArgs args, CustomResourceOptions? options = null)
            : base("formal:index/connectorHostname:ConnectorHostname", name, args ?? new ConnectorHostnameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectorHostname(string name, Input<string> id, ConnectorHostnameState? state = null, CustomResourceOptions? options = null)
            : base("formal:index/connectorHostname:ConnectorHostname", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/formalco",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectorHostname resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectorHostname Get(string name, Input<string> id, ConnectorHostnameState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectorHostname(name, id, state, options);
        }
    }

    public sealed class ConnectorHostnameArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Connector this hostname is linked to.
        /// </summary>
        [Input("connectorId", required: true)]
        public Input<string> ConnectorId { get; set; } = null!;

        /// <summary>
        /// The DNS record for this hostname.
        /// </summary>
        [Input("dnsRecord")]
        public Input<string>? DnsRecord { get; set; }

        /// <summary>
        /// The hostname for this Connector hostname.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        /// </summary>
        [Input("managedTls")]
        public Input<bool>? ManagedTls { get; set; }

        /// <summary>
        /// If set to true, this connector hostname cannot be deleted.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        public ConnectorHostnameArgs()
        {
        }
        public static new ConnectorHostnameArgs Empty => new ConnectorHostnameArgs();
    }

    public sealed class ConnectorHostnameState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Connector this hostname is linked to.
        /// </summary>
        [Input("connectorId")]
        public Input<string>? ConnectorId { get; set; }

        /// <summary>
        /// The DNS record for this hostname.
        /// </summary>
        [Input("dnsRecord")]
        public Input<string>? DnsRecord { get; set; }

        /// <summary>
        /// The status of the DNS record for this hostname. Accepted values are `none`, `pending`, `success` and `failed`.
        /// </summary>
        [Input("dnsRecordStatus")]
        public Input<string>? DnsRecordStatus { get; set; }

        /// <summary>
        /// The hostname for this Connector hostname.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Deprecated: If set to true, Formal will manage the TLS certificate for this hostname.
        /// </summary>
        [Input("managedTls")]
        public Input<bool>? ManagedTls { get; set; }

        /// <summary>
        /// If set to true, this connector hostname cannot be deleted.
        /// </summary>
        [Input("terminationProtection")]
        public Input<bool>? TerminationProtection { get; set; }

        /// <summary>
        /// The status of the TLS certificate for this hostname. Accepted values are `none`, `issuing`, and `issued`.
        /// </summary>
        [Input("tlsCertificateStatus")]
        public Input<string>? TlsCertificateStatus { get; set; }

        public ConnectorHostnameState()
        {
        }
        public static new ConnectorHostnameState Empty => new ConnectorHostnameState();
    }
}
